/**  REXX -- NUMBER SPECIFIC COLUMNS WITH ZERO FILL  **/
   RETURN_CODE = 0
   SAVEMSG = MSG()
   IF SAVEMSG = 'OFF' THEN X = MSG("ON")
   X = ADDRESS()
   SUBCOM ISPEXEC
   IF RC <> 0 THEN DO
      SAY 'NUMCOLS0 MUST BE RUN UNDER ISPF EDIT!'
      SIGNAL EOJ
   END
   SUBCOM ISREDIT
   IF RC = 0 THEN DO
      UMODE = 'ISREDIT'
      ADDRESS ISPEXEC "CONTROL ERRORS RETURN"
      ADDRESS ISREDIT,
         "ISREDIT MACRO (PARMS)"
      IF RC = 0 THEN DO
         ADDRESS ISREDIT "ISREDIT ("DSN") = DATASET"
      END
   END
   IF DSN = 'DSN' THEN DO
      SAY 'NUMCOLS0 EDIT MACRO CAN ONLY BE RUN UNDER ISPF EDIT',
          'WITH NO PENDING EDIT COMMANDS!'
      SIGNAL EOJ
   END

   PARMS    = TRANSLATE(PARMS)
   STARTCOL = ""
   ENDCOL   = ""
   STARTNUM = ""
   INCR     = ""
   SKIP     = ""
   LBL1     = ""
   LBL2     = ""
   DO II = 1 TO 7;
      TOKEN = WORD(PARMS,II)
      IF TOKEN = "" THEN LEAVE
      IF SUBSTR(TOKEN,1,1) = "." THEN DO
         IF LBL1 = "" THEN LBL1 = TOKEN
         ELSE IF LBL2 = "" THEN LBL2 = TOKEN
            ELSE DO
               ZEDSMSG = ".LABEL RC=8"
               ZEDLMSG = "TOO MANY LABELS --" LBL1 LBL2 TOKEN
               ADDRESS "ISPEXEC" "SETMSG MSG(ISRZ000)"
               SIGNAL DISPDOC
            END
      END
      ELSE DO
         IF DATATYPE(TOKEN,'W')  THEN DO
            IF STARTCOL = "" THEN STARTCOL = TOKEN
               ELSE IF ENDCOL   = "" THEN ENDCOL   = TOKEN
               ELSE IF STARTNUM = "" THEN STARTNUM = TOKEN
               ELSE IF INCR     = "" THEN INCR     = TOKEN
               ELSE IF SKIP     = "" THEN SKIP     = TOKEN
                  ELSE DO
                     ZEDSMSG = ".LABEL RC=8"
                     ZEDLMSG = "TOO MANY NUMBERS --" TOKEN
                     ADDRESS "ISPEXEC" "SETMSG MSG(ISRZ000)"
                     SIGNAL DISPDOC
                  END
         END
         ELSE DO
            ZEDSMSG = "BAD PARM"
            ZEDLMSG = "UNRECOGNIZED PARM --" TOKEN
            ADDRESS "ISPEXEC" "SETMSG MSG(ISRZ000)"
            SIGNAL DISPDOC
         END
      END
   END II
   IF LBL1 <> ""  &  LBL2 = ""  THEN LBL2 = LBL1

   ERRORMSG = ''
   MESG = ''
   IF STARTCOL = ''  |  ENDCOL = '' THEN DO
      MESG = 'REQUIRED PARAMETERS ARE MISSING!'
      SIGNAL ERROR
   END
   IF ¬DATATYPE(STARTCOL,'W')  |  STARTCOL = 0  THEN DO
      MESG = "'"STARTCOL"' VALUE OF STARTING COL IS INVALID!"
      SIGNAL ERROR
   END
   IF ¬DATATYPE(ENDCOL,'W') |  ENDCOL = 0 THEN DO
      MESG = "'"ENDCOL"' VALUE OF NUMBER SIZE IS INVALID!"
      SIGNAL ERROR
   END
   IF STARTNUM = '' THEN STARTNUM = 1
   ELSE IF STARTNUM <> '' THEN DO
      IF ¬DATATYPE(STARTNUM,'W') THEN DO
         MESG = "'"STARTNUM"' VALUE OF STARTING NUMBER IS INVALID!"
         SIGNAL ERROR
      END
   END
   IF INCR = '' THEN INCR = 1
   ELSE IF INCR <> '' THEN DO
      IF ¬DATATYPE(INCR,'W') THEN DO
         MESG = "'"INCR"' VALUE OF INCREMENT IS INVALID!"
         SIGNAL ERROR
      END
      IF INCR = 0 THEN DO
         MESG = "'"INCR"' INCREMENT VALUE OF 0 IS INVALID!"
         SIGNAL ERROR
      END
   END
   IF SKIP = '' THEN SKIP = 1
   ELSE IF SKIP <> '' THEN DO
      IF ¬DATATYPE(SKIP,'W') THEN DO
         MESG = "'"SKIP"' VALUE OF SKIP IS INVALID!"
         SIGNAL ERROR
      END
      IF SKIP = 0 THEN DO
         MESG = "'"SKIP"' SKIP VALUE OF 0 IS INVALID!"
         SIGNAL ERROR
      END
   END
   LEN = ENDCOL - STARTCOL + 1
   "ISREDIT ("LRECL") = LRECL "
   IF LEN > LRECL THEN DO
      MESG="CALCULATED SIZE IS GREATER THAN RECORD SIZE ("LRECL")"
      SIGNAL ERROR
   END

   IF LBL1 <> '' THEN DO
      "ISREDIT L &LBL1"
      IF RC <> 0 THEN DO
         MESG = "LABEL" LBL1 "NOT FOUND"
         SIGNAL ERROR
      END
   END
   IF LBL2 <> '' THEN DO
      "ISREDIT L &LBL2"
       IF RC <> 0 THEN DO
          MESG = "LABEL" LBL2 "NOT FOUND"
          SIGNAL ERROR
       END
    END
   "ISREDIT ("SAVLINE","SAVCOL") = CURSOR     "
   "ISREDIT ("ANUM") = AUTONUM              "
   "ISREDIT (END) = LINENUM .ZLAST"
   START = 1
   IF LBL1 <> '' THEN "ISREDIT (START) = LINENUM &LBL1"
   IF LBL2 <> '' THEN "ISREDIT (END) = LINENUM &LBL2"
      ELSE LBL2 = LBL1
   IF START > END THEN DO
      WST   = START
      START = END
      END   = WST
   END

   DO PNTR =  START  TO  END  BY SKIP
      "ISREDIT (RECORD) = LINE &PNTR"
      PATCH = RIGHT(STARTNUM,LEN,'0')
      RECORD = OVERLAY(PATCH,RECORD,STARTCOL,LEN)
      "ISREDIT LINE &PNTR = &STR(RECORD)"
      STARTNUM = STARTNUM + INCR
   END
   "ISREDIT LOCATE" START
   "ISREDIT AUTONUM = "ANUM
    SIGNAL EOJ

ERROR:
   IF MESG<>'' THEN DO
      RETURN_CODE = 20
      ERRORMSG='===>' MESG
   END
   SIGNAL DISPDOC

EOJ:
   X = MSG(SAVEMSG)
   RETURN RETURN_CODE

DISPDOC:
   ADDRESS TSO "CLEAR"
   SAY "NUMCOLS0 - SEQUENCE COLUMNS WITH ZERO PADDED NUMBERS "
   SAY
   SAY ERRORMSG
   SAY
   SAY " FORMAT "
   SAY
   SAY "  NUMCOLS0 START-COL END-COL (START-NUM INCREMENT SKIP) (.A .B)"
   SAY
   SAY "       STARTING AND ENDING COLUMNS ARE MANDATORY.  THE "
   SAY "       STARTING NUMBER, INCREMENT AND NUMBER OF LINES  "
   SAY "       TO SKIP DEFAULT TO 1.  ALL MUST BE NUMERIC. THE "
   SAY "       LABEL RANGE IS OPTIONAL AND MAY BE INTERMIXED.  "
   SAY
   SAY " EXAMPLE "
   SAY
   SAY "    NUMCOLS0  21 24  100 100 3  .A .B                       "
   SAY "       WILL PUT '0100' IN COLUMNS 21 THRU 24 ON THE 1ST LINE"
   SAY "       OF RANGE .A THRU .B, '0200' ON THE 4TH LINE, '0300'  "
   SAY "       ON THE 7TH LINE, ETC.                                "
   SAY
   EXIT(1)
