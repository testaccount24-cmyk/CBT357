/**  REXX -- FIND LARGEST VALUE IN SPECIFIC COLUMN LOCATION(S)  **/
   NUMERIC DIGITS 32
   SUBCOM ISPEXEC
   IF RC <> 0 THEN DO
      SAY 'FMAX EDIT MACRO CAN ONLY BE RUN UNDER ISPF EDIT!'
      RETURN
   END
   SUBCOM ISREDIT
   IF RC = 0 THEN DO
      ADDRESS ISREDIT "ISREDIT MACRO (PARMS)"
      PARMS = TRANSLATE(PARMS)
   END
   ELSE DO
      SAY 'FMAX EDIT MACRO CAN ONLY BE RUN UNDER ISPF EDIT!'
      RETURN
   END

   IF PARMS = '-=PFK=-' THEN DO;
      ADDRESS ISPEXEC "VGET (FBIGONE) SHARED"
      BIGGEST = FBIGONE
      ADDRESS ISPEXEC "VGET (FBIGCNT) SHARED"
      #BIGGEST = FBIGCNT
      ADDRESS ISPEXEC "VGET (FNSCOL1) SHARED"
      COL1    = FNSCOL1
      ADDRESS ISPEXEC "VGET (FNSCOL2) SHARED"
      COL2    = FNSCOL2
      ADDRESS ISPEXEC "VGET (FNSTART) SHARED"
      START   = FNSTART
      ADDRESS ISPEXEC "VGET (FNEND)   SHARED"
      END     = FNEND
      ADDRESS ISPEXEC "VGET (FPDIR)   SHARED"
      TYPE    = FPDIR

      RECORD = ""
      LEN = COL2 - COL1 + 1
      DO II = START TO END,
               WHILE SUBSTR(RECORD,COL1,LEN) <> BIGGEST
         "ISREDIT (RECORD) = LINE &II"
      END

      IF II <= END,
               | ( (II=(END+1)) & (SUBSTR(RECORD,COL1,LEN)=BIGGEST) )
            THEN DO
         FNSTART = II
         II      = II - 1
         ADDRESS ISPEXEC "VPUT (FNSTART) SHARED"
         STR = 'FOUND!' || '/' || #BIGGEST
         CALL SETMSG '* NO ' STR '$ANOTHER BIGGEST FOUND OVER TOTAL #'
         "ISREDIT LOCATE" II
         "ISREDIT CURSOR = " II COL1
      END
      ELSE DO
         STR = 'NOT FOUND!' || '/' || #BIGGEST
         CALL SETMSG '* NO ' STR '$NO MORE FOUND OVER TOTAL #'
         II = FNSTART - 1
         "ISREDIT LOCATE" II
         "ISREDIT CURSOR = " II COL1
      END
      RETURN
   END

   COL1    = -1
   COL2    = -1
   LBL1    = ""
   LBL2    = ""
   TYPE    = "CHAR"
   DO II = 1 TO 5;
      TOKEN = WORD(PARMS,II)
      IF TOKEN = "" THEN LEAVE
      IF SUBSTR(TOKEN,1,1) = "." THEN DO
         IF LBL1 = "" THEN LBL1 = TOKEN
         ELSE IF LBL2 = "" THEN LBL2 = TOKEN
            ELSE DO
               ZEDSMSG = ".LABEL RC=8"
               ZEDLMSG = "TOO MANY LABELS --" LBL1 LBL2 TOKEN
               ADDRESS "ISPEXEC" "SETMSG MSG(ISRZ000)"
               EXIT 8
            END
      END
      ELSE DO
         IF  DATATYPE(TOKEN,'W') THEN DO
            IF COL1 = -1 THEN COL1 = TOKEN
            ELSE IF COL2 = -1 THEN COL2 = TOKEN
               ELSE DO
                  ZEDSMSG = ".COLS RC=8"
                  ZEDLMSG = "TOO MANY COLUMNS --" COL1 COL2 TOKEN
                  ADDRESS "ISPEXEC" "SETMSG MSG(ISRZ000)"
                  EXIT 8
               END
         END
         ELSE DO
            IF TOKEN = 'C' THEN TYPE = 'CHAR'
            ELSE IF TOKEN = 'Z' THEN TYPE = 'ZONED'
            ELSE IF TOKEN = 'P' THEN TYPE = 'PACKED'
            ELSE IF TOKEN = 'B' THEN TYPE = 'BINARY'
               ELSE DO
                  ZEDSMSG = ".UNKWN RC=8"
                  ZEDLMSG = "UNKNOWN PARAMETER -" TOKEN
                  ADDRESS "ISPEXEC" "SETMSG MSG(ISRZ000)"
                  EXIT 8
               END
         END
      END
   END II

   ERRORMSG = ''
   MESG     = ''
   IF  COL1 = -1  |  COL2 = -1  THEN DO
      MESG = 'PARAMETERS ARE MISSING!'
      SIGNAL ERROR
   END
   "ISREDIT ("LRECL") = LRECL "
   IF COL1 > COL2  THEN DO
      TEMP = COL1
      COL1 = COL2
      COL2 = TEMP
   END
   IF COL1 > LRECL  THEN DO
      MESG = "'"COL1"' IS GREATER THAN RECORD SIZE("LRECL")"
      SIGNAL ERROR
   END
   IF COL.2 > LRECL  THEN DO
      MESG = "'"COL2"' IS GREATER THAN RECORD SIZE("LRECL")"
      SIGNAL ERROR
   END

   IF LBL1 <> ""  &  LBL2 = ""  THEN LBL2 = LBL1
   IF LBL1 <> "" THEN DO
      "ISREDIT L &LBL1"
       IF RC <> 0 THEN DO
          MESG = "LABEL" LBL1 "NOT FOUND"
          SIGNAL ERROR
       END
   END
   IF LBL2 <> "" THEN DO
      "ISREDIT L &LBL2"
       IF RC <> 0 THEN DO
          MESG = "LABEL" LBL2 "NOT FOUND"
          SIGNAL ERROR
       END
   END

   IF LBL1 <> "" THEN "ISREDIT (START) = LINENUM &LBL1"
      ELSE START = 1
   IF LBL2 <> "" THEN "ISREDIT (END)   = LINENUM &LBL2"
      ELSE "ISREDIT (END) = LINENUM .ZLAST"
   IF START > END THEN DO
      FLIP  = START
      START = END
      END   = FLIP
   END

   IF TYPE = 'CHAR'
      THEN BIGGEST = COPIES('00'X,COL2-COL1+1)
      ELSE IF TYPE = 'ZONED'
         THEN DO
            BIGGEST  = COPIES('9',COL2-COL1) || 'R'
            BIGGESTS = '-' || COPIES('9',COL2-COL1+1)
         END
         ELSE IF TYPE = 'PACKED'
            THEN DO
               BIGGEST  = COPIES('99'X,COL2-COL1) || '9D'X
               BIGGESTS = '-' || COPIES('9',2*(COL2-COL1+1)-1)
            END
            ELSE DO
               BIGGEST  = '80'X || COPIES('00'X,COL2-COL1)
               BIGGESTS = '-' || COPIES('9',2*(COL2-COL1+1)+1)
            END

   FALTNM   = 'FMAX'
   ADDRESS ISPEXEC "VPUT (FALTNM)  SHARED"
   FBIGONE = BIGGEST
   ADDRESS ISPEXEC "VPUT (FBIGONE) SHARED"
   FBIGCNT = #BIGGEST
   ADDRESS ISPEXEC "VPUT (FBIGCNT) SHARED"
   FNSCOL1 = COL1
   ADDRESS ISPEXEC "VPUT (FNSCOL1) SHARED"
   FNSCOL2 = COL2
   ADDRESS ISPEXEC "VPUT (FNSCOL2) SHARED"
   FNSTART = START
   ADDRESS ISPEXEC "VPUT (FNSTART) SHARED"
   FNEND   = END
   ADDRESS ISPEXEC "VPUT (FNEND)   SHARED"
   FPDIR   = TYPE
   ADDRESS ISPEXEC "VPUT (FPDIR) SHARED"

   #BIGGEST = 0
   @BIGGEST = 0
   #TOTAL   = 0
   LEN      = COL2 - COL1 + 1

   DO PNTR =  START  TO  END  BY 1
      "ISREDIT (RECORD) = LINE &PNTR"
      #TOTAL = #TOTAL + 1
      IF TYPE = 'CHAR'
         THEN DO
            IF SUBSTR(RECORD,COL1,LEN) > BIGGEST
               THEN DO
                  BIGGEST  = SUBSTR(RECORD,COL1,LEN)
                  @BIGGEST = PNTR
                  #BIGGEST = 1
               END
               ELSE IF SUBSTR(RECORD,COL1,LEN) = BIGGEST
                  THEN #BIGGEST = #BIGGEST + 1
         END
         ELSE IF TYPE = 'ZONED'
            THEN DO
               IF VERIFY(SUBSTR(RECORD,COL2,1),'}JKLMNOPQR') = 0
                  THEN DO;
                     RECSLICE = '-' || SUBSTR(RECORD,COL1,LEN-1),
                        || TRANSLATE(SUBSTR(RECORD,COL2,1),
                              ,'0123456789','}JKLMNOPQR')
                  END
                  ELSE DO;
                     RECSLICE = '+' || SUBSTR(RECORD,COL1,LEN-1),
                        || TRANSLATE(SUBSTR(RECORD,COL2,1),
                              ,'0123456789','{ABCDEFGHI')
                  END
               IF RECSLICE > BIGGESTS
                  THEN DO
                     BIGGEST  = SUBSTR(RECORD,COL1,LEN)
                     BIGGESTS = RECSLICE
                     @BIGGEST = PNTR
                     #BIGGEST = 1
                  END
                  ELSE IF RECSLICE = BIGGESTS
                     THEN #BIGGEST = #BIGGEST + 1
            END
         ELSE IF TYPE = 'PACKED'
            THEN DO
               IF VERIFY(SUBSTR(RECORD,COL2,1),
                     ,'0D1D2D3D4D5D6D7D8D9D'X) = 0
                  THEN DO;
                     RECSLICE = '-',
                        || C2X(SUBSTR(RECORD,COL1,COL2-COL1)),
                        || TRANSLATE(SUBSTR(RECORD,COL2,1),
                              ,'0123456789','0D1D2D3D4D5D6D7D8D9D'X)
                  END
                  ELSE DO;
                     RECSLICE = '+',
                        || C2X(SUBSTR(RECORD,COL1,COL2-COL1)),
                        || TRANSLATE(SUBSTR(RECORD,COL2,1),
                              ,'0123456789','0C1C2C3C4C5C6C7C8C9C'X)
                  END
               IF RECSLICE > BIGGESTS
                  THEN DO
                     BIGGEST  = SUBSTR(RECORD,COL1,LEN)
                     BIGGESTS = RECSLICE
                     @BIGGEST = PNTR
                     #BIGGEST = 1
                  END
                  ELSE IF RECSLICE = BIGGESTS
                     THEN #BIGGEST = #BIGGEST + 1
            END
         ELSE IF TYPE = 'BINARY'
            THEN DO
               RECSLICE = X2D(C2X(SUBSTR(RECORD,COL1,LEN)),(2*LEN))
               IF RECSLICE > BIGGESTS
                  THEN DO
                     BIGGEST  = SUBSTR(RECORD,COL1,LEN)
                     BIGGESTS = RECSLICE
                     @BIGGEST = PNTR
                     #BIGGEST = 1
                  END
                  ELSE IF RECSLICE = BIGGESTS
                     THEN #BIGGEST = #BIGGEST + 1
            END
   END

   FALTNM   = 'FMAX'
   ADDRESS ISPEXEC "VPUT (FALTNM)  SHARED"
   FBIGONE = BIGGEST
   ADDRESS ISPEXEC "VPUT (FBIGONE) SHARED"
   FBIGCNT = #BIGGEST
   ADDRESS ISPEXEC "VPUT (FBIGCNT) SHARED"
   FNSCOL1 = COL1
   ADDRESS ISPEXEC "VPUT (FNSCOL1) SHARED"
   FNSCOL2 = COL2
   ADDRESS ISPEXEC "VPUT (FNSCOL2) SHARED"
   FNSTART = @BIGGEST + 1
   ADDRESS ISPEXEC "VPUT (FNSTART) SHARED"
   FNEND   = END
   ADDRESS ISPEXEC "VPUT (FNEND)   SHARED"
   FPDIR   = TYPE
   ADDRESS ISPEXEC "VPUT (FPDIR)   SHARED"

   STR = #BIGGEST || '/' || #TOTAL
   CALL SETMSG '* NO ' STR '$# BIGGEST FOUND OVER TOTAL #'
   "ISREDIT LOCATE" @BIGGEST
   "ISREDIT CURSOR = " @BIGGEST COL1
   RETURN

SETMSG:
   PARSE ARG ZERRHM ZERRALRM ZERRSM'$'ZERRLM
   ADDRESS ISPEXEC 'SETMSG MSG(ISRZ002) COND'
   RETURN

ERROR:
   IF MESG <> '' THEN ERRORMSG = '===>' MESG
   SIGNAL DISPDOC

DISPDOC:
   ADDRESS TSO "CLEAR"
   SAY " FMAX - FIND THE LARGEST VALUE "
   SAY
   SAY ERRORMSG
   SAY
   SAY " FORMAT "
   SAY
   SAY "    FMAX  LEFT-COL RIGHT-COL  ( TYPE )  ( .LAB1 .LAB2 ) "
   SAY
   SAY "       COLUMNS ARE MANDATORY. TYPE AND LABELS ARE OPTIONAL  "
   SAY "       AND MAY BE INTERMIXED WITH THE COLUMN VALUES.  TYPE  "
   SAY "       DEFAULTS TO 'C' FOR CHARACTER OR SIGNED CHARACTER;   "
   SAY "       OTHER VALUES ARE 'P' FOR PACKED, 'B' FOR BINARY AND  "
   SAY "       'Z' FOR ZONED.                                       "
   SAY
   SAY " EXAMPLE "
   SAY
   SAY "    FMAX  P  41 45                         "
   SAY "       WILL FIND LARGEST PACKED VALUE IN   "
   SAY "       COLUMNS 41 THROUGH 45.              "
   SAY
   EXIT(1)
