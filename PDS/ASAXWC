*%ASAXWC: MACRO KEYS(PLISTVER,PATTERNSTR,PATTERNSTRLEN,STRING,
*                 STRINGLEN,ZEROORMORE,ONECHAR,DELIMITER,WORKAREA,
*                 RETCODE,MF);
*/**** START OF SPECIFICATIONS ****************************************
*01* DESCRIPTIVE NAME:  Wildcard service                              *
*                                                                     *
*01* FUNCTION:                                                        *
*      ASAXWC is an executable macro that does wildcard match         *
*      checking, comparing an input pattern string (which can contain *
*      wildcard characters) to an input string.                       *
*      AMODE:            31-bit.                                      *
*      ASC mode:         Primary.                                     *
*                                                                     *
*01* MACRO USAGE NOTES:                                               *
*                                                                     *
*    1.  Printing of the macro expansion is controlled by the ZPRINT  *
*        global macro variable.  Any value other than 'NO' will       *
*        result in the macro expansion being printed.  The default is *
*        'YES'.  The following examples illustrate how the ZPRINT     *
*        variable should be set.                                      *
*                                                                     *
*                    GBLC &ZPRINT                                     *
*            &ZPRINT SETC 'YES'          &ZPRINT SETC 'NO'            *
*                                                                     *
*    2.  All  keys currently contained in the ASAXWC macro correspond *
*        to  version 0.  If you specify PLISTVER, use a value of 0 or *
*        MAX.                                                         *
*                                                                     *
*    3.  The  use  of  * to match 0 or more characters and ? to match *
*        exactly 1 character are SAA standards.                       *
*                                                                     *
*Ýxlabel¨  ASAXWC   Ý PLISTVER=»xplistver|IMPLIED_VERSIONº¨           *
*                    ,PATTERNSTR=xpatternstr                          *
*                    ,PATTERNSTRLEN=xpatternstrlen                    *
*                    ,STRING=xstring                                  *
*                    ,STRINGLEN=xstringlen                            *
*                    ,ZEROORMORE=xzeroormore                          *
*                    ,ONECHAR=xonechar                                *
*                   Ý,DELIMITER=»xdelimiter|LENGTHS_WERE_SETº¨        *
*                   Ý,WORKAREA=»xworkarea|NO_WORKAREAº¨               *
*                   Ý,RETCODE=xretcode¨                               *
*                  ÐÝ,MF=S¨                                           *
*                  ÔÝ,MF=(L,xmfctrl»,xmfattr|0Dº)¨                    *
*                  ÔÝ,MF=(M,xmfctrl»,COMPLETE|NOCHECKº)¨              *
*                  ¿Ý,MF=(E,xmfctrl»,COMPLETE|NOCHECKº)¨              *
*                                                                     *
*      Where:                                                         *
*                                                                     *
*      Ýxlabel¨                                                       *
*          is an optional symbol, starting in column 1, that is the   *
*          name on the ASAXWC macro invocation.  The name must        *
*          conform to the rules for an ordinary assembler language    *
*          symbol.                                                    *
*          DEFAULT: No name.                                          *
*                                                                     *
*      ÝPLISTVER(»xplistver|IMPLIED_VERSIONº)¨                        *
*          is an optional byte input decimal value in the "0-0" range *
*          that specifies the macro version.  PLISTVER is the only    *
*          key allowed on the list form of MF and determines which    *
*          parameter list is generated (see Macro USAGE NOTE 2).      *
*          Note that MAX may be specified instead of a number, and    *
*          the parameter list will be of the largest size currently   *
*          supported. This size may grow from release to release      *
*          (thus possibly affecting the amount of storage needed by   *
*          your program).  If your program can tolerate this, IBM     *
*          recommends that you always specify MAX when creating the   *
*          list form parameter list as that will ensure that the list *
*          form parameter list is always long enough to hold whatever *
*          parameters might be specified on the execute form.         *
*          DEFAULT: IMPLIED_VERSION.  When PLISTVER is omitted, the   *
*          default is the lowest version which allows all of the      *
*          parameters specified on the invocation to be processed.    *
*                                                                     *
*      PATTERNSTR(xpatternstr)                                        *
*          is the name (RS-type) (or address in register (2)-(12) ASM *
*          only) of a required variable character input field         *
*          containing the wildcard pattern string.                    *
*                                                                     *
*      PATTERNSTRLEN(xpatternstrlen)                                  *
*          is the name (RS-type) (or address in register (2)-(12) ASM *
*          only) of a required fullword input field containing the    *
*          length of the wildcard pattern string.  The length         *
*          actually used is the length up to the first occurrence of  *
*          the delimiter character or this length if the delimiter    *
*          character is not present.                                  *
*                                                                     *
*      STRING(xstring)                                                *
*          is the name (RS-type) (or address in register (2)-(12) ASM *
*          only) of a required variable character input field         *
*          containing the string to match against.                    *
*                                                                     *
*      STRINGLEN(xstringlen)                                          *
*          is the name (RS-type) (or address in register (2)-(12) ASM *
*          only) of a required fullword input field containing the    *
*          length of the string to match against.  The length         *
*          actually used is the length up to the first occurrence of  *
*          the delimiter character or this length if the delimiter    *
*          character is not present.                                  *
*                                                                     *
*      ZEROORMORE(xzeroormore)                                        *
*          is the name (RS-type) (or address in register (2)-(12) ASM *
*          only) of a required 1 character input field that specifies *
*          the wildcard character that represents zero or more        *
*          characters. The normal character is "*".                   *
*                                                                     *
*      ONECHAR(xonechar)                                              *
*          is the name (RS-type) (or address in register (2)-(12) ASM *
*          only) of a required 1 character input field that specifies *
*          the wildcard character that represents exactly one         *
*          character. The normal character is "?".                    *
*                                                                     *
*      ÝDELIMITER(»xdelimiter|LENGTHS_WERE_SETº)¨                     *
*          is the name (RS-type) (or address in register (2)-(12) ASM *
*          only) of an optional 1 character input field that          *
*          specifies the character that indicates the end of the      *
*          input (either PatternStr or String).  The normal character *
*          is a blank.  If the specified lengths are already correct, *
*          do not specify this keyword.                               *
*          DEFAULT: LENGTHS_WERE_SET                                  *
*                                                                     *
*      ÝWORKAREA(»xworkarea|NO_WORKAREAº)¨                            *
*          is the name (RS-type) (or address in register (2)-(12) ASM *
*          only) of an optional 256 character input field that        *
*          specifies an area that the wildcard service can use as a   *
*          dynamic area. This will result in a call to the wildcard   *
*          service entry that does no getmains or freemains.  While   *
*          you cannot specify WORKAREA=(0), you can place the address *
*          of the workarea into register 0 and specify register 0 by  *
*          a symbolic name (e.g., WORKAREA=(symbol) where symbol is   *
*          equated to 0).  Using WORKAREA=(R0) will result in the     *
*          most efficient code being generated.  Do not specify       *
*          WORKAREA on the modify form.                               *
*          DEFAULT: NO_WORKAREA                                       *
*                                                                     *
*      ÝRETCODE(xretcode)¨                                            *
*          is the name (RS-type) of an optional fullword output       *
*          variable (or register (2)-(12) ASM only) into which the    *
*          return code is to be copied from GPR 15.                   *
*                                                                     *
*      ÝMF(»S|L|M|Eº)¨                                                *
*          is an optional keyword input which specifies the macro     *
*          form.                                                      *
*          DEFAULT: S                                                 *
*                                                                     *
*          ÝMF(S)¨                                                    *
*              specifies the standard form of the macro.  The "S"     *
*              form generates code to put the parameters into the     *
*              parameter list and invoke the desired service.  Full   *
*              checking for required macro keys is done along with    *
*              supplying defaults for omitted optional parameters.    *
*              The ?EPILOG macro must be invoked at the end of the    *
*              module.                                                *
*                                                                     *
*              For assembly language code modules, the "S" form       *
*              generates code to put the parameters into an in-line   *
*              parameter list and invoke the desired service.  Full   *
*              checking for required macro keys is done along with    *
*              supplying defaults for omitted optional parameters.    *
*                                                                     *
*          ÝMF(L,xmfctrl»,xmfattr|BDY(DWORD)º)¨                       *
*              specifies the list form of the macro.  The "L" form    *
*              defines an area to be used for the parameter list.     *
*              Only the PLISTVER key may be specified on the          *
*              invocation.  All other macro parameters are flagged as *
*              errors.  If PLISTVER is not specified, the original    *
*              parameter list definition is used.                     *
*                                                                     *
*            ,xmfctrl                                                 *
*              is a required input.  It is the name of a storage area *
*              for the parameter list.                                *
*                                                                     *
*            »,xmfattr|BDY(DWORD)º                                    *
*              is an optional 60 character input string that varies   *
*              from 1 to 60 characters. It can contain any value that *
*              is valid on an assembler DS pseudo-op                  *
*              (assembler-only). You can use this parameter to force  *
*              boundary alignment of the parameter list.              *
*              DEFAULT: 0D for Assembler, BDY(DWORD) for PL/AS, which *
*              forces the parameter list to a doubleword boundary.    *
*                                                                     *
*          ÝMF(M,xmfctrl»,COMPLETE|NOCHECKº)¨                         *
*              specifies the modify form of the macro.  The "M" form  *
*              generates code to put the parameters into the          *
*              parameter list specified by xmfctrl.                   *
*                                                                     *
*            ,xmfctrl                                                 *
*              is a required input.  It is the name (RS-type) (or     *
*              address in register (1)-(12) ASM only) of a storage    *
*              area for the parameter list.                           *
*                                                                     *
*            »,COMPLETE|NOCHECKº¨                                     *
*              is an optional keyword input which specifies the       *
*              degree of macro parameter syntax checking.             *
*              DEFAULT: COMPLETE                                      *
*                                                                     *
*                                                                     *
*              COMPLETE   Checking for required macro keys is done    *
*                        and defaults are supplied for omitted        *
*                        optional parameters.  (See Macro Usage Note  *
*                        2).                                          *
*                                                                     *
*              NOCHECK   Checking for required macro keys is not done *
*                        nor are defaults supplied for omitted        *
*                        optional parameters.                         *
*                                                                     *
*          ÝMF(E,xmfctrl»,COMPLETE|NOCHECKº)¨                         *
*              specifies the execute form of the macro.  The "E" form *
*              generates code to put the parameters into the          *
*              parameter list specified by xmfctrl and invoke the     *
*              desired service.                                       *
*                                                                     *
*            ,xmfctrl                                                 *
*              is a required input.  It is the name (RS-type) (or     *
*              address in register (1)-(12) ASM only) of a storage    *
*              area for the parameter list.                           *
*                                                                     *
*            »,COMPLETE|NOCHECKº                                      *
*              is an optional keyword input which specifies the       *
*              degree of macro parameter syntax checking.             *
*              DEFAULT: COMPLETE                                      *
*                                                                     *
*                                                                     *
*              COMPLETE   Checking for required macro keys is done    *
*                        and defaults are supplied for omitted        *
*                        optional parameters.  (See Macro Usage Note  *
*                        2).                                          *
*                                                                     *
*              NOCHECK   Checking for required macro keys is not done *
*                        nor are defaults supplied for omitted        *
*                        optional parameters.                         *
*                                                                     *
*01* RETURN CODES:                                                    *
*            0    Match.                                              *
*            8    No match.                                           *
*                                                                     *
*01* EXAMPLES:                                                        *
*           ASAXWC    PATTERNSTR=PS,      *                           *
*                     PATTERNSTRLEN=PSL,  *                           *
*                     STRING=S,           *                           *
*                     STRINGLEN=SL,       *                           *
*                     ZEROORMORE=Z,       *                           *
*                     ONECHAR=O,          *                           *
*                     DELIMITER=D,        *                           *
*                     RETCODE=R,          *                           *
*                     MF=(E,MYLIST)                                   *
*      PS      DC     C'HE?L*'                                        *
*      PSL     DC     A(L'PS)                                         *
*      S       DC     C'HELLO'                                        *
*      SL      DC     A(L'S)                                          *
*      Z       DC     CL1'*'                                          *
*      O       DC     CL1'?'                                          *
*      D       DC     CL1' '                                          *
*      DYNAREA DSECT                                                  *
*      R       DS     F                                               *
*           ASAXWC    MF=(L,MYLIST)                                   *
*/*********************************************************************
         MACRO
&XLABEL  ASAXWC &PLISTVER=,&PATTERNSTR=,&PATTERNSTRLEN=,&STRING=,      *
               &STRINGLEN=,&ZEROORMORE=,&ONECHAR=,&DELIMITER=,         *
               &WORKAREA=,&RETCODE=,&MF=
.*
*                   MACDATE -07/19/94-<0>
.*
.*******************************************************************
.***AB.02  GLOBAL VARIABLES TO CONTROL PRINT AND CODE GENERATION
.*******************************************************************
                   GBLC  &ZPRINT     YES=PRINT NO=NO PRINT
                   GBLC  &ZTEST      YES=TEST NO=NO TEST
                   GBLC  &ZSYSTEM    PCCODE10, MVS, SAK, VM, XAX
.*
                   GBLC  &ZASAXWC    YES=MACRO USED AT LEAST ONCE
.*******************************************************************
.***AB.03  COMMONLY USED LOCAL MACRO VARIABLES
.*******************************************************************
                   LCLC  &ZMS        ERROR MESSAGE WORK AREA
                   LCLC  &ZCNDX      LAST THREE SYSNDX CHARACTERS
                   LCLC  &ZCLNG      USED WHEN LENGTH IS NEEDED
                   LCLC  &ZCGPR      USED WHEN VALUE IS IN A GPR
                   LCLC  &ZCVAL      USED TO CONTAIN FIXED VALUE
                   LCLA  &ZAWRK      USED AS A WORK AREA
                   LCLA  &ZASIZ      USED FOR SIZE OF VALUE
                   LCLA  &ZN         NUMERIC WORK VARIABLE
                   LCLC  &ZC         CHARACTER WORK VARIABLE
                   LCLC  &ZTLC       CHARACTER TOO LONG VARIABLE
                   LCLA  &ZTLA       VALUE TOO LONG VARIABLE
                   LCLA  &ZMACRET    MACRO RETURN CODE
&ZMACRET           SETA  0           ASSUME NO ERRORS
.*
                   LCLC  &ZCSYSLIST(255)        NONXKEY, POS ARRAY
                   LCLA  &ZASYSLNDX  WORK INDEX FOR ZCSYSLIST()
                   LCLA  &ZPLLEN     PARAMETER LIST LENGTH
                   LCLA  &ZPLWORKA   PARAMETER LIST LENGTH
.*******************************************************************
.***AB.04  MACRO VARIABLES FOR RANGES AND SETS OF ARGUMENTS
.*******************************************************************
                   LCLA  &ZI         INDEX FOR ARRAY
                   LCLA  &ZJ         INDEX FOR PARMS
                   LCLA  &ZK         INDEX FOR PARSE
                   LCLA  &ZLO        LOW RANGE VALUE
                   LCLA  &ZHI        HIGH RANGE VALUE
                   LCLC  &ZW         WORK AREA FOR PARM
.********************************************************************
.***AB.05  INVOKE MVS MACROS TO CONTROL CODE GENERATION
.********************************************************************
                   GBLC  &SYSSPLV    SP LEVEL 1,2,3 -SPLEVEL
                   GBLC  &SYSASCE    SYSTEM STATE P ANY AR-SYSSTATE
.*
                   AIF   (K'&SYSASCE GT 0).ZSYS4  SYS STATE DEFINED
                   AIF   (K'&SYSSPLV GT 0).ZSYS2  SP LEVEL DEFINED
                   SPLEVEL  TEST
.ZSYS2             ANOP  ,
                   AIF   ('&SYSSPLV' EQ '1').ZSYS3  PRE SP 3.1
                   AIF   ('&SYSSPLV' EQ '2').ZSYS3  PRE SP 3.1
                   SYSSTATE TEST
                   AGO   .ZSYS4
.ZSYS3             ANOP  ,
&SYSASCE           SETC  'P'         ASSUME SYSSTATE PRIMARY
.ZSYS4             ANOP  ,
.*******************************************************************
.***AB.07  DEFINE ALL MACRO VARIABLES
.*******************************************************************
                   LCLA  &XPLISTVER  ++ VALUE
                   LCLC  &XPATTERNSTR           ++ NAME
                   LCLC  &XPATTERNSTRLEN        ++ NAME
                   LCLC  &XSTRING    ++ NAME
                   LCLC  &XSTRINGLEN            ++ NAME
                   LCLC  &XZEROORMORE           ++ NAME
                   LCLC  &XONECHAR   ++ NAME
                   LCLC  &XDELIMITER            ++ NAME
                   LCLC  &XWORKAREA  ++ NAME
                   LCLC  &XRETCODE   ++ NAME
                   LCLC  &XMF        ++ VALUE
                   LCLC  &XMFCTRL    ++ NAME
                   LCLC  &XMFATTR    ++ VALUE
                   LCLC  &XMFSCK     ++ VALUE
.*******************************************************************
.***AB.13  DEFINE MACRO VARIABLES FOR INPUT/OUTPUT PROCESSING
.*******************************************************************
                   LCLC  &ZXPLISTVER            ++ INPUT VALUE
                   LCLC  &ZXPATTERNSTR          ++ INPUT NAME
                   LCLC  &ZXPATTERNSTRLEN       ++ INPUT NAME
                   LCLC  &ZXSTRING   ++ INPUT NAME
                   LCLC  &ZXSTRINGLEN           ++ INPUT NAME
                   LCLC  &ZXZEROORMORE          ++ INPUT NAME
                   LCLC  &ZXONECHAR  ++ INPUT NAME
                   LCLC  &ZXDELIMITER           ++ INPUT NAME
                   LCLC  &ZXWORKAREA            ++ INPUT NAME
                   LCLC  &ZXRETCODE  ++ OUTPUT NAME
                   LCLC  &ZXMF       ++ INPUT VALUE
                   LCLC  &ZXMFCTRL   ++ INPUT NAME
                   LCLC  &ZXMFATTR   ++ INPUT VALUE
                   LCLC  &ZXMFSCK    ++ INPUT VALUE
.********************************************************************
.***AC.PLV01  PROCESS PLISTVER                                      *
.********************************************************************
&XPLISTVER      SETA  0
                AIF   (K'&PLISTVER(1) LE 0).ZPLV0
                AIF   ('&PLISTVER(1)' NE 'MAX').ZPLV0
&XPLISTVER      SETA  0
.ZPLV0          ANOP  ,
.*
                AIF   (K'&PLISTVER(1) LE 0).ZPVCKE
                AIF   ('&PLISTVER(1)' EQ 'IMPLIED_VERSION').ZPVCKE
                AIF   ('&PLISTVER(1)' EQ 'MAX').ZPVCKE
.*-------------------------------------------------------------------
                AIF   (N'&PLISTVER LE 1).ZPVCK3  CK NUM
&ZMS            SETC  '"PLISTVER='         *KPOSA* MNOTE
&ZMS            SETC  '&ZMS.&PLISTVER"'
&ZMS            SETC  '&ZMS "PLISTVER"'
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE
                AGO   .ZPVCK2
.ZPVCK3         ANOP  ,
.*-------------------------------------------------------------------
                AIF   ('&PLISTVER'(1,1) NE '(').ZPVCK2
&ZMS            SETC  '"PLISTVER='         *KGPRA* MNOTE
&ZMS            SETC  '&ZMS.&PLISTVER"'
&ZMS            SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'
                MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE
                AGO   .ZPVCKE
.ZPVCK2         ANOP  ,
.*-------------------------------------------------------------------
&ZN             SETA   &PLISTVER(1)        CONVERT TO ARITHMETIC
                AIF   (&ZN GE &XPLISTVER).ZPVCK4
&ZMS            SETC  'PLISTVER='          *KVALA* MNOTE
&ZMS            SETC  '&ZMS.&PLISTVER(1)'
&ZMS            SETC  '&ZMS., BUT PLISTVER OF'
&ZMS            SETC  '&ZMS &XPLISTVER'
                MNOTE 8,' &ZMS IS REQUIRED.'
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE
                AGO   .ZPVCK5
.ZPVCK4         ANOP  ,
&XPLISTVER      SETA  &PLISTVER(1)
.ZPVCK5         ANOP  ,
.*-------------------------------------------------------------------
&ZCVAL          SETC  '&PLISTVER(1)'
                AIF   ('&ZCVAL'(1,1) EQ '(').ZPVCKE  IN GPR
                AIF   (T'&ZCVAL NE 'N').ZPVCK6  NUMERIC ERR
                AIF   (&XPLISTVER LT 0).ZPVCK6  TOO LOW
                AIF   (&XPLISTVER LE 0).ZPVCKE  NOT HIGH
.ZPVCK6         ANOP   ,
&ZMS            SETC  '"PLISTVER='         *KRNGA* MNOTE
&ZMS            SETC  '&ZMS.&PLISTVER"'
&ZMS            SETC  '&ZMS THE RANGE IS "0-0"'
                MNOTE 8,' &ZMS FOR ARGUMENT 1.'
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE
.ZPVCKE         ANOP   ,
.********************************************************************
.***AG.MF01 PROCESS MF MACRO FORMS
.********************************************************************
                   ACTR  10000
.*------------------------------------------------------------------
.***AG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL
&XMF               SETC  ''          INITIALIZE XVARIABLE
.*-------------------------------------------------------------------
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL
.ZG33              ANOP  ,
&ZTLC              SETC 'S'
                   AIF   ('&MF(1)' NE '&ZTLC').ZG34
&XMF               SETC  'S'         SET KEYWORD
&XMFSCK            SETC  'COMPLETE'  SET XMFSCK
                   AIF   (N'&MF LE 1).ZG33A     CK NUM
&ZMS               SETC  '"MF='      *KPOSA* MNOTE
&ZMS               SETC  '&ZMS.&MF"'
&ZMS               SETC  '&ZMS "MF"'
                   MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE
.ZG33A             ANOP  ,
.*-------------------------------------------------------------------
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL
.ZG34              ANOP  ,
&ZTLC              SETC 'L'
                   AIF   ('&MF(1)' NE '&ZTLC').ZG41
&XMF               SETC  'L'         SET KEYWORD
                   AIF   (N'&MF LE 3).ZG34A     CK NUM
&ZMS               SETC  '"MF='      *KPOSA* MNOTE
&ZMS               SETC  '&ZMS.&MF"'
&ZMS               SETC  '&ZMS "MF"'
                   MNOTE 8,' &ZMS CAN HAVE ONLY 3 ARGUMENTS.'
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE
.ZG34A             ANOP  ,
.*-------------------------------------------------------------------
.***AG.KKCTL08 -MF(L) SPECIAL CHECK
                   AIF   (N'&SYSLIST NE 0).ZG34B  POSITIONALS?
                   AIF   ('&PATTERNSTR' NE '').ZG34B  KEYS?
                   AIF   ('&PATTERNSTRLEN' NE '').ZG34B  KEYS?
                   AIF   ('&STRING' NE '').ZG34B  KEYS?
                   AIF   ('&STRINGLEN' NE '').ZG34B  KEYS?
                   AIF   ('&ZEROORMORE' NE '').ZG34B  KEYS?
                   AIF   ('&ONECHAR' NE '').ZG34B  KEYS?
                   AIF   ('&DELIMITER' NE '').ZG34B  KEYS?
                   AIF   ('&WORKAREA' NE '').ZG34B  KEYS?
                   AIF   ('&RETCODE' NE '').ZG34B  KEYS?
                   AGO    .ZG34C     INVOCATION OKAY
.ZG34B             ANOP  ,
&ZMS               SETC  'THE "L" FORM OF "MF"'  *MFLA* MNOTE
&ZMS               SETC  '&ZMS CAN ONLY HAVE'
&ZMS               SETC  '&ZMS THE "PLISTVER" KEY'
                   MNOTE 8,' &ZMS SPECIFIED ON THE INVOCATION.'
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE
.ZG34C             ANOP  ,
.*-------------------------------------------------------------------
.***AG.KXVAR06 NAME, OPT RQD INPUT, POS(2) -XVARIABLE
&ZXMFCTRL          SETC  'INPUT'     SET IN/OUTPUT
&XMFCTRL           SETC  '&MF(2,1)'  SET XVARIABLE
                   AIF   (N'&MF(2) GT 1).ZG36B  MULTI PARMS
&XMFCTRL           SETC  '&MF(2)'    SET XVARIABLE
.ZG36B             AIF   (K'&MF(2) GT 0).ZG36C
&ZXMFCTRL          SETC  ''          RESET IN/OUTPUT
&ZMS               SETC  'WHEN "L" IS SPECIFIED'  *KRQDA*
&ZMS               SETC  '&ZMS FOR THE "MF" KEY, POSITIONAL'
                   MNOTE 8,' &ZMS ARG 2 IS REQUIRED.'
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE
.ZG36C             ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK01 NAME, OPT RQD INPUT, POS(2) -GPR NOT ALLOWED
                   AIF   (K'&ZXMFCTRL LE 0).ZG36P  NOT I/O
                   AIF   ('&XMFCTRL'(1,1) NE '(').ZG36P
&ZXMFCTRL          SETC  ''          RESET IN/OUTPUT
&ZMS               SETC  '"MF='      *KGPRA* MNOTE
&ZMS               SETC  '&ZMS.&MF"'
&ZMS               SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'
                   MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 2.'
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE
.ZG36P             ANOP  ,
.*-------------------------------------------------------------------
.***AG.KXVAR13 VALUE, OPT INPUT, POS(3) -XVARIABLE
&ZXMFATTR          SETC  'INPUT'     SET IN/OUTPUT
&XMFATTR           SETC  '0D'
                   AIF   (K'&MF(3) LE 0).ZG39B  PARM
&XMFATTR           SETC  '&MF(3,1)'  SET XVARIABLE
                   AIF   (N'&MF(3) GT 1).ZG39B  MULTI PARMS
&XMFATTR           SETC  '&MF(3)'    SET XVARIABLE
.ZG39B             ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK01 VALUE, OPT INPUT, POS(3) -GPR NOT ALLOWED
                   AIF   (K'&ZXMFATTR LE 0).ZG39P  NOT I/O
                   AIF   ('&XMFATTR'(1,1) NE '(').ZG39P
&ZXMFATTR          SETC  ''          RESET IN/OUTPUT
&ZMS               SETC  '"MF='      *KGPRA* MNOTE
&ZMS               SETC  '&ZMS.&MF"'
&ZMS               SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'
                   MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 3.'
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE
.ZG39P             ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK03 VALUE, OPT INPUT, POS(3) -CHARACTER LENGTH
                   AIF   (K'&ZXMFATTR LE 0).ZG39S  NOT I/O
                   AIF   (K'&XMFATTR LE 60).ZG39S  LNG OK
&ZXMFATTR          SETC  ''          RESET IN/OUTPUT
&ZMS               SETC  '"MF='      *KLNGA* MNOTE
&ZMS               SETC  '&ZMS.&MF"'
&ZMS               SETC  '&ZMS ARGUMENT 3 EXCEEDS THE MAXIMUM'
                   MNOTE 8,' &ZMS LENGTH OF 60 CHARACTERS.'
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE
.ZG39S             ANOP  ,
.*-------------------------------------------------------------------
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL
.ZG41              ANOP  ,
&ZTLC              SETC 'M'
                   AIF   ('&MF(1)' NE '&ZTLC').ZG50
&XMF               SETC  'M'         SET KEYWORD
                   AIF   (N'&MF LE 3).ZG41A     CK NUM
&ZMS               SETC  '"MF='      *KPOSA* MNOTE
&ZMS               SETC  '&ZMS.&MF"'
&ZMS               SETC  '&ZMS "MF"'
                   MNOTE 8,' &ZMS CAN HAVE ONLY 3 ARGUMENTS.'
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE
.ZG41A             ANOP  ,
.*-------------------------------------------------------------------
.***AG.KXVAR06 NAME, OPT RQD INPUT, POS(2) -XVARIABLE
&ZXMFCTRL          SETC  'INPUT'     SET IN/OUTPUT
&XMFCTRL           SETC  '&MF(2,1)'  SET XVARIABLE
                   AIF   (N'&MF(2) GT 1).ZG43B  MULTI PARMS
&XMFCTRL           SETC  '&MF(2)'    SET XVARIABLE
.ZG43B             AIF   (K'&MF(2) GT 0).ZG43C
&ZXMFCTRL          SETC  ''          RESET IN/OUTPUT
&ZMS               SETC  'WHEN "M" IS SPECIFIED'  *KRQDA*
&ZMS               SETC  '&ZMS FOR THE "MF" KEY, POSITIONAL'
                   MNOTE 8,' &ZMS ARG 2 IS REQUIRED.'
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE
.ZG43C             ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, OPT RQD INPUT, POS(2) -GPR OUT OF RANGE
                   AIF   (K'&ZXMFCTRL LE 0).ZG43R  NOT I/O
                   AIF   ('&XMFCTRL'(1,1) NE '(').ZG43R
&ZCGPR             SETC  '&XMFCTRL'(2,K'&XMFCTRL-2)
                   AIF   ('&ZCGPR'(1,1) NE '0').ZG43P
                   AIF   (K'&ZCGPR GT 2).ZG43Q
                   AIF   ('&ZCGPR' EQ '0').ZG43Q
&ZCGPR             SETC  '&ZCGPR'(2,1)
                   AIF   (T'&ZCGPR NE 'N').ZG43Q  INVALID REG NAME
.ZG43P             ANOP  ,
                   AIF   (T'&ZCGPR NE 'N').ZG43R  NON NUMERIC
                   AIF   ('&ZCGPR' LT '1').ZG43Q
                   AIF   ('&ZCGPR' LE '12').ZG43R
.ZG43Q             ANOP  ,
&ZMS               SETC  '"MF='      *KGPRA* MNOTE
&ZMS               SETC  '&ZMS.&MF"'
&ZMS               SETC  '&ZMS ARGUMENT 2 MUST SPECIFY A REGISTER'
                   MNOTE 8,' &ZMS IN THE RANGE (1)-(12).'
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE
.ZG43R             ANOP  ,
.*-------------------------------------------------------------------
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD
&XMFSCK            SETC  ''          INITIALIZE XVARIABLE
.ZG47A   AIF   ('&MF(3)' NE 'COMPLETE').ZG48A
&XMFSCK            SETC  'COMPLETE'  SET KEYWORD
.*-------------------------------------------------------------------
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD
.ZG48A   AIF   ('&MF(3)' NE 'NOCHECK').ZG49A
&XMFSCK            SETC  'NOCHECK'   SET KEYWORD
.*-------------------------------------------------------------------
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD
.ZG49A             AIF   (K'&XMFSCK GT 0).ZG49C  KEYWORD
                   AIF   (K'&MF(3) LE 0).ZG49B
&ZMS               SETC  '"MF='      *KUKWA* MNOTE
&ZMS               SETC  '&ZMS.&MF"'
&ZMS               SETC  '&ZMS ARGUMENT 3 IS AN UNKNOWN KEYWORD. '
&ZMS               SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'
&ZMS               SETC  '&ZMS "COMPLETE"'      VALID KEYWORD
&ZMS               SETC  '&ZMS OR "NOCHECK".'   VALID KEYWORD
                   MNOTE 8,' &ZMS '
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE
.ZG49B             ANOP  ,
&XMFSCK            SETC  'COMPLETE'  SET DEFAULT KEYWORD
.ZG49C             ANOP  ,
&ZXMFSCK           SETC  'INPUT'     SET IN/OUTPUT
.*-------------------------------------------------------------------
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL
.ZG50              ANOP  ,
&ZTLC              SETC 'E'
                   AIF   ('&MF(1)' NE '&ZTLC').ZG59
&XMF               SETC  'E'         SET KEYWORD
                   AIF   (N'&MF LE 3).ZG50A     CK NUM
&ZMS               SETC  '"MF='      *KPOSA* MNOTE
&ZMS               SETC  '&ZMS.&MF"'
&ZMS               SETC  '&ZMS "MF"'
                   MNOTE 8,' &ZMS CAN HAVE ONLY 3 ARGUMENTS.'
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE
.ZG50A             ANOP  ,
.*-------------------------------------------------------------------
.***AG.KXVAR06 NAME, OPT RQD INPUT, POS(2) -XVARIABLE
&ZXMFCTRL          SETC  'INPUT'     SET IN/OUTPUT
&XMFCTRL           SETC  '&MF(2,1)'  SET XVARIABLE
                   AIF   (N'&MF(2) GT 1).ZG52B  MULTI PARMS
&XMFCTRL           SETC  '&MF(2)'    SET XVARIABLE
.ZG52B             AIF   (K'&MF(2) GT 0).ZG52C
&ZXMFCTRL          SETC  ''          RESET IN/OUTPUT
&ZMS               SETC  'WHEN "E" IS SPECIFIED'  *KRQDA*
&ZMS               SETC  '&ZMS FOR THE "MF" KEY, POSITIONAL'
                   MNOTE 8,' &ZMS ARG 2 IS REQUIRED.'
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE
.ZG52C             ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, OPT RQD INPUT, POS(2) -GPR OUT OF RANGE
                   AIF   (K'&ZXMFCTRL LE 0).ZG52R  NOT I/O
                   AIF   ('&XMFCTRL'(1,1) NE '(').ZG52R
&ZCGPR             SETC  '&XMFCTRL'(2,K'&XMFCTRL-2)
                   AIF   ('&ZCGPR'(1,1) NE '0').ZG52P
                   AIF   (K'&ZCGPR GT 2).ZG52Q
                   AIF   ('&ZCGPR' EQ '0').ZG52Q
&ZCGPR             SETC  '&ZCGPR'(2,1)
                   AIF   (T'&ZCGPR NE 'N').ZG52Q  INVALID REG NAME
.ZG52P             ANOP  ,
                   AIF   (T'&ZCGPR NE 'N').ZG52R  NON NUMERIC
                   AIF   ('&ZCGPR' LT '1').ZG52Q
                   AIF   ('&ZCGPR' LE '12').ZG52R
.ZG52Q             ANOP  ,
&ZMS               SETC  '"MF='      *KGPRA* MNOTE
&ZMS               SETC  '&ZMS.&MF"'
&ZMS               SETC  '&ZMS ARGUMENT 2 MUST SPECIFY A REGISTER'
                   MNOTE 8,' &ZMS IN THE RANGE (1)-(12).'
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE
.ZG52R             ANOP  ,
.*-------------------------------------------------------------------
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD
&XMFSCK            SETC  ''          INITIALIZE XVARIABLE
.ZG56A   AIF   ('&MF(3)' NE 'COMPLETE').ZG57A
&XMFSCK            SETC  'COMPLETE'  SET KEYWORD
.*-------------------------------------------------------------------
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD
.ZG57A   AIF   ('&MF(3)' NE 'NOCHECK').ZG58A
&XMFSCK            SETC  'NOCHECK'   SET KEYWORD
.*-------------------------------------------------------------------
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD
.ZG58A             AIF   (K'&XMFSCK GT 0).ZG58C  KEYWORD
                   AIF   (K'&MF(3) LE 0).ZG58B
&ZMS               SETC  '"MF='      *KUKWA* MNOTE
&ZMS               SETC  '&ZMS.&MF"'
&ZMS               SETC  '&ZMS ARGUMENT 3 IS AN UNKNOWN KEYWORD. '
&ZMS               SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'
&ZMS               SETC  '&ZMS "COMPLETE"'      VALID KEYWORD
&ZMS               SETC  '&ZMS OR "NOCHECK".'   VALID KEYWORD
                   MNOTE 8,' &ZMS '
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE
.ZG58B             ANOP  ,
&XMFSCK            SETC  'COMPLETE'  SET DEFAULT KEYWORD
.ZG58C             ANOP  ,
&ZXMFSCK           SETC  'INPUT'     SET IN/OUTPUT
.*------------------------------------------------------------------
.***AG.KKCTL04 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL
.ZG59              ANOP  ,
&ZXMF              SETC  'INPUT'     SET IN/OUTPUT
                   AIF   (K'&XMF GT 0).ZG59E    VALID ARG
                   AIF   (T'&MF EQ 'O').ZG59D   OMITTED
&ZASYSLNDX         SETA  0
.ZG59A             ANOP  ,           POSITIONAL MACRO KEY
&ZASYSLNDX         SETA  &ZASYSLNDX+1
                   AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG59C
&ZTLC              SETC 'MF'
                   AIF   ('&SYSLIST(&ZASYSLNDX)' NE '&ZTLC').ZG59A
.ZG59B             ANOP  ,
&ZXMF              SETC  ''          RESET IN/OUTPUT
&ZMS               SETC  'THE "MF" KEY'         *KOPTA* MNOTE
&ZMS               SETC  '&ZMS MUST CONTAIN ONE'
                   MNOTE 8,' &ZMS (OR MORE) ARGUMENT(S).'
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE
                   AGO   .ZG59E
.ZG59C             ANOP  ,
&ZXMF              SETC  ''          RESET IN/OUTPUT
&ZMS               SETC  '"MF='      *KUKWA* MNOTE
&ZMS               SETC  '&ZMS.&MF"'
&ZMS               SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '
&ZMS               SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'
&ZMS               SETC  '&ZMS "S",'            VALID KEYWORD
&ZMS               SETC  '&ZMS "L",'            VALID KEYWORD
&ZMS               SETC  '&ZMS "M",'            VALID KEYWORD
&ZMS               SETC  '&ZMS OR "E".'         VALID KEYWORD
                   MNOTE 8,' &ZMS '
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE
                   AGO   .ZG59E
.ZG59D             ANOP  ,
&XMF               SETC  'S'         SET DEFAULT KEYWORD
&XMFSCK            SETC  'COMPLETE'  COMPLETE CHECKING
.ZG59E             ANOP  ,
.********************************************************************
.***AG.MF02  FULL MACRO SYNTAX CHECKING
.********************************************************************
                   ACTR  10000
.*-------------------------------------------------------------------
.***AG.MF03 MF=(SLME)
                   AIF   ('&XMF' EQ 'L').ZGMFX
                   AIF   ('&XMFSCK' NE 'COMPLETE').ZGMFX
.*----------------------------------------------------------------***
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY
                   AIF   (N'&PATTERNSTR LE 1).ZG5A  CK NUM
&ZMS               SETC  '"PATTERNSTR='         *KPOSA* MNOTE
&ZMS               SETC  '&ZMS.&PATTERNSTR"'
&ZMS               SETC  '&ZMS "PATTERNSTR"'
                   MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE
.ZG5A              ANOP  ,
.*-------------------------------------------------------------------
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE
&ZXPATTERNSTR      SETC  'INPUT'     SET IN/OUTPUT
&XPATTERNSTR       SETC  '&PATTERNSTR(1)'       SET XVARIABLE
                   AIF   (N'&PATTERNSTR GT 1).ZG5B  MULTI PARMS
&XPATTERNSTR       SETC  '&PATTERNSTR'          SET XVARIABLE
.ZG5B              AIF   (K'&PATTERNSTR(1) GT 0).ZG5C
&ZXPATTERNSTR      SETC  ''          RESET IN/OUTPUT
&ZMS               SETC  ' '         *KRQDA*
&ZMS               SETC  '&ZMS "PATTERNSTR" KEY AND ITS ARGUMENT'
                   MNOTE 8,' &ZMS ARE REQUIRED.'
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE
.ZG5C              ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE
                   AIF   (K'&ZXPATTERNSTR LE 0).ZG5R  NOT I/O
                   AIF   ('&XPATTERNSTR'(1,1) NE '(').ZG5R
&ZCGPR             SETC  '&XPATTERNSTR'(2,K'&XPATTERNSTR-2)
                   AIF   ('&ZCGPR'(1,1) NE '0').ZG5P
                   AIF   (K'&ZCGPR GT 2).ZG5Q
                   AIF   ('&ZCGPR' EQ '0').ZG5Q
&ZCGPR             SETC  '&ZCGPR'(2,1)
                   AIF   (T'&ZCGPR NE 'N').ZG5Q  INVALID REG NAME
.ZG5P              ANOP  ,
                   AIF   (T'&ZCGPR NE 'N').ZG5R  NON NUMERIC
                   AIF   ('&ZCGPR' LT '2').ZG5Q
                   AIF   ('&ZCGPR' LE '12').ZG5R
.ZG5Q              ANOP  ,
&ZMS               SETC  '"PATTERNSTR='         *KGPRA* MNOTE
&ZMS               SETC  '&ZMS.&PATTERNSTR"'
&ZMS               SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                   MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE
.ZG5R              ANOP  ,
.*----------------------------------------------------------------***
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY
                   AIF   (N'&PATTERNSTRLEN LE 1).ZG8A  CK NUM
&ZMS               SETC  '"PATTERNSTRLEN='      *KPOSA* MNOTE
&ZMS               SETC  '&ZMS.&PATTERNSTRLEN"'
&ZMS               SETC  '&ZMS "PATTERNSTRLEN"'
                   MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE
.ZG8A              ANOP  ,
.*-------------------------------------------------------------------
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE
&ZXPATTERNSTRLEN   SETC  'INPUT'     SET IN/OUTPUT
&XPATTERNSTRLEN    SETC  '&PATTERNSTRLEN(1)'    SET XVARIABLE
                   AIF   (N'&PATTERNSTRLEN GT 1).ZG8B  MULTI PARMS
&XPATTERNSTRLEN    SETC  '&PATTERNSTRLEN'       SET XVARIABLE
.ZG8B              AIF   (K'&PATTERNSTRLEN(1) GT 0).ZG8C
&ZXPATTERNSTRLEN   SETC  ''          RESET IN/OUTPUT
&ZMS               SETC  ' '         *KRQDA*
&ZMS               SETC  '&ZMS "PATTERNSTRLEN" KEY AND ITS ARGUMENT'
                   MNOTE 8,' &ZMS ARE REQUIRED.'
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE
.ZG8C              ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE
                   AIF   (K'&ZXPATTERNSTRLEN LE 0).ZG8R  NOT I/O
                   AIF   ('&XPATTERNSTRLEN'(1,1) NE '(').ZG8R
&ZCGPR             SETC  '&XPATTERNSTRLEN'(2,K'&XPATTERNSTRLEN-2)
                   AIF   ('&ZCGPR'(1,1) NE '0').ZG8P
                   AIF   (K'&ZCGPR GT 2).ZG8Q
                   AIF   ('&ZCGPR' EQ '0').ZG8Q
&ZCGPR             SETC  '&ZCGPR'(2,1)
                   AIF   (T'&ZCGPR NE 'N').ZG8Q  INVALID REG NAME
.ZG8P              ANOP  ,
                   AIF   (T'&ZCGPR NE 'N').ZG8R  NON NUMERIC
                   AIF   ('&ZCGPR' LT '2').ZG8Q
                   AIF   ('&ZCGPR' LE '12').ZG8R
.ZG8Q              ANOP  ,
&ZMS               SETC  '"PATTERNSTRLEN='      *KGPRA* MNOTE
&ZMS               SETC  '&ZMS.&PATTERNSTRLEN"'
&ZMS               SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                   MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE
.ZG8R              ANOP  ,
.*----------------------------------------------------------------***
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY
                   AIF   (N'&STRING LE 1).ZG11A  CK NUM
&ZMS               SETC  '"STRING='  *KPOSA* MNOTE
&ZMS               SETC  '&ZMS.&STRING"'
&ZMS               SETC  '&ZMS "STRING"'
                   MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE
.ZG11A             ANOP  ,
.*-------------------------------------------------------------------
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE
&ZXSTRING          SETC  'INPUT'     SET IN/OUTPUT
&XSTRING           SETC  '&STRING(1)'           SET XVARIABLE
                   AIF   (N'&STRING GT 1).ZG11B  MULTI PARMS
&XSTRING           SETC  '&STRING'   SET XVARIABLE
.ZG11B             AIF   (K'&STRING(1) GT 0).ZG11C
&ZXSTRING          SETC  ''          RESET IN/OUTPUT
&ZMS               SETC  ' '         *KRQDA*
&ZMS               SETC  '&ZMS "STRING" KEY AND ITS ARGUMENT'
                   MNOTE 8,' &ZMS ARE REQUIRED.'
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE
.ZG11C             ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE
                   AIF   (K'&ZXSTRING LE 0).ZG11R  NOT I/O
                   AIF   ('&XSTRING'(1,1) NE '(').ZG11R
&ZCGPR             SETC  '&XSTRING'(2,K'&XSTRING-2)
                   AIF   ('&ZCGPR'(1,1) NE '0').ZG11P
                   AIF   (K'&ZCGPR GT 2).ZG11Q
                   AIF   ('&ZCGPR' EQ '0').ZG11Q
&ZCGPR             SETC  '&ZCGPR'(2,1)
                   AIF   (T'&ZCGPR NE 'N').ZG11Q  INVALID REG NAME
.ZG11P             ANOP  ,
                   AIF   (T'&ZCGPR NE 'N').ZG11R  NON NUMERIC
                   AIF   ('&ZCGPR' LT '2').ZG11Q
                   AIF   ('&ZCGPR' LE '12').ZG11R
.ZG11Q             ANOP  ,
&ZMS               SETC  '"STRING='  *KGPRA* MNOTE
&ZMS               SETC  '&ZMS.&STRING"'
&ZMS               SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                   MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE
.ZG11R             ANOP  ,
.*----------------------------------------------------------------***
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY
                   AIF   (N'&STRINGLEN LE 1).ZG14A  CK NUM
&ZMS               SETC  '"STRINGLEN='          *KPOSA* MNOTE
&ZMS               SETC  '&ZMS.&STRINGLEN"'
&ZMS               SETC  '&ZMS "STRINGLEN"'
                   MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE
.ZG14A             ANOP  ,
.*-------------------------------------------------------------------
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE
&ZXSTRINGLEN       SETC  'INPUT'     SET IN/OUTPUT
&XSTRINGLEN        SETC  '&STRINGLEN(1)'        SET XVARIABLE
                   AIF   (N'&STRINGLEN GT 1).ZG14B  MULTI PARMS
&XSTRINGLEN        SETC  '&STRINGLEN'           SET XVARIABLE
.ZG14B             AIF   (K'&STRINGLEN(1) GT 0).ZG14C
&ZXSTRINGLEN       SETC  ''          RESET IN/OUTPUT
&ZMS               SETC  ' '         *KRQDA*
&ZMS               SETC  '&ZMS "STRINGLEN" KEY AND ITS ARGUMENT'
                   MNOTE 8,' &ZMS ARE REQUIRED.'
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE
.ZG14C             ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE
                   AIF   (K'&ZXSTRINGLEN LE 0).ZG14R  NOT I/O
                   AIF   ('&XSTRINGLEN'(1,1) NE '(').ZG14R
&ZCGPR             SETC  '&XSTRINGLEN'(2,K'&XSTRINGLEN-2)
                   AIF   ('&ZCGPR'(1,1) NE '0').ZG14P
                   AIF   (K'&ZCGPR GT 2).ZG14Q
                   AIF   ('&ZCGPR' EQ '0').ZG14Q
&ZCGPR             SETC  '&ZCGPR'(2,1)
                   AIF   (T'&ZCGPR NE 'N').ZG14Q  INVALID REG NAME
.ZG14P             ANOP  ,
                   AIF   (T'&ZCGPR NE 'N').ZG14R  NON NUMERIC
                   AIF   ('&ZCGPR' LT '2').ZG14Q
                   AIF   ('&ZCGPR' LE '12').ZG14R
.ZG14Q             ANOP  ,
&ZMS               SETC  '"STRINGLEN='          *KGPRA* MNOTE
&ZMS               SETC  '&ZMS.&STRINGLEN"'
&ZMS               SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                   MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE
.ZG14R             ANOP  ,
.*----------------------------------------------------------------***
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY
                   AIF   (N'&ZEROORMORE LE 1).ZG17A  CK NUM
&ZMS               SETC  '"ZEROORMORE='         *KPOSA* MNOTE
&ZMS               SETC  '&ZMS.&ZEROORMORE"'
&ZMS               SETC  '&ZMS "ZEROORMORE"'
                   MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE
.ZG17A             ANOP  ,
.*-------------------------------------------------------------------
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE
&ZXZEROORMORE      SETC  'INPUT'     SET IN/OUTPUT
&XZEROORMORE       SETC  '&ZEROORMORE(1)'       SET XVARIABLE
                   AIF   (N'&ZEROORMORE GT 1).ZG17B  MULTI PARMS
&XZEROORMORE       SETC  '&ZEROORMORE'          SET XVARIABLE
.ZG17B             AIF   (K'&ZEROORMORE(1) GT 0).ZG17C
&ZXZEROORMORE      SETC  ''          RESET IN/OUTPUT
&ZMS               SETC  ' '         *KRQDA*
&ZMS               SETC  '&ZMS "ZEROORMORE" KEY AND ITS ARGUMENT'
                   MNOTE 8,' &ZMS ARE REQUIRED.'
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE
.ZG17C             ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE
                   AIF   (K'&ZXZEROORMORE LE 0).ZG17R  NOT I/O
                   AIF   ('&XZEROORMORE'(1,1) NE '(').ZG17R
&ZCGPR             SETC  '&XZEROORMORE'(2,K'&XZEROORMORE-2)
                   AIF   ('&ZCGPR'(1,1) NE '0').ZG17P
                   AIF   (K'&ZCGPR GT 2).ZG17Q
                   AIF   ('&ZCGPR' EQ '0').ZG17Q
&ZCGPR             SETC  '&ZCGPR'(2,1)
                   AIF   (T'&ZCGPR NE 'N').ZG17Q  INVALID REG NAME
.ZG17P             ANOP  ,
                   AIF   (T'&ZCGPR NE 'N').ZG17R  NON NUMERIC
                   AIF   ('&ZCGPR' LT '2').ZG17Q
                   AIF   ('&ZCGPR' LE '12').ZG17R
.ZG17Q             ANOP  ,
&ZMS               SETC  '"ZEROORMORE='         *KGPRA* MNOTE
&ZMS               SETC  '&ZMS.&ZEROORMORE"'
&ZMS               SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                   MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE
.ZG17R             ANOP  ,
.*----------------------------------------------------------------***
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY
                   AIF   (N'&ONECHAR LE 1).ZG20A  CK NUM
&ZMS               SETC  '"ONECHAR='            *KPOSA* MNOTE
&ZMS               SETC  '&ZMS.&ONECHAR"'
&ZMS               SETC  '&ZMS "ONECHAR"'
                   MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE
.ZG20A             ANOP  ,
.*-------------------------------------------------------------------
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE
&ZXONECHAR         SETC  'INPUT'     SET IN/OUTPUT
&XONECHAR          SETC  '&ONECHAR(1)'          SET XVARIABLE
                   AIF   (N'&ONECHAR GT 1).ZG20B  MULTI PARMS
&XONECHAR          SETC  '&ONECHAR'  SET XVARIABLE
.ZG20B             AIF   (K'&ONECHAR(1) GT 0).ZG20C
&ZXONECHAR         SETC  ''          RESET IN/OUTPUT
&ZMS               SETC  ' '         *KRQDA*
&ZMS               SETC  '&ZMS "ONECHAR" KEY AND ITS ARGUMENT'
                   MNOTE 8,' &ZMS ARE REQUIRED.'
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE
.ZG20C             ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE
                   AIF   (K'&ZXONECHAR LE 0).ZG20R  NOT I/O
                   AIF   ('&XONECHAR'(1,1) NE '(').ZG20R
&ZCGPR             SETC  '&XONECHAR'(2,K'&XONECHAR-2)
                   AIF   ('&ZCGPR'(1,1) NE '0').ZG20P
                   AIF   (K'&ZCGPR GT 2).ZG20Q
                   AIF   ('&ZCGPR' EQ '0').ZG20Q
&ZCGPR             SETC  '&ZCGPR'(2,1)
                   AIF   (T'&ZCGPR NE 'N').ZG20Q  INVALID REG NAME
.ZG20P             ANOP  ,
                   AIF   (T'&ZCGPR NE 'N').ZG20R  NON NUMERIC
                   AIF   ('&ZCGPR' LT '2').ZG20Q
                   AIF   ('&ZCGPR' LE '12').ZG20R
.ZG20Q             ANOP  ,
&ZMS               SETC  '"ONECHAR='            *KGPRA* MNOTE
&ZMS               SETC  '&ZMS.&ONECHAR"'
&ZMS               SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                   MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE
.ZG20R             ANOP  ,
.*----------------------------------------------------------------***
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY
                   AIF   (N'&DELIMITER LE 1).ZG23A  CK NUM
&ZMS               SETC  '"DELIMITER='          *KPOSA* MNOTE
&ZMS               SETC  '&ZMS.&DELIMITER"'
&ZMS               SETC  '&ZMS "DELIMITER"'
                   MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE
.ZG23A             ANOP  ,
.*-------------------------------------------------------------------
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE
&ZXDELIMITER       SETC  'INPUT'     SET IN/OUTPUT
&XDELIMITER        SETC  'LENGTHS_WERE_SET'
                   AIF   (K'&DELIMITER(1) LE 0).ZG23B  PARM
&XDELIMITER        SETC  '&DELIMITER(1)'        SET XVARIABLE
                   AIF   (N'&DELIMITER GT 1).ZG23B  MULTI PARMS
&XDELIMITER        SETC  '&DELIMITER'           SET XVARIABLE
.ZG23B             ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE
                   AIF   (K'&ZXDELIMITER LE 0).ZG23R  NOT I/O
                   AIF   ('&XDELIMITER' EQ 'LENGTHS_WERE_SET').ZG23R
                   AIF   ('&XDELIMITER'(1,1) NE '(').ZG23R
&ZCGPR             SETC  '&XDELIMITER'(2,K'&XDELIMITER-2)
                   AIF   ('&ZCGPR'(1,1) NE '0').ZG23P
                   AIF   (K'&ZCGPR GT 2).ZG23Q
                   AIF   ('&ZCGPR' EQ '0').ZG23Q
&ZCGPR             SETC  '&ZCGPR'(2,1)
                   AIF   (T'&ZCGPR NE 'N').ZG23Q  INVALID REG NAME
.ZG23P             ANOP  ,
                   AIF   (T'&ZCGPR NE 'N').ZG23R  NON NUMERIC
                   AIF   ('&ZCGPR' LT '2').ZG23Q
                   AIF   ('&ZCGPR' LE '12').ZG23R
.ZG23Q             ANOP  ,
&ZMS               SETC  '"DELIMITER='          *KGPRA* MNOTE
&ZMS               SETC  '&ZMS.&DELIMITER"'
&ZMS               SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                   MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE
.ZG23R             ANOP  ,
.*----------------------------------------------------------------***
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY
                   AIF   (N'&WORKAREA LE 1).ZG26A  CK NUM
&ZMS               SETC  '"WORKAREA='           *KPOSA* MNOTE
&ZMS               SETC  '&ZMS.&WORKAREA"'
&ZMS               SETC  '&ZMS "WORKAREA"'
                   MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE
.ZG26A             ANOP  ,
.*-------------------------------------------------------------------
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE
&ZXWORKAREA        SETC  'INPUT'     SET IN/OUTPUT
&XWORKAREA         SETC  'NO_WORKAREA'
                   AIF   (K'&WORKAREA(1) LE 0).ZG26B  PARM
&XWORKAREA         SETC  '&WORKAREA(1)'         SET XVARIABLE
                   AIF   (N'&WORKAREA GT 1).ZG26B  MULTI PARMS
&XWORKAREA         SETC  '&WORKAREA'            SET XVARIABLE
.ZG26B             ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE
                   AIF   (K'&ZXWORKAREA LE 0).ZG26R  NOT I/O
                   AIF   ('&XWORKAREA' EQ 'NO_WORKAREA').ZG26R
                   AIF   ('&XWORKAREA'(1,1) NE '(').ZG26R
&ZCGPR             SETC  '&XWORKAREA'(2,K'&XWORKAREA-2)
                   AIF   ('&ZCGPR'(1,1) NE '0').ZG26P
                   AIF   (K'&ZCGPR GT 2).ZG26Q
                   AIF   ('&ZCGPR' EQ '0').ZG26Q
&ZCGPR             SETC  '&ZCGPR'(2,1)
                   AIF   (T'&ZCGPR NE 'N').ZG26Q  INVALID REG NAME
.ZG26P             ANOP  ,
                   AIF   (T'&ZCGPR NE 'N').ZG26R  NON NUMERIC
                   AIF   ('&ZCGPR' LT '2').ZG26Q
                   AIF   ('&ZCGPR' LE '12').ZG26R
.ZG26Q             ANOP  ,
&ZMS               SETC  '"WORKAREA='           *KGPRA* MNOTE
&ZMS               SETC  '&ZMS.&WORKAREA"'
&ZMS               SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                   MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE
.ZG26R             ANOP  ,
.*----------------------------------------------------------------***
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY
                   AIF   (N'&RETCODE LE 1).ZG29A  CK NUM
&ZMS               SETC  '"RETCODE='            *KPOSA* MNOTE
&ZMS               SETC  '&ZMS.&RETCODE"'
&ZMS               SETC  '&ZMS "RETCODE"'
                   MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE
.ZG29A             ANOP  ,
.*-------------------------------------------------------------------
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE
                   AIF   (K'&RETCODE(1) LE 0).ZG29C  NO PARM
&ZXRETCODE         SETC  'OUTPUT'    SET OUTPUT
&XRETCODE          SETC  '&RETCODE(1)'          SET XVARIABLE
                   AIF   (N'&RETCODE GT 1).ZG29C
&XRETCODE          SETC  '&RETCODE'  SET XVARIABLE
.ZG29C             ANOP  ,
.*-------------------------------------------------------------------
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE
                   AIF   (K'&ZXRETCODE LE 0).ZG29R  NOT I/O
                   AIF   ('&XRETCODE'(1,1) NE '(').ZG29R
&ZCGPR             SETC  '&XRETCODE'(2,K'&XRETCODE-2)
                   AIF   ('&ZCGPR'(1,1) NE '0').ZG29P
                   AIF   (K'&ZCGPR GT 2).ZG29Q
                   AIF   ('&ZCGPR' EQ '0').ZG29Q
&ZCGPR             SETC  '&ZCGPR'(2,1)
                   AIF   (T'&ZCGPR NE 'N').ZG29Q  INVALID REG NAME
.ZG29P             ANOP  ,
                   AIF   (T'&ZCGPR NE 'N').ZG29R  NON NUMERIC
                   AIF   ('&ZCGPR' LT '2').ZG29Q
                   AIF   ('&ZCGPR' LE '12').ZG29R
.ZG29Q             ANOP  ,
&ZMS               SETC  '"RETCODE='            *KGPRA* MNOTE
&ZMS               SETC  '&ZMS.&RETCODE"'
&ZMS               SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                   MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE
.ZG29R             ANOP  ,
.******************************************************************
.***AH.P00 CHECK STANDALONE POSITIONAL VARIABLES
.******************************************************************
                   ACTR  10000
.*----------------------------------------------------------------***
.***AH.P02 EXTRA POSITIONALS
                   AIF   (N'&SYSLIST LE 0).ZGLISTX  NO EXTRAS
&ZCVAL             SETC  ''          ERROR FIELD
&ZAWRK             SETA  0           POSITIONAL NUMBER
.ZGLIST2           ANOP  ,
&ZAWRK             SETA  &ZAWRK+1    NEXT POSITIONAL
                   AIF   (&ZAWRK GT N'&SYSLIST).ZGLIST3  DONE
&ZCVAL             SETC '&ZCVAL,&SYSLIST(&ZAWRK)'  EXTRA
                   AGO   .ZGLIST2
.*
.ZGLIST3           ANOP  ,
&ZCVAL             SETC '&ZCVAL'(2,K'&ZCVAL-1)  STRIP COMMA
&ZMS               SETC  'POSITIONAL ARGUMENT(S),'  *PPOSA* MNOTE
&ZMS               SETC  '&ZMS "&ZCVAL"'
&ZMS               SETC  '&ZMS CANNOT BE USED.'
&ZMS               SETC  '&ZMS NO POSITIONAL ARGUMENTS'
                   MNOTE 8,' &ZMS ARE ALLOWED.'
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE
.ZGLISTX           ANOP  ,
&ZASYSLNDX         SETA  0
.*-------------------------------------------------------------------
.***AG.MF04 MF=(SLME)
.ZGMFX             ANOP  ,           END OF FULL SYNTAX CHECK
.********************************************************************
.***AE.MF01   PARTIAL MACRO SYNTAX CHECKING
.********************************************************************
                   ACTR  10000
.*-------------------------------------------------------------------
.***AE.MF01 MF=(SLME)
                   AIF   ('&XMF' EQ 'L').ZEMFX
                   AIF   ('&XMFSCK' NE 'NOCHECK').ZEMFX
.********************************************************************
.***AE.KC00 INITIALIZE KEYWORD CONTROL VARIABLES
.********************************************************************
.*----------------------------------------------------------------***
.***AE.KXVAR03 NAME, RQD INPUT, KEYS -XVAR KEY
                   AIF   (N'&PATTERNSTR LE 1).ZE5A  CK NUM
&ZMS               SETC  '"PATTERNSTR='         *KPOSA* MNOTE
&ZMS               SETC  '&ZMS.&PATTERNSTR"'
&ZMS               SETC  '&ZMS "PATTERNSTR"'
                   MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE
.ZE5A              ANOP  ,
.*-------------------------------------------------------------------
.***AE.KXVAR04 NAME, RQD INPUT, KEYS -XVAR ARGUMENT
                   AIF   (K'&PATTERNSTR(1) LE 0).ZE5B NO PRM
&ZXPATTERNSTR      SETC  'INPUT'     SET IN/OUTPUT
&XPATTERNSTR       SETC  '&PATTERNSTR(1)'       SET XVARIABLE
                   AIF   (N'&PATTERNSTR GT 1).ZE5B
.*                 ANOP              MULTIPLE PARMS
&XPATTERNSTR       SETC  '&PATTERNSTR'          SET XVARIABLE
.ZE5B              ANOP  ,
.*-------------------------------------------------------------------
.***AE.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE
                   AIF   (K'&ZXPATTERNSTR LE 0).ZE5R  NOT I/O
                   AIF   ('&XPATTERNSTR'(1,1) NE '(').ZE5R
&ZCGPR             SETC  '&XPATTERNSTR'(2,K'&XPATTERNSTR-2)
                   AIF   ('&ZCGPR'(1,1) NE '0').ZE5P
                   AIF   (K'&ZCGPR GT 2).ZE5Q
                   AIF   ('&ZCGPR' EQ '0').ZE5Q
&ZCGPR             SETC  '&ZCGPR'(2,1)
                   AIF   (T'&ZCGPR NE 'N').ZE5Q  INVALID REG NAME
.ZE5P              ANOP  ,
                   AIF   (T'&ZCGPR NE 'N').ZE5R  NON NUMERIC
                   AIF   ('&ZCGPR' LT '2').ZE5Q
                   AIF   ('&ZCGPR' LE '12').ZE5R
.ZE5Q              ANOP  ,
&ZMS               SETC  '"PATTERNSTR='         *KGPRA* MNOTE
&ZMS               SETC  '&ZMS.&PATTERNSTR"'
&ZMS               SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                   MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE
.ZE5R              ANOP  ,
.*----------------------------------------------------------------***
.***AE.KXVAR03 NAME, RQD INPUT, KEYS -XVAR KEY
                   AIF   (N'&PATTERNSTRLEN LE 1).ZE8A  CK NUM
&ZMS               SETC  '"PATTERNSTRLEN='      *KPOSA* MNOTE
&ZMS               SETC  '&ZMS.&PATTERNSTRLEN"'
&ZMS               SETC  '&ZMS "PATTERNSTRLEN"'
                   MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE
.ZE8A              ANOP  ,
.*-------------------------------------------------------------------
.***AE.KXVAR04 NAME, RQD INPUT, KEYS -XVAR ARGUMENT
                   AIF   (K'&PATTERNSTRLEN(1) LE 0).ZE8B NO PRM
&ZXPATTERNSTRLEN   SETC  'INPUT'     SET IN/OUTPUT
&XPATTERNSTRLEN    SETC  '&PATTERNSTRLEN(1)'    SET XVARIABLE
                   AIF   (N'&PATTERNSTRLEN GT 1).ZE8B
.*                 ANOP              MULTIPLE PARMS
&XPATTERNSTRLEN    SETC  '&PATTERNSTRLEN'       SET XVARIABLE
.ZE8B              ANOP  ,
.*-------------------------------------------------------------------
.***AE.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE
                   AIF   (K'&ZXPATTERNSTRLEN LE 0).ZE8R  NOT I/O
                   AIF   ('&XPATTERNSTRLEN'(1,1) NE '(').ZE8R
&ZCGPR             SETC  '&XPATTERNSTRLEN'(2,K'&XPATTERNSTRLEN-2)
                   AIF   ('&ZCGPR'(1,1) NE '0').ZE8P
                   AIF   (K'&ZCGPR GT 2).ZE8Q
                   AIF   ('&ZCGPR' EQ '0').ZE8Q
&ZCGPR             SETC  '&ZCGPR'(2,1)
                   AIF   (T'&ZCGPR NE 'N').ZE8Q  INVALID REG NAME
.ZE8P              ANOP  ,
                   AIF   (T'&ZCGPR NE 'N').ZE8R  NON NUMERIC
                   AIF   ('&ZCGPR' LT '2').ZE8Q
                   AIF   ('&ZCGPR' LE '12').ZE8R
.ZE8Q              ANOP  ,
&ZMS               SETC  '"PATTERNSTRLEN='      *KGPRA* MNOTE
&ZMS               SETC  '&ZMS.&PATTERNSTRLEN"'
&ZMS               SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                   MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE
.ZE8R              ANOP  ,
.*----------------------------------------------------------------***
.***AE.KXVAR03 NAME, RQD INPUT, KEYS -XVAR KEY
                   AIF   (N'&STRING LE 1).ZE11A  CK NUM
&ZMS               SETC  '"STRING='  *KPOSA* MNOTE
&ZMS               SETC  '&ZMS.&STRING"'
&ZMS               SETC  '&ZMS "STRING"'
                   MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE
.ZE11A             ANOP  ,
.*-------------------------------------------------------------------
.***AE.KXVAR04 NAME, RQD INPUT, KEYS -XVAR ARGUMENT
                   AIF   (K'&STRING(1) LE 0).ZE11B NO PRM
&ZXSTRING          SETC  'INPUT'     SET IN/OUTPUT
&XSTRING           SETC  '&STRING(1)'           SET XVARIABLE
                   AIF   (N'&STRING GT 1).ZE11B
.*                 ANOP              MULTIPLE PARMS
&XSTRING           SETC  '&STRING'   SET XVARIABLE
.ZE11B             ANOP  ,
.*-------------------------------------------------------------------
.***AE.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE
                   AIF   (K'&ZXSTRING LE 0).ZE11R  NOT I/O
                   AIF   ('&XSTRING'(1,1) NE '(').ZE11R
&ZCGPR             SETC  '&XSTRING'(2,K'&XSTRING-2)
                   AIF   ('&ZCGPR'(1,1) NE '0').ZE11P
                   AIF   (K'&ZCGPR GT 2).ZE11Q
                   AIF   ('&ZCGPR' EQ '0').ZE11Q
&ZCGPR             SETC  '&ZCGPR'(2,1)
                   AIF   (T'&ZCGPR NE 'N').ZE11Q  INVALID REG NAME
.ZE11P             ANOP  ,
                   AIF   (T'&ZCGPR NE 'N').ZE11R  NON NUMERIC
                   AIF   ('&ZCGPR' LT '2').ZE11Q
                   AIF   ('&ZCGPR' LE '12').ZE11R
.ZE11Q             ANOP  ,
&ZMS               SETC  '"STRING='  *KGPRA* MNOTE
&ZMS               SETC  '&ZMS.&STRING"'
&ZMS               SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                   MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE
.ZE11R             ANOP  ,
.*----------------------------------------------------------------***
.***AE.KXVAR03 NAME, RQD INPUT, KEYS -XVAR KEY
                   AIF   (N'&STRINGLEN LE 1).ZE14A  CK NUM
&ZMS               SETC  '"STRINGLEN='          *KPOSA* MNOTE
&ZMS               SETC  '&ZMS.&STRINGLEN"'
&ZMS               SETC  '&ZMS "STRINGLEN"'
                   MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE
.ZE14A             ANOP  ,
.*-------------------------------------------------------------------
.***AE.KXVAR04 NAME, RQD INPUT, KEYS -XVAR ARGUMENT
                   AIF   (K'&STRINGLEN(1) LE 0).ZE14B NO PRM
&ZXSTRINGLEN       SETC  'INPUT'     SET IN/OUTPUT
&XSTRINGLEN        SETC  '&STRINGLEN(1)'        SET XVARIABLE
                   AIF   (N'&STRINGLEN GT 1).ZE14B
.*                 ANOP              MULTIPLE PARMS
&XSTRINGLEN        SETC  '&STRINGLEN'           SET XVARIABLE
.ZE14B             ANOP  ,
.*-------------------------------------------------------------------
.***AE.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE
                   AIF   (K'&ZXSTRINGLEN LE 0).ZE14R  NOT I/O
                   AIF   ('&XSTRINGLEN'(1,1) NE '(').ZE14R
&ZCGPR             SETC  '&XSTRINGLEN'(2,K'&XSTRINGLEN-2)
                   AIF   ('&ZCGPR'(1,1) NE '0').ZE14P
                   AIF   (K'&ZCGPR GT 2).ZE14Q
                   AIF   ('&ZCGPR' EQ '0').ZE14Q
&ZCGPR             SETC  '&ZCGPR'(2,1)
                   AIF   (T'&ZCGPR NE 'N').ZE14Q  INVALID REG NAME
.ZE14P             ANOP  ,
                   AIF   (T'&ZCGPR NE 'N').ZE14R  NON NUMERIC
                   AIF   ('&ZCGPR' LT '2').ZE14Q
                   AIF   ('&ZCGPR' LE '12').ZE14R
.ZE14Q             ANOP  ,
&ZMS               SETC  '"STRINGLEN='          *KGPRA* MNOTE
&ZMS               SETC  '&ZMS.&STRINGLEN"'
&ZMS               SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                   MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE
.ZE14R             ANOP  ,
.*----------------------------------------------------------------***
.***AE.KXVAR03 NAME, RQD INPUT, KEYS -XVAR KEY
                   AIF   (N'&ZEROORMORE LE 1).ZE17A  CK NUM
&ZMS               SETC  '"ZEROORMORE='         *KPOSA* MNOTE
&ZMS               SETC  '&ZMS.&ZEROORMORE"'
&ZMS               SETC  '&ZMS "ZEROORMORE"'
                   MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE
.ZE17A             ANOP  ,
.*-------------------------------------------------------------------
.***AE.KXVAR04 NAME, RQD INPUT, KEYS -XVAR ARGUMENT
                   AIF   (K'&ZEROORMORE(1) LE 0).ZE17B NO PRM
&ZXZEROORMORE      SETC  'INPUT'     SET IN/OUTPUT
&XZEROORMORE       SETC  '&ZEROORMORE(1)'       SET XVARIABLE
                   AIF   (N'&ZEROORMORE GT 1).ZE17B
.*                 ANOP              MULTIPLE PARMS
&XZEROORMORE       SETC  '&ZEROORMORE'          SET XVARIABLE
.ZE17B             ANOP  ,
.*-------------------------------------------------------------------
.***AE.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE
                   AIF   (K'&ZXZEROORMORE LE 0).ZE17R  NOT I/O
                   AIF   ('&XZEROORMORE'(1,1) NE '(').ZE17R
&ZCGPR             SETC  '&XZEROORMORE'(2,K'&XZEROORMORE-2)
                   AIF   ('&ZCGPR'(1,1) NE '0').ZE17P
                   AIF   (K'&ZCGPR GT 2).ZE17Q
                   AIF   ('&ZCGPR' EQ '0').ZE17Q
&ZCGPR             SETC  '&ZCGPR'(2,1)
                   AIF   (T'&ZCGPR NE 'N').ZE17Q  INVALID REG NAME
.ZE17P             ANOP  ,
                   AIF   (T'&ZCGPR NE 'N').ZE17R  NON NUMERIC
                   AIF   ('&ZCGPR' LT '2').ZE17Q
                   AIF   ('&ZCGPR' LE '12').ZE17R
.ZE17Q             ANOP  ,
&ZMS               SETC  '"ZEROORMORE='         *KGPRA* MNOTE
&ZMS               SETC  '&ZMS.&ZEROORMORE"'
&ZMS               SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                   MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE
.ZE17R             ANOP  ,
.*----------------------------------------------------------------***
.***AE.KXVAR03 NAME, RQD INPUT, KEYS -XVAR KEY
                   AIF   (N'&ONECHAR LE 1).ZE20A  CK NUM
&ZMS               SETC  '"ONECHAR='            *KPOSA* MNOTE
&ZMS               SETC  '&ZMS.&ONECHAR"'
&ZMS               SETC  '&ZMS "ONECHAR"'
                   MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE
.ZE20A             ANOP  ,
.*-------------------------------------------------------------------
.***AE.KXVAR04 NAME, RQD INPUT, KEYS -XVAR ARGUMENT
                   AIF   (K'&ONECHAR(1) LE 0).ZE20B NO PRM
&ZXONECHAR         SETC  'INPUT'     SET IN/OUTPUT
&XONECHAR          SETC  '&ONECHAR(1)'          SET XVARIABLE
                   AIF   (N'&ONECHAR GT 1).ZE20B
.*                 ANOP              MULTIPLE PARMS
&XONECHAR          SETC  '&ONECHAR'  SET XVARIABLE
.ZE20B             ANOP  ,
.*-------------------------------------------------------------------
.***AE.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE
                   AIF   (K'&ZXONECHAR LE 0).ZE20R  NOT I/O
                   AIF   ('&XONECHAR'(1,1) NE '(').ZE20R
&ZCGPR             SETC  '&XONECHAR'(2,K'&XONECHAR-2)
                   AIF   ('&ZCGPR'(1,1) NE '0').ZE20P
                   AIF   (K'&ZCGPR GT 2).ZE20Q
                   AIF   ('&ZCGPR' EQ '0').ZE20Q
&ZCGPR             SETC  '&ZCGPR'(2,1)
                   AIF   (T'&ZCGPR NE 'N').ZE20Q  INVALID REG NAME
.ZE20P             ANOP  ,
                   AIF   (T'&ZCGPR NE 'N').ZE20R  NON NUMERIC
                   AIF   ('&ZCGPR' LT '2').ZE20Q
                   AIF   ('&ZCGPR' LE '12').ZE20R
.ZE20Q             ANOP  ,
&ZMS               SETC  '"ONECHAR='            *KGPRA* MNOTE
&ZMS               SETC  '&ZMS.&ONECHAR"'
&ZMS               SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                   MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE
.ZE20R             ANOP  ,
.*----------------------------------------------------------------***
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY
                   AIF   (N'&DELIMITER LE 1).ZE23A  CK NUM
&ZMS               SETC  '"DELIMITER='          *KPOSA* MNOTE
&ZMS               SETC  '&ZMS.&DELIMITER"'
&ZMS               SETC  '&ZMS "DELIMITER"'
                   MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE
.ZE23A             ANOP  ,
.*-------------------------------------------------------------------
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT
                   AIF   (K'&DELIMITER(1) LE 0).ZE23B NO PRM
&ZXDELIMITER       SETC  'INPUT'     SET IN/OUTPUT
&XDELIMITER        SETC  '&DELIMITER(1)'        SET XVARIABLE
                   AIF   (N'&DELIMITER GT 1).ZE23B
.*                 ANOP              MULTIPLE PARMS
&XDELIMITER        SETC  '&DELIMITER'           SET XVARIABLE
.ZE23B             ANOP  ,
.*-------------------------------------------------------------------
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE
                   AIF   (K'&ZXDELIMITER LE 0).ZE23R  NOT I/O
                   AIF   ('&XDELIMITER'(1,1) NE '(').ZE23R
&ZCGPR             SETC  '&XDELIMITER'(2,K'&XDELIMITER-2)
                   AIF   ('&ZCGPR'(1,1) NE '0').ZE23P
                   AIF   (K'&ZCGPR GT 2).ZE23Q
                   AIF   ('&ZCGPR' EQ '0').ZE23Q
&ZCGPR             SETC  '&ZCGPR'(2,1)
                   AIF   (T'&ZCGPR NE 'N').ZE23Q  INVALID REG NAME
.ZE23P             ANOP  ,
                   AIF   (T'&ZCGPR NE 'N').ZE23R  NON NUMERIC
                   AIF   ('&ZCGPR' LT '2').ZE23Q
                   AIF   ('&ZCGPR' LE '12').ZE23R
.ZE23Q             ANOP  ,
&ZMS               SETC  '"DELIMITER='          *KGPRA* MNOTE
&ZMS               SETC  '&ZMS.&DELIMITER"'
&ZMS               SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                   MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE
.ZE23R             ANOP  ,
.*----------------------------------------------------------------***
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY
                   AIF   (N'&WORKAREA LE 1).ZE26A  CK NUM
&ZMS               SETC  '"WORKAREA='           *KPOSA* MNOTE
&ZMS               SETC  '&ZMS.&WORKAREA"'
&ZMS               SETC  '&ZMS "WORKAREA"'
                   MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE
.ZE26A             ANOP  ,
.*-------------------------------------------------------------------
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT
                   AIF   (K'&WORKAREA(1) LE 0).ZE26B NO PRM
&ZXWORKAREA        SETC  'INPUT'     SET IN/OUTPUT
&XWORKAREA         SETC  '&WORKAREA(1)'         SET XVARIABLE
                   AIF   (N'&WORKAREA GT 1).ZE26B
.*                 ANOP              MULTIPLE PARMS
&XWORKAREA         SETC  '&WORKAREA'            SET XVARIABLE
.ZE26B             ANOP  ,
.*-------------------------------------------------------------------
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE
                   AIF   (K'&ZXWORKAREA LE 0).ZE26R  NOT I/O
                   AIF   ('&XWORKAREA'(1,1) NE '(').ZE26R
&ZCGPR             SETC  '&XWORKAREA'(2,K'&XWORKAREA-2)
                   AIF   ('&ZCGPR'(1,1) NE '0').ZE26P
                   AIF   (K'&ZCGPR GT 2).ZE26Q
                   AIF   ('&ZCGPR' EQ '0').ZE26Q
&ZCGPR             SETC  '&ZCGPR'(2,1)
                   AIF   (T'&ZCGPR NE 'N').ZE26Q  INVALID REG NAME
.ZE26P             ANOP  ,
                   AIF   (T'&ZCGPR NE 'N').ZE26R  NON NUMERIC
                   AIF   ('&ZCGPR' LT '2').ZE26Q
                   AIF   ('&ZCGPR' LE '12').ZE26R
.ZE26Q             ANOP  ,
&ZMS               SETC  '"WORKAREA='           *KGPRA* MNOTE
&ZMS               SETC  '&ZMS.&WORKAREA"'
&ZMS               SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                   MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE
.ZE26R             ANOP  ,
.*----------------------------------------------------------------***
.***AE.KXVAR03 NAME, OPT OUTPUT, KEYS -XVAR KEY
                   AIF   (N'&RETCODE LE 1).ZE29A  CK NUM
&ZMS               SETC  '"RETCODE='            *KPOSA* MNOTE
&ZMS               SETC  '&ZMS.&RETCODE"'
&ZMS               SETC  '&ZMS "RETCODE"'
                   MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE
.ZE29A             ANOP  ,
.*-------------------------------------------------------------------
.***AE.KXVAR04 NAME, OPT OUTPUT, KEYS -XVAR ARGUMENT
                   AIF   (K'&RETCODE(1) LE 0).ZE29B NO PRM
&ZXRETCODE         SETC  'OUTPUT'    SET IN/OUTPUT
&XRETCODE          SETC  '&RETCODE(1)'          SET XVARIABLE
                   AIF   (N'&RETCODE GT 1).ZE29B
.*                 ANOP              MULTIPLE PARMS
&XRETCODE          SETC  '&RETCODE'  SET XVARIABLE
.ZE29B             ANOP  ,
.*-------------------------------------------------------------------
.***AE.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE
                   AIF   (K'&ZXRETCODE LE 0).ZE29R  NOT I/O
                   AIF   ('&XRETCODE'(1,1) NE '(').ZE29R
&ZCGPR             SETC  '&XRETCODE'(2,K'&XRETCODE-2)
                   AIF   ('&ZCGPR'(1,1) NE '0').ZE29P
                   AIF   (K'&ZCGPR GT 2).ZE29Q
                   AIF   ('&ZCGPR' EQ '0').ZE29Q
&ZCGPR             SETC  '&ZCGPR'(2,1)
                   AIF   (T'&ZCGPR NE 'N').ZE29Q  INVALID REG NAME
.ZE29P             ANOP  ,
                   AIF   (T'&ZCGPR NE 'N').ZE29R  NON NUMERIC
                   AIF   ('&ZCGPR' LT '2').ZE29Q
                   AIF   ('&ZCGPR' LE '12').ZE29R
.ZE29Q             ANOP  ,
&ZMS               SETC  '"RETCODE='            *KGPRA* MNOTE
&ZMS               SETC  '&ZMS.&RETCODE"'
&ZMS               SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'
                   MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE
.ZE29R             ANOP  ,
.******************************************************************
.***AF.P00 CHECK STANDALONE POSITIONAL VARIABLES
.******************************************************************
                   ACTR  10000
.*----------------------------------------------------------------***
.***AF.P02 EXTRA POSITIONALS
                   AIF   (N'&SYSLIST LE 0).ZELISTX  NO EXTRAS
&ZCVAL             SETC  ''          ERROR FIELD
&ZAWRK             SETA  0           POSITIONAL NUMBER
.ZELIST2           ANOP  ,
&ZAWRK             SETA  &ZAWRK+1    NEXT POSITIONAL
                   AIF   (&ZAWRK GT N'&SYSLIST).ZELIST3  DONE
&ZCVAL             SETC '&ZCVAL,&SYSLIST(&ZAWRK)'  EXTRA
                   AGO   .ZELIST2
.*
.ZELIST3           ANOP  ,
&ZCVAL             SETC '&ZCVAL'(2,K'&ZCVAL-1)  STRIP COMMA
&ZMS               SETC  'POSITIONAL ARGUMENT(S),'  *PPOSA* MNOTE
&ZMS               SETC  '&ZMS "&ZCVAL"'
&ZMS               SETC  '&ZMS CANNOT BE USED.'
&ZMS               SETC  '&ZMS NO POSITIONAL ARGUMENTS'
                   MNOTE 8,' &ZMS ARE ALLOWED.'
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE
.ZELISTX           ANOP  ,
&ZASYSLNDX         SETA  0
.*-------------------------------------------------------------------
.***AE.MF02 MF=(SLME)
.ZEMFX             ANOP  ,           END OF PARTIAL SYNTAX CHECK
.*******************************************************************
.***AE.ZMR01 NO CODE GENERATED IF ERRORS DETECTED
.*******************************************************************
                   AIF   (&ZMACRET NE 0).ZLX2   ERROR DETECTED
.*******************************************************************
.***AE.01  START OF ASAXWC MACRO CODE
.*******************************************************************
                   LCLC  &M0M0001                 NAME
&M0M0001           SETC  '&XLABEL'                SET NAME
                   AIF   (K'&XLABEL NE 0).XLAB2
&M0M0001           SETC  'M00M&SYSNDX'            DEFAULT NAME
.*
.XLAB2             ANOP  ,
&M0M0001 DS    0H                             ASAXWC-0
.*******************************************************************
.***AE.PR01 PRINT CONTROLS, DEFAULT IS YES
.*******************************************************************
              PUSH  PRINT
                   AIF   ('&ZPRINT' NE 'NO').ZPRINTX  TURN PRINT ON
                   PRINT OFF         ++ PR01
                   AGO   .ZPRNTXX
.ZPRINTX           PRINT ON
.ZPRNTXX           ANOP  ,
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
         AIF   ('&XMF' NE 'M' OR '&WORKAREA' EQ '').WORKOK       @L1A
         MNOTE 8,' WORKAREA IS NOT ALLOWED WITH MF=M'
&ZMACRET SETA  8      SET MACRO ERROR RETURN CODE
.WORKOK  ANOP                                                    @L1A
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
.********************************************************************
.***AL.L01 INTERNAL ARRAY TO PRODUCE FORMATTED CODE
.********************************************************************
                      LCLA  &ZOPN          LIST INSTRUCTION INDEX
                      LCLA  &ZOPN1         INVOCATION INDEX
                      LCLC  &ZOPL(4095)    LABEL
                      LCLC  &ZOPO(4095)    OPERATION
                      LCLC  &ZOPV(4095)    VALUE
                      LCLC  &ZOPD(4095)    DESCRIPTION
.*
&ZOPN                 SETA  0              INITIAL INST INDEX VALUE
.******************************************************************
.***AL.L10 ASAXWC FMT=LIST MF=S|L PARAMETERS
.******************************************************************
                      AIF   ('&XMF' EQ 'L').ZLMFSL2
                      AIF   ('&XMF' NE 'S').ZLMFSLX
&XMFCTRL              SETC  '#Z'.'&SYSNDX'(1,4).'A'
&XMFATTR              SETC  '0D'
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'B'
&ZOPV(&ZOPN)          SETC  '&XMFCTRL.S'
&ZOPD(&ZOPN)          SETC  '++ ASAXWC ARG PARMS'
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'SPACE'
&ZOPV(&ZOPN)          SETC  '1'
&ZOPD(&ZOPN)          SETC  ' '
.*
.ZLMFSL2              ANOP  ,
.*-------------------------------------------------------------------
.***AM.L01  ASAXWC FMT=LIST PARAMETERS
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL'
&ZOPO(&ZOPN)          SETC 'DS'
&ZOPV(&ZOPN)          SETC '&XMFATTR'
&ZOPD(&ZOPN)          SETC '++ ASAXWC PARM LIST'
.*-------------------------------------------------------------------
.***AM.L09 ADDR XPATTERNSTR A
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XPATTERNSTR_ADDR'
&ZOPO(&ZOPN)          SETC 'DS'
&ZOPV(&ZOPN)          SETC 'A'
&ZOPD(&ZOPN)          SETC '++ &ZXPATTERNSTR ADDR XPATTERNSTR'
.*-------------------------------------------------------------------
.***AM.L09  XPATTERNSTRLEN F
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XPATTERNSTRLEN'
&ZOPO(&ZOPN)          SETC 'DS'
&ZOPV(&ZOPN)          SETC 'F'
&ZOPD(&ZOPN)          SETC '++ &ZXPATTERNSTRLEN  XPATTERNSTRLEN'
.*-------------------------------------------------------------------
.***AM.L09 ADDR XSTRING A
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XSTRING_ADDR'
&ZOPO(&ZOPN)          SETC 'DS'
&ZOPV(&ZOPN)          SETC 'A'
&ZOPD(&ZOPN)          SETC '++ &ZXSTRING ADDR XSTRING'
.*-------------------------------------------------------------------
.***AM.L09  XSTRINGLEN F
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XSTRINGLEN'
&ZOPO(&ZOPN)          SETC 'DS'
&ZOPV(&ZOPN)          SETC 'F'
&ZOPD(&ZOPN)          SETC '++ &ZXSTRINGLEN  XSTRINGLEN'
.*-------------------------------------------------------------------
.***AM.L09 ADDR XZEROORMORE A
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XZEROORMORE_ADDR'
&ZOPO(&ZOPN)          SETC 'DS'
&ZOPV(&ZOPN)          SETC 'A'
&ZOPD(&ZOPN)          SETC '++ &ZXZEROORMORE ADDR XZEROORMORE'
.*-------------------------------------------------------------------
.***AM.L09 ADDR XONECHAR A
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XONECHAR_ADDR'
&ZOPO(&ZOPN)          SETC 'DS'
&ZOPV(&ZOPN)          SETC 'A'
&ZOPD(&ZOPN)          SETC '++ &ZXONECHAR ADDR XONECHAR'
.*-------------------------------------------------------------------
.***AM.L09 ADDR XDELIMITER A
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XDELIMITER_ADDR'
&ZOPO(&ZOPN)          SETC 'DS'
&ZOPV(&ZOPN)          SETC 'A'
&ZOPD(&ZOPN)          SETC '++ &ZXDELIMITER ADDR XDELIMITER'
.*-------------------------------------------------------------------
.***AM.L10 END OF ASAXWC LIST PARAMETERS
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC '&XMFCTRL.L'
&ZOPO(&ZOPN)          SETC 'EQU'
&ZOPV(&ZOPN)          SETC '*-&XMFCTRL'
&ZOPD(&ZOPN)          SETC '++ LENGTH OF PLIST'
.*
&ZOPN                 SETA &ZOPN+1
&ZOPL(&ZOPN)          SETC ' '
&ZOPO(&ZOPN)          SETC 'SPACE'
&ZOPV(&ZOPN)          SETC '1'
&ZOPD(&ZOPN)          SETC ' '
.*-------------------------------------------------------------------
.***AL.L12 ASAXWC FMT=LIST MF=S|L PARAMETERS
                      AIF   ('&XMF' EQ 'L').ZMFLX  DONE IF MF=L
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  '&XMFCTRL.S'
&ZOPO(&ZOPN)          SETC  'DC'
&ZOPV(&ZOPN)          SETC  '0H''0'''
&ZOPD(&ZOPN)          SETC  '++ ASAXWC ARG PARMS'
.*
.ZLMFSLX              ANOP  ,
.*-------------------------------------------------------------------
.***AL.L13 SET ZPLLEN TO ITS APPROPRIATE VALUE
&ZPLLEN               SETA 28
.*
.******************************************************************
.***AI.L01 ASAXWC FMT=LIST FILL IN PARAMETER AREA
.******************************************************************
                      ACTR  10000
&ZCVAL                SETC  'LA'           ASSUME XA MODE
                      AIF   ('&SYSASCE' EQ 'P').ZIMFXA  SYSSTATE PRI
&ZCVAL                SETC  'LAE'          XAX MODE
.ZIMFXA               ANOP ,
.*
                      AIF   ('&XMFCTRL'(1,1) NE '(').ZIMFN2  NOT GPR
&ZCGPR                SETC  '&XMFCTRL'(2,K'&XMFCTRL-2)  GET GPR
                      AIF   ('&ZCGPR' EQ 'GPR1').ZIMFNX
                      AIF   ('&ZCGPR' EQ 'GPR01').ZIMFNX
                      AIF   ('&ZCGPR' EQ 'REG1').ZIMFNX
                      AIF   ('&ZCGPR' EQ 'REG01').ZIMFNX
                      AIF   ('&ZCGPR' EQ 'R1').ZIMFNX
                      AIF   ('&ZCGPR' EQ '1').ZIMFNX
                      AIF   ('&ZCGPR' EQ '01').ZIMFNX
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  '&ZCVAL'
&ZOPV(&ZOPN)          SETC  '1,0(,&ZCGPR)'
&ZOPD(&ZOPN)          SETC  '++ LOCATE ARG PARMS'
                      AGO   .ZIMFNX
.*
.ZIMFN2               ANOP ,
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  '&ZCVAL'
&ZOPV(&ZOPN)          SETC  '1,&XMFCTRL'
&ZOPD(&ZOPN)          SETC  '++ LOCATE ARG PARMS'
.ZIMFNX               ANOP ,
.********************************************************************
.***AI.L02 ASAXWC FMT=LIST INITIALIZE PARAMETER AREA
.********************************************************************
.***AI.L03 MF=(SLME)
                      AIF   ('&XMF' EQ 'L').ZIMFLX
                      AIF   ('&XMFSCK' NE 'COMPLETE').ZIMFLX
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'XC'
&ZOPV(&ZOPN)          SETC  '0(&ZPLLEN,1),0(1)'
&ZOPD(&ZOPN)          SETC  '++ INITIALIZE'
.ZIMFLX               ANOP  ,
.*-------------------------------------------------------------------
.***AI.L19 ADDR XPATTERNSTR A
                      AIF   ('&ZXPATTERNSTR' EQ '').ZI2H  NOT USED
&ZCLNG                SETC  '&XPATTERNSTR'
&ZCGPR                SETC  '14'
         AIF   ('&XPATTERNSTR'(1,1) EQ '(').ZI2F  IN GPR
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'LA'
&ZOPV(&ZOPN)          SETC  '&ZCGPR,&ZCLNG'
&ZOPD(&ZOPN)          SETC  '++ &ZXPATTERNSTR XPATTERNSTR A'
.*
                      AGO   .ZI2G
.*
.ZI2F                 ANOP  ,
&ZCGPR   SETC  '&XPATTERNSTR'(2,K'&XPATTERNSTR-2)
.*
.ZI2G                 ANOP  ,
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'ST'
&ZOPV(&ZOPN)          SETC  '&ZCGPR,0(,1)'
&ZOPD(&ZOPN)          SETC  '++ &ZXPATTERNSTR XPATTERNSTR A'
.*
.ZI2H                 ANOP  ,
.*-------------------------------------------------------------------
.***AI.L25  XPATTERNSTRLEN F
                      AIF   ('&ZXPATTERNSTRLEN' EQ '').ZI3E  NOT USED
                      AIF   ('&ZXPATTERNSTRLEN' EQ 'OUTPUT').ZI3E
&ZCGPR                SETC  '&XPATTERNSTRLEN'
.*
                      AIF   ('&XPATTERNSTRLEN'(1,1) NE '(').ZI3B
&ZCGPR   SETC  '0('.'&XPATTERNSTRLEN'(2,K'&XPATTERNSTRLEN-2).')'
                      AGO   .ZI3D
.ZI3B                 ANOP  ,
.*
&ZC                   SETC  '&XPATTERNSTRLEN'(1,1)
                      AIF   (T'&ZC NE 'N').ZI3D
&ZC                   SETC  '&XPATTERNSTRLEN'
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI3D
&ZCGPR                SETC  '=FL4''&XPATTERNSTRLEN'''
.*
.ZI3D                 ANOP  ,
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'MVC'
&ZOPV(&ZOPN)          SETC  '4(4,1),&ZCGPR'
&ZOPD(&ZOPN)          SETC  '++ &ZXPATTERNSTRLEN XPATTERNSTRLEN F'
.*
.ZI3E                 ANOP  ,
.*-------------------------------------------------------------------
.***AI.L19 ADDR XSTRING A
                      AIF   ('&ZXSTRING' EQ '').ZI4H  NOT USED
&ZCLNG                SETC  '&XSTRING'
&ZCGPR                SETC  '14'
         AIF   ('&XSTRING'(1,1) EQ '(').ZI4F  IN GPR
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'LA'
&ZOPV(&ZOPN)          SETC  '&ZCGPR,&ZCLNG'
&ZOPD(&ZOPN)          SETC  '++ &ZXSTRING XSTRING A'
.*
                      AGO   .ZI4G
.*
.ZI4F                 ANOP  ,
&ZCGPR   SETC  '&XSTRING'(2,K'&XSTRING-2)
.*
.ZI4G                 ANOP  ,
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'ST'
&ZOPV(&ZOPN)          SETC  '&ZCGPR,8(,1)'
&ZOPD(&ZOPN)          SETC  '++ &ZXSTRING XSTRING A'
.*
.ZI4H                 ANOP  ,
.*-------------------------------------------------------------------
.***AI.L25  XSTRINGLEN F
                      AIF   ('&ZXSTRINGLEN' EQ '').ZI5E  NOT USED
                      AIF   ('&ZXSTRINGLEN' EQ 'OUTPUT').ZI5E
&ZCGPR                SETC  '&XSTRINGLEN'
.*
                      AIF   ('&XSTRINGLEN'(1,1) NE '(').ZI5B
&ZCGPR   SETC  '0('.'&XSTRINGLEN'(2,K'&XSTRINGLEN-2).')'
                      AGO   .ZI5D
.ZI5B                 ANOP  ,
.*
&ZC                   SETC  '&XSTRINGLEN'(1,1)
                      AIF   (T'&ZC NE 'N').ZI5D
&ZC                   SETC  '&XSTRINGLEN'
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI5D
&ZCGPR                SETC  '=FL4''&XSTRINGLEN'''
.*
.ZI5D                 ANOP  ,
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'MVC'
&ZOPV(&ZOPN)          SETC  '12(4,1),&ZCGPR'
&ZOPD(&ZOPN)          SETC  '++ &ZXSTRINGLEN XSTRINGLEN F'
.*
.ZI5E                 ANOP  ,
.*-------------------------------------------------------------------
.***AI.L19 ADDR XZEROORMORE A
                      AIF   ('&ZXZEROORMORE' EQ '').ZI6H  NOT USED
&ZCLNG                SETC  '&XZEROORMORE'
&ZCGPR                SETC  '14'
         AIF   ('&XZEROORMORE'(1,1) EQ '(').ZI6F  IN GPR
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'LA'
&ZOPV(&ZOPN)          SETC  '&ZCGPR,&ZCLNG'
&ZOPD(&ZOPN)          SETC  '++ &ZXZEROORMORE XZEROORMORE A'
.*
                      AGO   .ZI6G
.*
.ZI6F                 ANOP  ,
&ZCGPR   SETC  '&XZEROORMORE'(2,K'&XZEROORMORE-2)
.*
.ZI6G                 ANOP  ,
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'ST'
&ZOPV(&ZOPN)          SETC  '&ZCGPR,16(,1)'
&ZOPD(&ZOPN)          SETC  '++ &ZXZEROORMORE XZEROORMORE A'
.*
.ZI6H                 ANOP  ,
.*-------------------------------------------------------------------
.***AI.L19 ADDR XONECHAR A
                      AIF   ('&ZXONECHAR' EQ '').ZI7H  NOT USED
&ZCLNG                SETC  '&XONECHAR'
&ZCGPR                SETC  '14'
         AIF   ('&XONECHAR'(1,1) EQ '(').ZI7F  IN GPR
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'LA'
&ZOPV(&ZOPN)          SETC  '&ZCGPR,&ZCLNG'
&ZOPD(&ZOPN)          SETC  '++ &ZXONECHAR XONECHAR A'
.*
                      AGO   .ZI7G
.*
.ZI7F                 ANOP  ,
&ZCGPR   SETC  '&XONECHAR'(2,K'&XONECHAR-2)
.*
.ZI7G                 ANOP  ,
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'ST'
&ZOPV(&ZOPN)          SETC  '&ZCGPR,20(,1)'
&ZOPD(&ZOPN)          SETC  '++ &ZXONECHAR XONECHAR A'
.*
.ZI7H                 ANOP  ,
.*-------------------------------------------------------------------
.***AI.L18 ADDR XDELIMITER A
                      AIF   ('&XDELIMITER' NE 'LENGTHS_WERE_SET').ZI8
                      AIF   ('&XMFSCK' NE 'COMPLETE').ZI8  CK *
&ZXDELIMITER          SETC  ''             RESET INPUT/OUTPUT
.ZI8                  ANOP  ,
.*-------------------------------------------------------------------
.***AI.L19 ADDR XDELIMITER A
                      AIF   ('&ZXDELIMITER' EQ '').ZI8H  NOT USED
&ZCLNG                SETC  '&XDELIMITER'
&ZCGPR                SETC  '14'
         AIF   ('&XDELIMITER'(1,1) EQ '(').ZI8F  IN GPR
                      AIF   ('&XDELIMITER' NE 'LENGTHS_WERE_SET').ZI8A
                      AIF   ('&XMFSCK' EQ 'COMPLETE').ZI8H
.*
&ZCLNG                SETC  '=XL4''00'''
.ZI8A                 ANOP  ,
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  '&ZCVAL'
&ZOPV(&ZOPN)          SETC  '&ZCGPR,&ZCLNG'
&ZOPD(&ZOPN)          SETC  '++ &ZXDELIMITER XDELIMITER A'
.*
                      AGO   .ZI8G
.*
.ZI8F                 ANOP  ,
&ZCGPR   SETC  '&XDELIMITER'(2,K'&XDELIMITER-2)
.*
.ZI8G                 ANOP  ,
.*
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'ST'
&ZOPV(&ZOPN)          SETC  '&ZCGPR,24(,1)'
&ZOPD(&ZOPN)          SETC  '++ &ZXDELIMITER XDELIMITER A'
.*
.ZI8H                 ANOP  ,
.*-------------------------------------------------------------------
&ZOPN1                SETA &ZOPN
.*-------------------------------------------------------------------
.***AI.C00 MF=M CHECK TO BYPASS INVOCATION
                      AIF   ('&XMF' EQ 'M').ZMFLX  DONE IF MF=M
.*******************************************************************
.***  PROCESS ASAXWC OUTPUT PARAMETERS
.*******************************************************************
                      ACTR  10000
.*******************************************************************
.***AO.X02  RETURN CODE PROCESSING
.*******************************************************************
                      AIF   (N'&RETCODE LE 0).ZMRETX
                      AIF   ('&XRETCODE'(1,1) EQ '(').ZMRET2
                      AIF   ('&XRETCODE' EQ 'GPR15').ZMRETX
                      AIF   ('&XRETCODE' EQ 'REG15').ZMRETX
                      AIF   ('&XRETCODE' EQ 'R15').ZMRETX
                      AIF   ('&XRETCODE' EQ '15').ZMRETX
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'ST'
&ZOPV(&ZOPN)          SETC  '15,&XRETCODE'
&ZOPD(&ZOPN)          SETC  '++ SET RETURN CODE'
                      AGO   .ZMRETX
.*
.ZMRET2               ANOP  ,
&ZCGPR                SETC  '&XRETCODE'(2,K'&XRETCODE-2)
                      AIF   ('&ZCGPR' EQ 'GPR15').ZMRETX
                      AIF   ('&ZCGPR' EQ 'REG15').ZMRETX
                      AIF   ('&ZCGPR' EQ 'R15').ZMRETX
                      AIF   ('&ZCGPR' EQ '15').ZMRETX
&ZOPN                 SETA  &ZOPN+1
&ZOPL(&ZOPN)          SETC  ' '
&ZOPO(&ZOPN)          SETC  'LR'
&ZOPV(&ZOPN)          SETC  '&ZCGPR,15'
&ZOPD(&ZOPN)          SETC  '++ SET RETURN CODE'
.ZMRETX               ANOP  ,
.*******************************************************************
.***AO.X04  LABEL FOR MF=L PROCESSING
.*******************************************************************
.ZMFLX                ANOP  ,              MF=L PROCESSING
.*******************************************************************
.***AO.X05  FORMAT GENERATED INSTRUCTIONS
.*******************************************************************
                      ACTR  10000
.*
                      LCLA  &ZLC           COLUMN POSITION
                      LCLA  &ZOPX          LIST TABLE INDEX
                      LCLC  &ZLL           LABEL
                      LCLC  &ZLOP          OPERATION
                      LCLC  &ZLV           VALUE
                      LCLC  &ZLD           DESCRIPTION
.*
&ZOPX                 SETA  1
.ZL2                  AIF   (&ZOPX GT &ZOPN1).ZLX  B IF DONE
&ZLL                  SETC  '&ZOPL(&ZOPX)'
&ZLOP                 SETC  '&ZOPO(&ZOPX)'
&ZLV                  SETC  '&ZOPV(&ZOPX)'
&ZLD                  SETC  '&ZOPD(&ZOPX)'
                      AIF   (K'&ZLD LE 0).ZL5
&ZLC                  SETA  35             COMMENT COLUMN
                      AIF   ('&ZLD'(1,1) NE '*').ZL3
&ZLC                  SETA  33             COMMMENT COLUMN
.ZL3                  AIF   (K'&ZLV GE &ZLC-16-1).ZL4
&ZLV                  SETC  '&ZLV'.' '
                      AGO   .ZL3
.*
.ZL4                  ANOP  ,
&ZLV                  SETC  '&ZLV'.' '
.ZL5                  ANOP  ,
&ZLV                  SETC  '&ZLV'.'&ZLD'
.*
&ZLL     &ZLOP &ZLV
.*
&ZOPX                 SETA  &ZOPX+1        NEXT STRUCTURE
                      AGO   .ZL2           CONTINUE LOOPING
.*
.ZLX                  ANOP  ,
                      AIF   ('&XMF' EQ 'L').ZLINKX  MF=L
                      AIF   ('&XMF' EQ 'M').ZLINKX  MF=M
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
         L     15,16              Get CVT address                @L1A
         L     15,140(15,0)       Get ECVT address               @L1A
         L     15,232(15,0)       Get REUCB address              @L1A
         AIF   ('&WORKAREA' EQ '').NOTWILDB                      @L1A
         AIF   ('&XWORKAREA' NE 'NO_WORKAREA').WILDB             @L1A
.NOTWILDB ANOP                                                   @L1A
         L     15,28(15,0)        Get ASAWILDC address           @L1A
         BASR  14,15              Call ASAWILDC                  @L1A
         AGO   .ENDMAC                                           @L1A
.WILDB   ANOP                                                    @L1A
         AIF   ('&WORKAREA'(1,1) EQ '(').INREG                   @L1A
         LA    0,&WORKAREA(1)     Get workarea address           @L1A
         AGO   .DOCALL                                           @L1A
.INREG   ANOP                                                    @L1A
         AIF   ('&WORKAREA(1)' EQ 'GPR0').DOCALL                 @L1A
         AIF   ('&WORKAREA(1)' EQ 'GPR00').DOCALL                @L1A
         AIF   ('&WORKAREA(1)' EQ 'REG0').DOCALL                 @L1A
         AIF   ('&WORKAREA(1)' EQ 'REG00').DOCALL                @L1A
         AIF   ('&WORKAREA(1)' EQ 'R0').DOCALL                   @L1A
         AIF   ('&WORKAREA(1)' EQ '0').DOCALL                    @L1A
         AIF   ('&WORKAREA(1)' EQ '00').DOCALL                   @L1A
         LR    0,&WORKAREA(1)     Get workarea address           @L1A
.DOCALL  ANOP                                                    @L1A
         L     15,32(15,0)        Get ASAWILDB address           @L1A
         BASR  14,15              Call ASAWILDB                  @L1A
.ENDMAC  ANOP                                                    @L1A
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
.ZLINKX               ANOP  ,
.*******************************************************************
.***AP.X01  FORMAT GENERATED CODE
.ZL21                 AIF   (&ZOPX GT &ZOPN).ZLX1  B IF DONE
&ZLL                  SETC  '&ZOPL(&ZOPX)'
&ZLOP                 SETC  '&ZOPO(&ZOPX)'
&ZLV                  SETC  '&ZOPV(&ZOPX)'
&ZLD                  SETC  '&ZOPD(&ZOPX)'
                      AIF   (K'&ZLD LE 0).ZL51
&ZLC                  SETA  35             COMMENT COLUMN
                      AIF   ('&ZLD'(1,1) NE '*').ZL31
&ZLC                  SETA  33             COMMENT COLUMN
.ZL31                 AIF   (K'&ZLV GE &ZLC-16-1).ZL41
&ZLV                  SETC  '&ZLV'.' '
                      AGO   .ZL31
.*
.ZL41                 ANOP  ,
&ZLV                  SETC  '&ZLV'.' '
.ZL51                 ANOP  ,
&ZLV                  SETC  '&ZLV'.'&ZLD'
.*
&ZLL     &ZLOP &ZLV
.*
&ZOPX                 SETA  &ZOPX+1        NEXT STRUCTURE
                      AGO   .ZL21          CONTINUE LOOPING
.*
.ZLX1                 ANOP  ,
.*******************************************************************
.***AP.X02  END OF ASAXWC MACRO
&ZASAXWC              SETC  'YES'          SET ASAXWC USED
         POP   PRINT
*                                            ASAXWC-0
         SPACE 1
.ZLX2                 ANOP  ,
         MEND
**********************************************************************/
*/**** START OF SPECIFICATIONS ****************************************
*                                                                     *
*                                                                     *
*01* MACRO NAME:  ASAXWC                                -07/19/94-<0> *
*                                                                     *
*                                                                     *
*01* DESCRIPTIVE NAME:  Wildcard service                              *
*                                                                     *
*01* PROPRIETARY STATEMENT:                                           *
*                                                                     *
*     LICENSED MATERIALS - PROPERTY OF IBM                            *
*     THIS MACRO IS "RESTRICTED MATERIALS OF IBM"                     *
*     5655-068 (C) COPYRIGHT IBM CORP. 1994                           *
*     SEE COPYRIGHT INSTRUCTIONS                                      *
*                                                                     *
* STATUS= HBB5520                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*01* FUNCTION:                                                        *
*       See the ASAXWC macro prologue for details.                    *
*                                                                     *
*01* INPUT:                                                           *
*                                                                     *
*            ?ASAXWC    ÝPLISTVER                                     *
*                                 (»xplistver|IMPLIED_VERSIONº)¨      *
*                        PATTERNSTR(xpatternstr)                      *
*                        PATTERNSTRLEN(xpatternstrlen)                *
*                        STRING(xstring)                              *
*                        STRINGLEN(xstringlen)                        *
*                        ZEROORMORE(xzeroormore)                      *
*                        ONECHAR(xonechar)                            *
*                       ÝDELIMITER(»xdelimiter|LENGTHS_WERE_SETº)¨    *
*                       ÝWORKAREA(»xworkarea|NO_WORKAREAº)¨           *
*                       ÝRETCODE(xretcode)¨                           *
*                      ÐÝMF(S)¨                                       *
*                      ÔÝMF(L,xmfctrl»,xmfattr|BDY(DWORD)º)¨          *
*                      ÔÝMF(M,xmfctrl»,COMPLETE|NOCHECKº)¨            *
*                      ¿ÝMF(E,xmfctrl»,COMPLETE|NOCHECKº)¨            *
*                                                                     *
****** END OF SPECIFICATIONS *****************************************/
*/*PB.ECHO01 MACRO INVOCATION ECHO-----------------------------------*/
*  ANS('@SPACE;') NORESCAN COL(MACLMAR);
*  ANS('/* ? ASAXWC '||MACLIST||' ')
*      NORESCAN COL(MACLMAR+5);    /* START ECHO */
*
*  DCL ZELO  FIXED;
*  DCL ZECOL FIXED;
*
*  ZELO=1;     /* STARTING COLUMN */
*  DO WHILE ZELO<=LENGTH(MACKEYS);  /* PARENTHSIS SCAN */
*    ZECOL=INDEX(MACKEYS(ZELO:LENGTH(MACKEYS)),')');
*    IF ZECOL>0
*      THEN
*        DO;   /* PARENTHESIS FOUND */
*          ANS(MACKEYS(ZELO:ZELO+ZECOL-1)||' ')
*             NORESCAN COL(MACLMAR+5);
*          ZELO=ZELO+ZECOL;        /* NEXT PORTION */
*        END;
*      ELSE
*        DO;   /* REMAINING KEYS */
*          ANS(MACKEYS(ZELO:LENGTH(MACKEYS)))
*             NORESCAN COL(MACLMAR+5);
*          ZELO=LENGTH(MACKEYS)+1;
*        END;
*  END;
*  ANS(' -07/19/94-0- */')
*      NORESCAN COL(MACLMAR+5);    /* END ECHO */
*/********************************************************************/
*/*PV.DCL01 MACRO DECLARES AND CODE GENERATION CONTROLS              */
*/********************************************************************/
*  DCL ZPRINT  EXTERNAL; DEACT ZPRINT; /* YES=PRINT, NO=NO PRINT     */
*  DCL ZTEST   EXTERNAL; DEACT ZTEST;  /* YES=TEST, NO=NO TEST       */
*  DCL ZSYSTEM EXTERNAL; DEACT ZSYSTEM;/* PCCODE10, MVS, SAK, VM     */
*
*  DCL   ZASAXWC CHAR EXTERNAL; /* YES=USED AT LEAST ONCE          */
*  DEACT ZASAXWC;
*
*  DCL ZMACRET FIXED; DEACT ZMACRET;
*  ZMACRET=0;                   /* MACRO COMPILE RETURN CODE         */
*
*  DCL ZMS CHAR;   DEACT ZMS;   /* ERROR MESSAGE                     */
*  DCL ZCVAL CHAR; DEACT ZCVAL; /* ERROR MESSAGE WORK AREA           */
*
*  DCL ZI FIXED;  DEACT ZI;     /* INDEX FOR VARIABLE NUM OF PARMS   */
*  DCL ZJ FIXED;  DEACT ZJ;     /* INDEX FOR VARIABLE NUM OF PARMS   */
*  DCL ZK FIXED;  DEACT ZK;     /* INDEX FOR RANGE COLON (:)         */
*  DCL ZL FIXED;  DEACT ZL;     /* INDEX FOR RANGE VALUE CHECKING    */
*  DCL ZLO FIXED; DEACT ZLO;    /* LOW RANGE VALUE                   */
*  DCL ZHI FIXED; DEACT ZHI;    /* HIGH RANGE VALUE                  */
*  DCL ZW CHAR;   DEACT ZW;     /* WORK AREA FOR RANGE VALUE SUBLIST */
*  DCL ZN FIXED;  DEACT ZN;     /* NUMERIC WORK VARIABLE             */
*  DCL ZC CHAR;   DEACT ZC;     /* CHARACTER WORK VARIABLE           */
*  DCL ZMAXINVOCLEN FIXED; DEACT ZMAXINVOCLEN;  /* INVOCATION LENGTH */
*  DCL ZPLLEN FIXED; DEACT ZPLLEN;        /* PARAMETER LIST LENGTH   */
*
*  DCL ZPRMMAX FIXED;           /* MAXIMUM PARM LIST SIZE            */
*  DCL ZPRMNUM FIXED;           /* PARAMETER ARRAY INDEX             */
*  DCL ZPRM(100);               /* PARAMETER ENTRY                   */
*  DCL EHAMAXLEN FIXED EXTERNAL;   /* MAX ILIST SIZE FOR PARM LISTS  */
*  DCL EHAREGS CHARACTER EXTERNAL; /* REG DCLS                       */
*  DCL EHALIST CHARACTER EXTERNAL; /* STANDARD PARM LIST GENERATION  */
*/*******************************************************************/
*/*PV.XVAR01 DECLARE ALL MACRO PARAMETER VARIABLES                  */
*/*******************************************************************/
*  DCL XPLISTVER FIXED;  DEACT XPLISTVER;  /***PV.XVAR02 INPUT VALUE */
*  DCL ZXPLISTVER; DEACT ZXPLISTVER;  /***INPUT/OUTPUT CONTROL */
*  DCL   XPATTERNSTR;              /***PV.XVAR03 INPUT NAME */
*  DEACT XPATTERNSTR;              /***PV.XVAR03 INPUT NAME */
*  DCL   ZXPATTERNSTR;             /***INPUT/OUTPUT CONTROL */
*  DEACT ZXPATTERNSTR;             /***INPUT/OUTPUT CONTROL */
*  DCL   XPATTERNSTRLEN;           /***PV.XVAR03 INPUT NAME */
*  DEACT XPATTERNSTRLEN;           /***PV.XVAR03 INPUT NAME */
*  DCL   ZXPATTERNSTRLEN;          /***INPUT/OUTPUT CONTROL */
*  DEACT ZXPATTERNSTRLEN;          /***INPUT/OUTPUT CONTROL */
*  DCL XSTRING;  DEACT XSTRING;    /***PV.XVAR02 INPUT NAME */
*  DCL ZXSTRING; DEACT ZXSTRING;   /***INPUT/OUTPUT CONTROL */
*  DCL   XSTRINGLEN;               /***PV.XVAR03 INPUT NAME */
*  DEACT XSTRINGLEN;               /***PV.XVAR03 INPUT NAME */
*  DCL   ZXSTRINGLEN;              /***INPUT/OUTPUT CONTROL */
*  DEACT ZXSTRINGLEN;              /***INPUT/OUTPUT CONTROL */
*  DCL   XZEROORMORE;              /***PV.XVAR03 INPUT NAME */
*  DEACT XZEROORMORE;              /***PV.XVAR03 INPUT NAME */
*  DCL   ZXZEROORMORE;             /***INPUT/OUTPUT CONTROL */
*  DEACT ZXZEROORMORE;             /***INPUT/OUTPUT CONTROL */
*  DCL XONECHAR;  DEACT XONECHAR;  /***PV.XVAR02 INPUT NAME */
*  DCL ZXONECHAR; DEACT ZXONECHAR;  /***INPUT/OUTPUT CONTROL */
*  DCL   XDELIMITER;               /***PV.XVAR03 INPUT NAME */
*  DEACT XDELIMITER;               /***PV.XVAR03 INPUT NAME */
*  DCL   ZXDELIMITER;              /***INPUT/OUTPUT CONTROL */
*  DEACT ZXDELIMITER;              /***INPUT/OUTPUT CONTROL */
*  DCL XWORKAREA;  DEACT XWORKAREA;  /***PV.XVAR02 INPUT NAME */
*  DCL ZXWORKAREA; DEACT ZXWORKAREA;  /***INPUT/OUTPUT CONTROL */
*  DCL XRETCODE;  DEACT XRETCODE;  /***PV.XVAR02 OUTPUT NAME */
*  DCL ZXRETCODE; DEACT ZXRETCODE;  /***INPUT/OUTPUT CONTROL */
*  DCL XMF;  DEACT XMF;            /***PV.XVAR02 INPUT VALUE */
*  DCL ZXMF; DEACT ZXMF;           /***INPUT/OUTPUT CONTROL */
*  DCL XMFCTRL;  DEACT XMFCTRL;    /***PV.XVAR02 INPUT NAME */
*  DCL ZXMFCTRL; DEACT ZXMFCTRL;   /***INPUT/OUTPUT CONTROL */
*  DCL XMFATTR;  DEACT XMFATTR;    /***PV.XVAR02 INPUT VALUE */
*  DCL ZXMFATTR; DEACT ZXMFATTR;   /***INPUT/OUTPUT CONTROL */
*  DCL XMFSCK;  DEACT XMFSCK;      /***PV.XVAR02 INPUT VALUE */
*  DCL ZXMFSCK; DEACT ZXMFSCK;     /***INPUT/OUTPUT CONTROL */
*/********************************************************************/
*/***PC.PLV01  PROCESS PLISTVER                                      */
*/********************************************************************/
*  IF TRANSLATE(PLISTVER(1)) = 'MAX' THEN
*    XPLISTVER=0;
*  ELSE
*    XPLISTVER=0;
*  IF PLISTVER¬=''
*     & TRANSLATE(PLISTVER(1))¬='IMPLIED_VERSION'
*     & TRANSLATE(PLISTVER(1))¬='MAX'
*    THEN
*      DO;
*        IF FIXED(PLISTVER(1))>=XPLISTVER
*          THEN
*              XPLISTVER=FIXED(PLISTVER(1));
*          ELSE
*            DO;
*              ZMS=' 8, PLISTVER='||         /**KVALP* MSG*/
*                    PLISTVER(1)||
*                  ', BUT PLISTVER OF '||
*                    CHAR(XPLISTVER)||
*                  ' IS REQUIRED.';
*              ANS MSG('?ASAXWC ---> '||ZMS);
*              ANS(COMMENT(ZMS)) COL(MACLMAR);
*              ZMACRET=8;                    /* MACRO ERROR */
*            END;
*
*        IF PLISTVER='PLISTVER' | PLISTVER='()'  /*CHCK ENTRY*/
*          THEN
*            DO;
*              ZMS=' 8, THE "PLISTVER" KEY'|| /**KOPTP* MSG*/
*                  ' MUST CONTAIN ONE'||
*                  ' (OR MORE) ARGUMENT(S).';
*              ANS MSG('?ASAXWC ---> '||ZMS);
*              ANS(COMMENT(ZMS)) COL(MACLMAR);
*              ZMACRET=8;                    /* MACRO ERROR */
*            END;
*        IF NUMBER(PLISTVER)>1               /* CHECK POSITIONALS */
*          THEN
*            DO;
*              ZMS=' 8, "PLISTVER'||         /**KPOSP* MSG*/
*                  PLISTVER||
*                  '" "PLISTVER"'||
*                  ' CAN HAVE ONLY 1 ARGUMENT.';
*              ANS MSG('?ASAXWC ---> '||ZMS);
*              ANS(COMMENT(ZMS)) COL(MACLMAR);
*              ZMACRET=8;                    /* MACRO ERROR */
*            END;
*
*        ZCVAL='';                           /* ERROR FLAG */
*        ZC=PLISTVER(1);
*        DO ZL=1 TO LENGTH(ZC);              /* MUST BE NUMBER */
*          IF ZC(ZL:ZL)<'0' |                /* MUST BE NUMERIC */
*             ZC(ZL:ZL)>'9'                  /* MUST BE NUMERIC */
*            THEN
*              ZCVAL='NUMERIC';              /* NUMERIC ERROR */
*        END;
*        IF ZCVAL=''
*          THEN
*            DO;                             /* CHECK RANGE LIMITS */
*              IF XPLISTVER<0 |              /* LOW LIMIT */
*                 XPLISTVER>0                /* HIGH LIMIT */
*                THEN
*                  ZCVAL='RANGE';            /* RANGE ERROR */
*            END;
*        IF ZCVAL¬=''
*          THEN
*            DO;                             /* RANGE ERROR */
*              ZXPLISTVER='';                /* RESET IN/OUTPUT */
*              ZMS=' 8, "PLISTVER '||        /**KRNGP* MSG*/
*                  PLISTVER||
*                  '" THE RANGE IS "0-0"'||
*                  ' FOR ARGUMENT 1.';
*              ANS MSG('?ASAXWC ---> '||ZMS);
*              ANS(COMMENT(ZMS)) COL(MACLMAR);
*              ZMACRET=8;                    /* MACRO ERROR */
*            END;
*      END;
*
*/********************************************************************/
*/***PG.MF01  PROCESS MF MACRO FORMS                                 */
*/********************************************************************/
*/*PG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/
*  XMF='';
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/
*  IF TRANSLATE(MF(1))
*              = 'S'                         /* CHECK FOR KEYWORD */
*    THEN
*      DO;
*        XMFSCK='COMPLETE';
*        XMF='S';                            /* SET XVARIABLE */
*        IF NUMBER(MF)>1                     /* CHECK POSITIONALS */
*          THEN
*            DO;
*              ZMS=' 8, "MF'||               /**KPOSP* MSG*/
*                  MF||
*                  '" "MF"'||
*                  ' CAN HAVE ONLY 1 ARGUMENT.';
*              ANS MSG('?ASAXWC ---> '||ZMS);
*              ANS(COMMENT(ZMS)) COL(MACLMAR);
*              ZMACRET=8;                    /* MACRO ERROR */
*            END;
*/*PG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/
*  IF TRANSLATE(MF(1))
*              = 'L'                         /* CHECK FOR KEYWORD */
*    THEN
*      DO;
*        XMF='L';                            /* SET XVARIABLE */
*        IF NUMBER(MF)>3                     /* CHECK POSITIONALS */
*          THEN
*            DO;
*              ZMS=' 8, "MF'||               /**KPOSP* MSG*/
*                  MF||
*                  '" "MF"'||
*                  ' CAN HAVE ONLY 3 ARGUMENTS.';
*              ANS MSG('?ASAXWC ---> '||ZMS);
*              ANS(COMMENT(ZMS)) COL(MACLMAR);
*              ZMACRET=8;                    /* MACRO ERROR */
*            END;
*/*PG.KKCTL10 -MF(L) SPECIAL CHECK-----------------------------------*/
*        ZMAXINVOCLEN = LENGTH(MF) + 2;
*        IF PLISTVER ¬= ''
*          THEN
*            ZMAXINVOCLEN=ZMAXINVOCLEN + LENGTH(PLISTVER) + 8;
*        IF LENGTH(MACKEYS) > ZMAXINVOCLEN |
*           MACLIST ¬= ''                    /* CHECK FOR OTHER PARMS*/
*          THEN
*            DO;
*              ZMS=' 8, THE "L" FORM OF "MF"'|| /**MFLP* MSG*/
*                  ' CAN ONLY HAVE'||
*                  ' THE "PLISTVER" KEY'||
*                  ' SPECIFIED ON THE INVOCATION.';
*              ANS MSG('?ASAXWC ---> '||ZMS);
*              ANS(COMMENT(ZMS)) COL(MACLMAR);
*              ZMACRET=8;                    /* MACRO ERROR */
*            END;
*/*PG.KXVAR03 NAME, OPT RQD INPUT, POS(2) -XVARIABLE-----------------*/
*  XMFCTRL=MF(2);                            /* SET XVARIABLE */
*  IF MF(2)=''                               /* CHECK FOR NULL */
*   THEN
*    DO;                                     /* KEY IS REQUIRED */
*        ZXMFCTRL='';                        /* RESET IN/OUTPUT */
*        ZMS=' 8, WHEN "L" IS SPECIFIED'||
*            ' FOR THE "MF" KEY, POSITIONAL'||
*            ' ARG 2 IS REQUIRED.';          /**KRQDP* MSG*/
*        ANS MSG('?ASAXWC ---> '||ZMS);
*        ANS(COMMENT(ZMS)) COL(MACLMAR);
*        ZMACRET=8;                          /* MACRO ERROR */
*    END;
*  ELSE
*    ZXMFCTRL='INPUT';                       /* SET IN/OUTPUT */
*/*PG.KXVAR13 VALUE, OPT INPUT, POS(3) -XVARIABLE--------------------*/
*  ZXMFATTR='INPUT';                         /* SET IN/OUTPUT */
*  XMFATTR='BDY(DWORD)';                     /* SET DEFAULT */
*  IF MF(3)¬=''                              /* CHECK FOR NULL */
*    THEN
*      XMFATTR=MF(3);                        /* SET XVARIABLE */
*/*PG.KCK01 VALUE, OPT INPUT, POS(3) -CHARACTER LENGTH---------------*/
*  IF ZXMFATTR¬='' &                         /* NOT IN/OUTPUT */
*     LENGTH(XMFATTR)>60
*    THEN
*      DO;
*        ZXMFATTR='';                        /* RESET IN/OUTPUT */
*        ZMS=' 8, "MF'||                     /**KLNGP* MSG*/
*            MF||
*            '" ARGUMENT 3 EXCEEDS THE MAXIMUM'||
*            ' LENGTH OF 60 CHARACTERS. ';
*        ANS MSG('?ASAXWC ---> '||ZMS);
*        ANS(COMMENT(ZMS)) COL(MACLMAR);
*        ZMACRET=8;                          /* MACRO ERROR */
*      END;
*/*PG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/
*  IF TRANSLATE(MF(1))
*              = 'M'                         /* CHECK FOR KEYWORD */
*    THEN
*      DO;
*        XMF='M';                            /* SET XVARIABLE */
*        IF NUMBER(MF)>3                     /* CHECK POSITIONALS */
*          THEN
*            DO;
*              ZMS=' 8, "MF'||               /**KPOSP* MSG*/
*                  MF||
*                  '" "MF"'||
*                  ' CAN HAVE ONLY 3 ARGUMENTS.';
*              ANS MSG('?ASAXWC ---> '||ZMS);
*              ANS(COMMENT(ZMS)) COL(MACLMAR);
*              ZMACRET=8;                    /* MACRO ERROR */
*            END;
*/*PG.KXVAR03 NAME, OPT RQD INPUT, POS(2) -XVARIABLE-----------------*/
*  XMFCTRL=MF(2);                            /* SET XVARIABLE */
*  IF MF(2)=''                               /* CHECK FOR NULL */
*   THEN
*    DO;                                     /* KEY IS REQUIRED */
*        ZXMFCTRL='';                        /* RESET IN/OUTPUT */
*        ZMS=' 8, WHEN "M" IS SPECIFIED'||
*            ' FOR THE "MF" KEY, POSITIONAL'||
*            ' ARG 2 IS REQUIRED.';          /**KRQDP* MSG*/
*        ANS MSG('?ASAXWC ---> '||ZMS);
*        ANS(COMMENT(ZMS)) COL(MACLMAR);
*        ZMACRET=8;                          /* MACRO ERROR */
*    END;
*  ELSE
*    ZXMFCTRL='INPUT';                       /* SET IN/OUTPUT */
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/
*  XMFSCK='';                                /* RESET XVARIABLE */
*  IF TRANSLATE(MF(3))
*              = 'COMPLETE'                  /* CHECK FOR KEYWORD */
*    THEN
*      XMFSCK = 'COMPLETE';                  /* SET XVARIABLE */
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/
*  IF TRANSLATE(MF(3))
*              = 'NOCHECK'                   /* CHECK FOR KEYWORD */
*    THEN
*      XMFSCK = 'NOCHECK';                   /* SET XVARIABLE */
*/*PG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/
*  ZXMFSCK='INPUT';                          /* SET IN/OUTPUT */
*  IF XMFSCK=''                              /* CHECK FOR KEYWORD */
*    THEN
*      DO;                                   /* KEYWORD NOT ENTERED */
*        XMFSCK='COMPLETE';                  /* SET DEFAULT */
*        IF MF(3)¬=''
*          THEN
*            DO;
*              ZXMFSCK='';                   /* RESET IN/OUTPUT */
*              ZMS=' 8, "MF'||               /**KUKWP* MSG*/
*                  MF||'"'||
*                  ' ARGUMENT 3 IS AN UNKNOWN KEYWORD. '||
*                  ' VALID KEYWORD CHOICE(S) ARE:'||
*                  ' "COMPLETE"'||           /* VALID KEYWORD */
*                  ' OR "NOCHECK".';         /* VALID KEYWORD */
*              ANS MSG('?ASAXWC ---> '||ZMS);
*              ANS(COMMENT(ZMS)) COL(MACLMAR);
*              ZMACRET=8;                    /* MACRO ERROR */
*            END;
*      END;
*/*PG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/
*  IF TRANSLATE(MF(1))
*              = 'E'                         /* CHECK FOR KEYWORD */
*    THEN
*      DO;
*        XMF='E';                            /* SET XVARIABLE */
*        IF NUMBER(MF)>3                     /* CHECK POSITIONALS */
*          THEN
*            DO;
*              ZMS=' 8, "MF'||               /**KPOSP* MSG*/
*                  MF||
*                  '" "MF"'||
*                  ' CAN HAVE ONLY 3 ARGUMENTS.';
*              ANS MSG('?ASAXWC ---> '||ZMS);
*              ANS(COMMENT(ZMS)) COL(MACLMAR);
*              ZMACRET=8;                    /* MACRO ERROR */
*            END;
*/*PG.KXVAR03 NAME, OPT RQD INPUT, POS(2) -XVARIABLE-----------------*/
*  XMFCTRL=MF(2);                            /* SET XVARIABLE */
*  IF MF(2)=''                               /* CHECK FOR NULL */
*   THEN
*    DO;                                     /* KEY IS REQUIRED */
*        ZXMFCTRL='';                        /* RESET IN/OUTPUT */
*        ZMS=' 8, WHEN "E" IS SPECIFIED'||
*            ' FOR THE "MF" KEY, POSITIONAL'||
*            ' ARG 2 IS REQUIRED.';          /**KRQDP* MSG*/
*        ANS MSG('?ASAXWC ---> '||ZMS);
*        ANS(COMMENT(ZMS)) COL(MACLMAR);
*        ZMACRET=8;                          /* MACRO ERROR */
*    END;
*  ELSE
*    ZXMFCTRL='INPUT';                       /* SET IN/OUTPUT */
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/
*  XMFSCK='';                                /* RESET XVARIABLE */
*  IF TRANSLATE(MF(3))
*              = 'COMPLETE'                  /* CHECK FOR KEYWORD */
*    THEN
*      XMFSCK = 'COMPLETE';                  /* SET XVARIABLE */
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/
*  IF TRANSLATE(MF(3))
*              = 'NOCHECK'                   /* CHECK FOR KEYWORD */
*    THEN
*      XMFSCK = 'NOCHECK';                   /* SET XVARIABLE */
*/*PG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/
*  ZXMFSCK='INPUT';                          /* SET IN/OUTPUT */
*  IF XMFSCK=''                              /* CHECK FOR KEYWORD */
*    THEN
*      DO;                                   /* KEYWORD NOT ENTERED */
*        XMFSCK='COMPLETE';                  /* SET DEFAULT */
*        IF MF(3)¬=''
*          THEN
*            DO;
*              ZXMFSCK='';                   /* RESET IN/OUTPUT */
*              ZMS=' 8, "MF'||               /**KUKWP* MSG*/
*                  MF||'"'||
*                  ' ARGUMENT 3 IS AN UNKNOWN KEYWORD. '||
*                  ' VALID KEYWORD CHOICE(S) ARE:'||
*                  ' "COMPLETE"'||           /* VALID KEYWORD */
*                  ' OR "NOCHECK".';         /* VALID KEYWORD */
*              ANS MSG('?ASAXWC ---> '||ZMS);
*              ANS(COMMENT(ZMS)) COL(MACLMAR);
*              ZMACRET=8;                    /* MACRO ERROR */
*            END;
*      END;
*/*PG.KKCTL05 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */
*/*PG.KKCTL06 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/
*  IF MF='MF'
*    | MF='()'                               /*CHECK ENTRY*/
*     THEN
*       DO;
*              ZMS=' 8, THE "MF" KEY'||      /**KOPTP* MSG*/
*                  ' MUST CONTAIN ONE'||
*                  ' (OR MORE) ARGUMENT(S).';
*              ANS MSG('?ASAXWC ---> '||ZMS);
*              ANS(COMMENT(ZMS)) COL(MACLMAR);
*              ZMACRET=8;                    /* MACRO ERROR */
*       END;
*  ELSE
*    DO;
*      ZXMF='INPUT';                         /* SET IN/OUTPUT */
*      IF XMF=''                             /* CHECK FOR KEYWORD */
*        THEN
*          DO;                               /* KEYWORD NOT ENTERED */
*            XMF='S';                        /* SET DEFAULT */
*            XMFSCK='COMPLETE';              /* COMPLETE CHECKING */
*            IF MF(1)¬=''                    /* CHECK FOR KEYWORD */
*              THEN
*                DO;
*                  ZXMF='';                  /* RESET IN/OUTPUT */
*              ZMS=' 8, "MF'||               /**KUKWP* MSG*/
*                  MF||'"'||
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '||
*                  ' VALID KEYWORD CHOICE(S) ARE:'||
*                  ' "S",'||                 /* VALID KEYWORD */
*                  ' "L",'||                 /* VALID KEYWORD */
*                  ' "M",'||                 /* VALID KEYWORD */
*                  ' OR "E".';               /* VALID KEYWORD */
*              ANS MSG('?ASAXWC ---> '||ZMS);
*              ANS(COMMENT(ZMS)) COL(MACLMAR);
*              ZMACRET=8;                    /* MACRO ERROR */
*                END;
*          END;
*    END;
*/********************************************************************/
*/***PD.P01 FULL DEFAULT CHECKING                                    */
*/********************************************************************/
*  IF PLISTVER=''
*     | PLISTVER(1)='IMPLIED_VERSION'
*    THEN
*      ZC='ON';                              /* DEFAULT FLAG ON */
*    ELSE
*      ZC='OFF';                             /* DEFAULT FLAG OFF */
*/********************************************************************/
*/***PD.P02 DEFAULT ECHO                                             */
*/********************************************************************/
*/*PD.P02 XMF¬='L' & XMFSCK='COMPLETE' ------------------------------*/
*  IF XMF¬='L'
*     & XMFSCK='COMPLETE'
*    THEN
*      DO;                                   /* FULL SYNTAX CHECK */
*        ANS('/*DEFAULT(S): */')
*           NORESCAN COL(MACLMAR+5);
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/
*  IF PLISTVER=''
*    THEN
*      ANS('/* PLISTVER('||
*          CHAR(XPLISTVER)||
*          ')*/')
*          NORESCAN COL(MACLMAR+5);
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/
*  XDELIMITER='';
*  IF DELIMITER(1)=''
*    THEN
*      DO;
*        XDELIMITER='LENGTHS_WERE_SET';      /* SET DEFAULT */
*        ZC='ON';                            /* DEFAULT FLAG ON */
*      END;
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/
*  IF XDELIMITER¬=''
*    THEN
*      ANS('/* DELIMITER('||
*          XDELIMITER||
*          ')*/')
*          NORESCAN COL(MACLMAR+5);
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/
*  XWORKAREA='';
*  IF WORKAREA(1)=''
*    THEN
*      DO;
*        XWORKAREA='NO_WORKAREA';            /* SET DEFAULT */
*        ZC='ON';                            /* DEFAULT FLAG ON */
*      END;
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/
*  IF XWORKAREA¬=''
*    THEN
*      ANS('/* WORKAREA('||
*          XWORKAREA||
*          ')*/')
*          NORESCAN COL(MACLMAR+5);
*  IF ZC='OFF'                               /*NO DEFAULTS TAKEN */
*    THEN
*      ANS('/* NONE. */')
*         NORESCAN COL(MACLMAR+5);
*/*PD.P04 END DEFAULT ECHO ------------------------------------------*/
*      END;
*/********************************************************************/
*/*PB.SYSL01 INVOKE SP LEVEL AND SYSTEM STATE MACROS                 */
*/********************************************************************/
*  DCL SYSSPLV CHAR EXTERNAL; DEACT SYSSPLV;/* SPLEVEL 1,2,3         */
*  DCL SYSASCE CHAR EXTERNAL; DEACT SYSASCE;/* STATE ANY P AR */
*
*  IF SYSASCE=''
*    THEN
*      DO;
*        IF SYSSPLV=''
*          THEN
*            ANS('?SPLEVEL  (TEST);') COL(MACLMAR);
*        IF SYSSPLV¬='1' & SYSSPLV¬='2'
*          THEN
*            ANS('?SYSSTATE (TEST);') COL(MACLMAR);
*          ELSE
*            SYSASCE='P';                    /* SYSSTATE DEFAULT*/
*      END;
*/********************************************************************/
*/***PG.P01 FULL MACRO SYNTAX CHECKING                               */
*/********************************************************************/
*/*PG.P02 XMF¬='L' & XMFSCK='COMPLETE' ------------------------------*/
*  IF XMF¬='L'
*     & XMFSCK='COMPLETE'
*    THEN
*      DO;                                   /* FULL SYNTAX CHECK */
*/*PG.P03 EXCESSIVE POSITIONAL ARGUMENTS-----------------------------*/
*  IF NUMBER(MACLIST)>0                      /* CHECK POSITIONALS */
*    THEN
*      DO;
*        ZMS=' 8, POSITIONAL ARGUMENT(S),'|| /**PPOSP* MSG*/
*            ' "'||MACLIST||'"'||
*            ' CANNOT BE USED.'||
*            ' NO POSITIONAL ARGUMENTS'||
*            ' ARE ALLOWED.';
*        ANS MSG('?ASAXWC ---> '||ZMS);
*        ANS(COMMENT(ZMS)) COL(MACLMAR);
*        ZMACRET=8;                          /* MACRO ERROR */
*      END;
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/
*  IF NUMBER(PATTERNSTR)>1                   /* CHECK POSITIONALS */
*    THEN
*      DO;
*        ZMS=' 8, "PATTERNSTR'||             /**KPOSP* MSG*/
*            PATTERNSTR||
*            '" "PATTERNSTR"'||
*            ' CAN HAVE ONLY 1 ARGUMENT.';
*        ANS MSG('?ASAXWC ---> '||ZMS);
*        ANS(COMMENT(ZMS)) COL(MACLMAR);
*        ZMACRET=8;                          /* MACRO ERROR */
*      END;
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/
*  XPATTERNSTR=PATTERNSTR(1);                /* SET XVARIABLE */
*  IF PATTERNSTR(1)=''                       /* CHECK FOR NULL */
*   THEN
*    DO;                                     /* KEY IS REQUIRED */
*        ZXPATTERNSTR='';                    /* RESET IN/OUTPUT */
*        ZMS=' 8,  '||
*            ' "PATTERNSTR" KEY AND ITS ARGUMENT'||
*            ' ARE REQUIRED.';               /**KRQDP* MSG*/
*        ANS MSG('?ASAXWC ---> '||ZMS);
*        ANS(COMMENT(ZMS)) COL(MACLMAR);
*        ZMACRET=8;                          /* MACRO ERROR */
*    END;
*  ELSE
*    ZXPATTERNSTR='INPUT';                   /* SET IN/OUTPUT */
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/
*  IF NUMBER(PATTERNSTRLEN)>1                /* CHECK POSITIONALS */
*    THEN
*      DO;
*        ZMS=' 8, "PATTERNSTRLEN'||          /**KPOSP* MSG*/
*            PATTERNSTRLEN||
*            '" "PATTERNSTRLEN"'||
*            ' CAN HAVE ONLY 1 ARGUMENT.';
*        ANS MSG('?ASAXWC ---> '||ZMS);
*        ANS(COMMENT(ZMS)) COL(MACLMAR);
*        ZMACRET=8;                          /* MACRO ERROR */
*      END;
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/
*  XPATTERNSTRLEN=PATTERNSTRLEN(1);          /* SET XVARIABLE */
*  IF PATTERNSTRLEN(1)=''                    /* CHECK FOR NULL */
*   THEN
*    DO;                                     /* KEY IS REQUIRED */
*        ZXPATTERNSTRLEN='';                 /* RESET IN/OUTPUT */
*        ZMS=' 8,  '||
*            ' "PATTERNSTRLEN" KEY AND ITS ARGUMENT'||
*            ' ARE REQUIRED.';               /**KRQDP* MSG*/
*        ANS MSG('?ASAXWC ---> '||ZMS);
*        ANS(COMMENT(ZMS)) COL(MACLMAR);
*        ZMACRET=8;                          /* MACRO ERROR */
*    END;
*  ELSE
*    ZXPATTERNSTRLEN='INPUT';                /* SET IN/OUTPUT */
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/
*  IF NUMBER(STRING)>1                       /* CHECK POSITIONALS */
*    THEN
*      DO;
*        ZMS=' 8, "STRING'||                 /**KPOSP* MSG*/
*            STRING||
*            '" "STRING"'||
*            ' CAN HAVE ONLY 1 ARGUMENT.';
*        ANS MSG('?ASAXWC ---> '||ZMS);
*        ANS(COMMENT(ZMS)) COL(MACLMAR);
*        ZMACRET=8;                          /* MACRO ERROR */
*      END;
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/
*  XSTRING=STRING(1);                        /* SET XVARIABLE */
*  IF STRING(1)=''                           /* CHECK FOR NULL */
*   THEN
*    DO;                                     /* KEY IS REQUIRED */
*        ZXSTRING='';                        /* RESET IN/OUTPUT */
*        ZMS=' 8,  '||
*            ' "STRING" KEY AND ITS ARGUMENT'||
*            ' ARE REQUIRED.';               /**KRQDP* MSG*/
*        ANS MSG('?ASAXWC ---> '||ZMS);
*        ANS(COMMENT(ZMS)) COL(MACLMAR);
*        ZMACRET=8;                          /* MACRO ERROR */
*    END;
*  ELSE
*    ZXSTRING='INPUT';                       /* SET IN/OUTPUT */
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/
*  IF NUMBER(STRINGLEN)>1                    /* CHECK POSITIONALS */
*    THEN
*      DO;
*        ZMS=' 8, "STRINGLEN'||              /**KPOSP* MSG*/
*            STRINGLEN||
*            '" "STRINGLEN"'||
*            ' CAN HAVE ONLY 1 ARGUMENT.';
*        ANS MSG('?ASAXWC ---> '||ZMS);
*        ANS(COMMENT(ZMS)) COL(MACLMAR);
*        ZMACRET=8;                          /* MACRO ERROR */
*      END;
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/
*  XSTRINGLEN=STRINGLEN(1);                  /* SET XVARIABLE */
*  IF STRINGLEN(1)=''                        /* CHECK FOR NULL */
*   THEN
*    DO;                                     /* KEY IS REQUIRED */
*        ZXSTRINGLEN='';                     /* RESET IN/OUTPUT */
*        ZMS=' 8,  '||
*            ' "STRINGLEN" KEY AND ITS ARGUMENT'||
*            ' ARE REQUIRED.';               /**KRQDP* MSG*/
*        ANS MSG('?ASAXWC ---> '||ZMS);
*        ANS(COMMENT(ZMS)) COL(MACLMAR);
*        ZMACRET=8;                          /* MACRO ERROR */
*    END;
*  ELSE
*    ZXSTRINGLEN='INPUT';                    /* SET IN/OUTPUT */
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/
*  IF NUMBER(ZEROORMORE)>1                   /* CHECK POSITIONALS */
*    THEN
*      DO;
*        ZMS=' 8, "ZEROORMORE'||             /**KPOSP* MSG*/
*            ZEROORMORE||
*            '" "ZEROORMORE"'||
*            ' CAN HAVE ONLY 1 ARGUMENT.';
*        ANS MSG('?ASAXWC ---> '||ZMS);
*        ANS(COMMENT(ZMS)) COL(MACLMAR);
*        ZMACRET=8;                          /* MACRO ERROR */
*      END;
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/
*  XZEROORMORE=ZEROORMORE(1);                /* SET XVARIABLE */
*  IF ZEROORMORE(1)=''                       /* CHECK FOR NULL */
*   THEN
*    DO;                                     /* KEY IS REQUIRED */
*        ZXZEROORMORE='';                    /* RESET IN/OUTPUT */
*        ZMS=' 8,  '||
*            ' "ZEROORMORE" KEY AND ITS ARGUMENT'||
*            ' ARE REQUIRED.';               /**KRQDP* MSG*/
*        ANS MSG('?ASAXWC ---> '||ZMS);
*        ANS(COMMENT(ZMS)) COL(MACLMAR);
*        ZMACRET=8;                          /* MACRO ERROR */
*    END;
*  ELSE
*    ZXZEROORMORE='INPUT';                   /* SET IN/OUTPUT */
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/
*  IF NUMBER(ONECHAR)>1                      /* CHECK POSITIONALS */
*    THEN
*      DO;
*        ZMS=' 8, "ONECHAR'||                /**KPOSP* MSG*/
*            ONECHAR||
*            '" "ONECHAR"'||
*            ' CAN HAVE ONLY 1 ARGUMENT.';
*        ANS MSG('?ASAXWC ---> '||ZMS);
*        ANS(COMMENT(ZMS)) COL(MACLMAR);
*        ZMACRET=8;                          /* MACRO ERROR */
*      END;
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/
*  XONECHAR=ONECHAR(1);                      /* SET XVARIABLE */
*  IF ONECHAR(1)=''                          /* CHECK FOR NULL */
*   THEN
*    DO;                                     /* KEY IS REQUIRED */
*        ZXONECHAR='';                       /* RESET IN/OUTPUT */
*        ZMS=' 8,  '||
*            ' "ONECHAR" KEY AND ITS ARGUMENT'||
*            ' ARE REQUIRED.';               /**KRQDP* MSG*/
*        ANS MSG('?ASAXWC ---> '||ZMS);
*        ANS(COMMENT(ZMS)) COL(MACLMAR);
*        ZMACRET=8;                          /* MACRO ERROR */
*    END;
*  ELSE
*    ZXONECHAR='INPUT';                      /* SET IN/OUTPUT */
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/
*  IF DELIMITER='DELIMITER' | DELIMITER='()'  /*CHECK ENTRY*/
*    THEN
*      DO;
*        ZMS=' 8, THE "DELIMITER" KEY'||     /**KOPTP* MSG*/
*            ' MUST CONTAIN ONE'||
*            ' (OR MORE) ARGUMENT(S).';
*        ANS MSG('?ASAXWC ---> '||ZMS);
*        ANS(COMMENT(ZMS)) COL(MACLMAR);
*        ZMACRET=8;                          /* MACRO ERROR */
*      END;
*  IF NUMBER(DELIMITER)>1                    /* CHECK POSITIONALS */
*    THEN
*      DO;
*        ZMS=' 8, "DELIMITER'||              /**KPOSP* MSG*/
*            DELIMITER||
*            '" "DELIMITER"'||
*            ' CAN HAVE ONLY 1 ARGUMENT.';
*        ANS MSG('?ASAXWC ---> '||ZMS);
*        ANS(COMMENT(ZMS)) COL(MACLMAR);
*        ZMACRET=8;                          /* MACRO ERROR */
*      END;
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/
*  ZXDELIMITER='INPUT';                      /* SET IN/OUTPUT */
*  XDELIMITER='LENGTHS_WERE_SET';            /* SET DEFAULT */
*  IF DELIMITER(1)¬=''                       /* CHECK FOR NULL */
*    THEN
*      XDELIMITER=DELIMITER(1);              /* SET XVARIABLE */
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/
*  IF WORKAREA='WORKAREA' | WORKAREA='()'    /*CHECK ENTRY*/
*    THEN
*      DO;
*        ZMS=' 8, THE "WORKAREA" KEY'||      /**KOPTP* MSG*/
*            ' MUST CONTAIN ONE'||
*            ' (OR MORE) ARGUMENT(S).';
*        ANS MSG('?ASAXWC ---> '||ZMS);
*        ANS(COMMENT(ZMS)) COL(MACLMAR);
*        ZMACRET=8;                          /* MACRO ERROR */
*      END;
*  IF NUMBER(WORKAREA)>1                     /* CHECK POSITIONALS */
*    THEN
*      DO;
*        ZMS=' 8, "WORKAREA'||               /**KPOSP* MSG*/
*            WORKAREA||
*            '" "WORKAREA"'||
*            ' CAN HAVE ONLY 1 ARGUMENT.';
*        ANS MSG('?ASAXWC ---> '||ZMS);
*        ANS(COMMENT(ZMS)) COL(MACLMAR);
*        ZMACRET=8;                          /* MACRO ERROR */
*      END;
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/
*  ZXWORKAREA='INPUT';                       /* SET IN/OUTPUT */
*  XWORKAREA='NO_WORKAREA';                  /* SET DEFAULT */
*  IF WORKAREA(1)¬=''                        /* CHECK FOR NULL */
*    THEN
*      XWORKAREA=WORKAREA(1);                /* SET XVARIABLE */
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/
*  IF RETCODE='RETCODE' | RETCODE='()'       /*CHECK ENTRY*/
*    THEN
*      DO;
*        ZMS=' 8, THE "RETCODE" KEY'||       /**KOPTP* MSG*/
*            ' MUST CONTAIN ONE'||
*            ' (OR MORE) ARGUMENT(S).';
*        ANS MSG('?ASAXWC ---> '||ZMS);
*        ANS(COMMENT(ZMS)) COL(MACLMAR);
*        ZMACRET=8;                          /* MACRO ERROR */
*      END;
*  IF NUMBER(RETCODE)>1                      /* CHECK POSITIONALS */
*    THEN
*      DO;
*        ZMS=' 8, "RETCODE'||                /**KPOSP* MSG*/
*            RETCODE||
*            '" "RETCODE"'||
*            ' CAN HAVE ONLY 1 ARGUMENT.';
*        ANS MSG('?ASAXWC ---> '||ZMS);
*        ANS(COMMENT(ZMS)) COL(MACLMAR);
*        ZMACRET=8;                          /* MACRO ERROR */
*      END;
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/
*  IF RETCODE(1)¬=''                         /* CHECK FOR NULL */
*    THEN
*      DO;
*        XRETCODE=RETCODE(1);                /* SET XVARIABLE */
*        ZXRETCODE='OUTPUT';                 /* SET OUTPUT */
*      END;
*  ELSE
*    IF ZXRETCODE¬=''
*      THEN
*        ZXRETCODE='';                       /* RESET OUTPUT */
*/*PG.P04 XMF¬='L' & XMFSCK='COMPLETE' ------------------------------*/
*      END;                                  /* END COMPLETE CHECKING*/
*/********************************************************************/
*/***PE.MF00 PARTIAL MACRO SYNTAX CHECKING                           */
*/********************************************************************/
*/*PE.MF01 XMF¬='L' & XMFSCK='NOCHECK' ------------------------------*/
*  IF XMF¬='L' & XMFSCK='NOCHECK'
*    THEN
*      DO;                                   /* PARTIAL SYNTAX CHECK */
*/*PE.KC00 INITIALIZE KEYWORD CONTROL VARIABLES----------------------*/
*/*PE.P01 EXCESSIVE POSITIONALS--------------------------------------*/
*  IF NUMBER(MACLIST)>0                      /* CHECK POSITIONALS */
*    THEN
*      DO;
*        ZMS=' 8, POSITIONAL ARGUMENT(S),'|| /**PPOSP* MSG*/
*            ' "'||MACLIST||'"'||
*            ' CANNOT BE USED.'||
*            ' NO POSITIONAL ARGUMENTS'||
*            ' ARE ALLOWED.';
*        ANS MSG('?ASAXWC ---> '||ZMS);
*        ANS(COMMENT(ZMS)) COL(MACLMAR);
*        ZMACRET=8;                          /* MACRO ERROR */
*      END;
*/*PE.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/
*  IF NUMBER(PATTERNSTR)>1                   /* CHECK POSITIONALS */
*    THEN
*      DO;
*        ZMS=' 8, "PATTERNSTR'||             /**KPOSP* MSG*/
*            PATTERNSTR||
*            '" "PATTERNSTR"'||
*            ' CAN HAVE ONLY 1 ARGUMENT.';
*        ANS MSG('?ASAXWC ---> '||ZMS);
*        ANS(COMMENT(ZMS)) COL(MACLMAR);
*        ZMACRET=8;                          /* MACRO ERROR */
*      END;
*/*PE.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/
*  IF PATTERNSTR(1)¬=''                      /* CHECK FOR NULL */
*    THEN
*      DO;
*        XPATTERNSTR=PATTERNSTR(1);          /* SET XVARIABLE */
*        ZXPATTERNSTR='INPUT';               /* SET IN/OUTPUT */
*      END;
*/*PE.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/
*  IF NUMBER(PATTERNSTRLEN)>1                /* CHECK POSITIONALS */
*    THEN
*      DO;
*        ZMS=' 8, "PATTERNSTRLEN'||          /**KPOSP* MSG*/
*            PATTERNSTRLEN||
*            '" "PATTERNSTRLEN"'||
*            ' CAN HAVE ONLY 1 ARGUMENT.';
*        ANS MSG('?ASAXWC ---> '||ZMS);
*        ANS(COMMENT(ZMS)) COL(MACLMAR);
*        ZMACRET=8;                          /* MACRO ERROR */
*      END;
*/*PE.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/
*  IF PATTERNSTRLEN(1)¬=''                   /* CHECK FOR NULL */
*    THEN
*      DO;
*        XPATTERNSTRLEN=PATTERNSTRLEN(1);    /* SET XVARIABLE */
*        ZXPATTERNSTRLEN='INPUT';            /* SET IN/OUTPUT */
*      END;
*/*PE.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/
*  IF NUMBER(STRING)>1                       /* CHECK POSITIONALS */
*    THEN
*      DO;
*        ZMS=' 8, "STRING'||                 /**KPOSP* MSG*/
*            STRING||
*            '" "STRING"'||
*            ' CAN HAVE ONLY 1 ARGUMENT.';
*        ANS MSG('?ASAXWC ---> '||ZMS);
*        ANS(COMMENT(ZMS)) COL(MACLMAR);
*        ZMACRET=8;                          /* MACRO ERROR */
*      END;
*/*PE.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/
*  IF STRING(1)¬=''                          /* CHECK FOR NULL */
*    THEN
*      DO;
*        XSTRING=STRING(1);                  /* SET XVARIABLE */
*        ZXSTRING='INPUT';                   /* SET IN/OUTPUT */
*      END;
*/*PE.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/
*  IF NUMBER(STRINGLEN)>1                    /* CHECK POSITIONALS */
*    THEN
*      DO;
*        ZMS=' 8, "STRINGLEN'||              /**KPOSP* MSG*/
*            STRINGLEN||
*            '" "STRINGLEN"'||
*            ' CAN HAVE ONLY 1 ARGUMENT.';
*        ANS MSG('?ASAXWC ---> '||ZMS);
*        ANS(COMMENT(ZMS)) COL(MACLMAR);
*        ZMACRET=8;                          /* MACRO ERROR */
*      END;
*/*PE.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/
*  IF STRINGLEN(1)¬=''                       /* CHECK FOR NULL */
*    THEN
*      DO;
*        XSTRINGLEN=STRINGLEN(1);            /* SET XVARIABLE */
*        ZXSTRINGLEN='INPUT';                /* SET IN/OUTPUT */
*      END;
*/*PE.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/
*  IF NUMBER(ZEROORMORE)>1                   /* CHECK POSITIONALS */
*    THEN
*      DO;
*        ZMS=' 8, "ZEROORMORE'||             /**KPOSP* MSG*/
*            ZEROORMORE||
*            '" "ZEROORMORE"'||
*            ' CAN HAVE ONLY 1 ARGUMENT.';
*        ANS MSG('?ASAXWC ---> '||ZMS);
*        ANS(COMMENT(ZMS)) COL(MACLMAR);
*        ZMACRET=8;                          /* MACRO ERROR */
*      END;
*/*PE.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/
*  IF ZEROORMORE(1)¬=''                      /* CHECK FOR NULL */
*    THEN
*      DO;
*        XZEROORMORE=ZEROORMORE(1);          /* SET XVARIABLE */
*        ZXZEROORMORE='INPUT';               /* SET IN/OUTPUT */
*      END;
*/*PE.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/
*  IF NUMBER(ONECHAR)>1                      /* CHECK POSITIONALS */
*    THEN
*      DO;
*        ZMS=' 8, "ONECHAR'||                /**KPOSP* MSG*/
*            ONECHAR||
*            '" "ONECHAR"'||
*            ' CAN HAVE ONLY 1 ARGUMENT.';
*        ANS MSG('?ASAXWC ---> '||ZMS);
*        ANS(COMMENT(ZMS)) COL(MACLMAR);
*        ZMACRET=8;                          /* MACRO ERROR */
*      END;
*/*PE.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/
*  IF ONECHAR(1)¬=''                         /* CHECK FOR NULL */
*    THEN
*      DO;
*        XONECHAR=ONECHAR(1);                /* SET XVARIABLE */
*        ZXONECHAR='INPUT';                  /* SET IN/OUTPUT */
*      END;
*/*PE.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/
*  IF DELIMITER='DELIMITER'                  /* CHECK ENTRY */
*    THEN
*      DO;
*        ZMS=' 8, THE "DELIMITER" KEY'||     /**KOPTP* MSG*/
*            ' MUST CONTAIN ONE'||
*            ' (OR MORE) ARGUMENT(S).';
*        ANS MSG('?ASAXWC ---> '||ZMS);
*        ANS(COMMENT(ZMS)) COL(MACLMAR);
*        ZMACRET=8;                          /* MACRO ERROR */
*      END;
*  IF NUMBER(DELIMITER)>1                    /* CHECK POSITIONALS */
*    THEN
*      DO;
*        ZMS=' 8, "DELIMITER'||              /**KPOSP* MSG*/
*            DELIMITER||
*            '" "DELIMITER"'||
*            ' CAN HAVE ONLY 1 ARGUMENT.';
*        ANS MSG('?ASAXWC ---> '||ZMS);
*        ANS(COMMENT(ZMS)) COL(MACLMAR);
*        ZMACRET=8;                          /* MACRO ERROR */
*      END;
*/*PE.KXVAR03 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/
*  IF DELIMITER(1)¬=''                       /* CHECK FOR NULL */
*    THEN
*      DO;
*        XDELIMITER=DELIMITER(1);            /* SET XVARIABLE */
*        ZXDELIMITER='INPUT';                /* SET IN/OUTPUT */
*      END;
*/*PE.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/
*  IF WORKAREA='WORKAREA'                    /* CHECK ENTRY */
*    THEN
*      DO;
*        ZMS=' 8, THE "WORKAREA" KEY'||      /**KOPTP* MSG*/
*            ' MUST CONTAIN ONE'||
*            ' (OR MORE) ARGUMENT(S).';
*        ANS MSG('?ASAXWC ---> '||ZMS);
*        ANS(COMMENT(ZMS)) COL(MACLMAR);
*        ZMACRET=8;                          /* MACRO ERROR */
*      END;
*  IF NUMBER(WORKAREA)>1                     /* CHECK POSITIONALS */
*    THEN
*      DO;
*        ZMS=' 8, "WORKAREA'||               /**KPOSP* MSG*/
*            WORKAREA||
*            '" "WORKAREA"'||
*            ' CAN HAVE ONLY 1 ARGUMENT.';
*        ANS MSG('?ASAXWC ---> '||ZMS);
*        ANS(COMMENT(ZMS)) COL(MACLMAR);
*        ZMACRET=8;                          /* MACRO ERROR */
*      END;
*/*PE.KXVAR03 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/
*  IF WORKAREA(1)¬=''                        /* CHECK FOR NULL */
*    THEN
*      DO;
*        XWORKAREA=WORKAREA(1);              /* SET XVARIABLE */
*        ZXWORKAREA='INPUT';                 /* SET IN/OUTPUT */
*      END;
*/*PE.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/
*  IF RETCODE='RETCODE'                      /* CHECK ENTRY */
*    THEN
*      DO;
*        ZMS=' 8, THE "RETCODE" KEY'||       /**KOPTP* MSG*/
*            ' MUST CONTAIN ONE'||
*            ' (OR MORE) ARGUMENT(S).';
*        ANS MSG('?ASAXWC ---> '||ZMS);
*        ANS(COMMENT(ZMS)) COL(MACLMAR);
*        ZMACRET=8;                          /* MACRO ERROR */
*      END;
*  IF NUMBER(RETCODE)>1                      /* CHECK POSITIONALS */
*    THEN
*      DO;
*        ZMS=' 8, "RETCODE'||                /**KPOSP* MSG*/
*            RETCODE||
*            '" "RETCODE"'||
*            ' CAN HAVE ONLY 1 ARGUMENT.';
*        ANS MSG('?ASAXWC ---> '||ZMS);
*        ANS(COMMENT(ZMS)) COL(MACLMAR);
*        ZMACRET=8;                          /* MACRO ERROR */
*      END;
*/*PE.KXVAR03 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/
*  IF RETCODE(1)¬=''                         /* CHECK FOR NULL */
*    THEN
*      DO;
*        XRETCODE=RETCODE(1);                /* SET XVARIABLE */
*        ZXRETCODE='OUTPUT';                 /* SET IN/OUTPUT */
*      END;
*/*PE.MF02 XMF¬='L' & XMFSCK='NOCHECK' ------------------------------*/
*      END;                                  /* END PARTIAL CHECK */
*/********************************************************************/
*/***PE.MR01 GENERATE CODE IF ZMACRET=0                              */
*/********************************************************************/
*  IF ZMACRET = 0
*    THEN
*      DO;
*/********************************************************************/
*/***PE.PR01 PRINT CONTROLS, DEFAULT IS YES                          */
*/********************************************************************/
*  ANS(MACCONC||'LIST PUSH NOECHO;') NORESCAN COL(MACLMAR);
*  IF ZPRINT='NO'                            /* PRINT IS OFF */
*    THEN
*      ANS(MACCONC||'LIST OFF NOECHO;') NORESCAN COL(MACLMAR);
*    ELSE
*      ANS(MACCONC||'LIST ON NOECHO;')  NORESCAN COL(MACLMAR);
*/********************************************************************/
*/*PE.DO02 OUTER MACRO DO STATEMENT----------------------------------*/
*  IF XMF¬='L'
*    THEN
*      ANS('DO; /* ASAXWC-PLISTVER */')
*          NORESCAN COL(MACLMAR);
*/*MCMPLS01 RFY 15*/
*  IF XMF¬='L' & ZMACRET = 0
*    THEN
*      ANS('RFY GPR15F RSTD;') NORESCAN COL(MACLMAR);
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
*DCL EHAMAPS CHAR EXTERNAL;
*IF INDEX(EHAMAPS,'XM@')=0 THEN
*  EHAMAPS=EHAMAPS||'XM@,';
*DCL EHAREGS CHAR EXTERNAL;
*IF INDEX(EHAREGS,'00P')=0 THEN
*  EHAREGS=EHAREGS||'00P';
*IF XMF = 'M' & WorkArea ¬= '' THEN
*DO;
*   ZMS = 'WORKAREA IS NOT ALLOWED WITH MF(M)';
*   ANS MSG('?ASAXWC ---> '||ZMS);
*   ANS(COMMENT(ZMS)) COL(MACLMAR);
*   ZMACRET=8;                          /* MACRO ERROR */
*END;
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
*/*PL.LL01 ?ASAXWC MF=L PARAMETER LIST-------------------------------*/
*  IF XMF='L'
*    THEN
*      DO;
*        ANS('DCL 1 '||XMFCTRL||' '||XMFATTR||', '||
*            '/* ?ASAXWC PARM LIST*/')
*            NORESCAN COL(MACLMAR);
*/*PL.LL13 ADDR XPATTERNSTR PTR(31) INPUT ADDR-----------------------*/
*        ANS('2 '||XMFCTRL||
*            '_XPATTERNSTR_ADDR PTR(31), '||
*            '/* '||ZXPATTERNSTR_ADDR||' XPATTERNSTR_ADDR */')
*            NORESCAN COL(MACLMAR+2);
*/*PL.LL13  XPATTERNSTRLEN FIXED(31) INPUT---------------------------*/
*        ANS('2 '||XMFCTRL||
*            '_XPATTERNSTRLEN FIXED(31), '||
*            '/* '||ZXPATTERNSTRLEN||' XPATTERNSTRLEN */')
*            NORESCAN COL(MACLMAR+2);
*/*PL.LL13 ADDR XSTRING PTR(31) INPUT ADDR---------------------------*/
*        ANS('2 '||XMFCTRL||
*            '_XSTRING_ADDR PTR(31), '||
*            '/* '||ZXSTRING_ADDR||' XSTRING_ADDR */')
*            NORESCAN COL(MACLMAR+2);
*/*PL.LL13  XSTRINGLEN FIXED(31) INPUT-------------------------------*/
*        ANS('2 '||XMFCTRL||
*            '_XSTRINGLEN FIXED(31), '||
*            '/* '||ZXSTRINGLEN||' XSTRINGLEN */')
*            NORESCAN COL(MACLMAR+2);
*/*PL.LL13 ADDR XZEROORMORE PTR(31) INPUT ADDR-----------------------*/
*        ANS('2 '||XMFCTRL||
*            '_XZEROORMORE_ADDR PTR(31), '||
*            '/* '||ZXZEROORMORE_ADDR||' XZEROORMORE_ADDR */')
*            NORESCAN COL(MACLMAR+2);
*/*PL.LL13 ADDR XONECHAR PTR(31) INPUT ADDR--------------------------*/
*        ANS('2 '||XMFCTRL||
*            '_XONECHAR_ADDR PTR(31), '||
*            '/* '||ZXONECHAR_ADDR||' XONECHAR_ADDR */')
*            NORESCAN COL(MACLMAR+2);
*/*PL.LL13 ADDR XDELIMITER PTR(31) INPUT ADDR------------------------*/
*        ANS('2 '||XMFCTRL||
*            '_XDELIMITER_ADDR PTR(31), '||
*            '/* '||ZXDELIMITER_ADDR||' XDELIMITER_ADDR */')
*            NORESCAN COL(MACLMAR+2);
*/*PL.LL18 ----------------------------------------------------------*/
*        ANS('2 * CHAR(0);')
*            NORESCAN COL(MACLMAR+2);
*/*PL.LL17 END OF MF=L PARAMETER LIST--------------------------------*/
*      END;
*/*PL.L01 MACRO WORK VARIABLES---------------------------------------*/
*  DCL ZPRMLINE CHAR;          /* ZPRM ARRAY ENTRY ACCUMULATOR      */
*  DEACT ZPRMLINE;
*  DCL ZNDX CHAR;              /* UNIQUE LIST STRUCTURE NAME        */
*  DEACT ZNDX;
*  ZNDX=MACINDEX(1:4);         /* MACINDEX LAST THREE DIGITS        */
*/*PL.L02 ?ASAXWC PARAMETER LIST-------------------------------------*/
*  IF XMF¬='L'
*    THEN
*      DO;
*/*PL.L03 ?ASAXWC PARAMETER LIST-------------------------------------*/
*        IF XMF='S'
*          THEN
*            XMFCTRL='#ZPLIST';
*/*PL.L04 ?ASAXWC PARAMETER LIST-------------------------------------*/
*        ZPRMLINE='DCL 1 #Z'||ZNDX||' DEF('||XMFCTRL||'),'||
*                 ' /* ?ASAXWC PARM LIST*/';
*/*PL.L08 ADDR XPATTERNSTR PTR(31) INPUT ADDR------------------------*/
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||
*                 '_XPATTERNSTR_ADDR PTR(31), '||
*                 '/* '||ZXPATTERNSTR_ADDR||' XPATTERNSTR_ADDR */';
*/*PL.L08  XPATTERNSTRLEN FIXED(31) INPUT----------------------------*/
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||
*                 '_XPATTERNSTRLEN FIXED(31), '||
*                 '/* '||ZXPATTERNSTRLEN||' XPATTERNSTRLEN */';
*/*PL.L08 ADDR XSTRING PTR(31) INPUT ADDR----------------------------*/
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||
*                 '_XSTRING_ADDR PTR(31), '||
*                 '/* '||ZXSTRING_ADDR||' XSTRING_ADDR */';
*/*PL.L08  XSTRINGLEN FIXED(31) INPUT--------------------------------*/
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||
*                 '_XSTRINGLEN FIXED(31), '||
*                 '/* '||ZXSTRINGLEN||' XSTRINGLEN */';
*/*PL.L08 ADDR XZEROORMORE PTR(31) INPUT ADDR------------------------*/
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||
*                 '_XZEROORMORE_ADDR PTR(31), '||
*                 '/* '||ZXZEROORMORE_ADDR||' XZEROORMORE_ADDR */';
*/*PL.L08 ADDR XONECHAR PTR(31) INPUT ADDR---------------------------*/
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||
*                 '_XONECHAR_ADDR PTR(31), '||
*                 '/* '||ZXONECHAR_ADDR||' XONECHAR_ADDR */';
*/*PL.L08 ADDR XDELIMITER PTR(31) INPUT ADDR-------------------------*/
*        ZPRMLINE=ZPRMLINE||' 2 #Z'||ZNDX||
*                 '_XDELIMITER_ADDR PTR(31), '||
*                 '/* '||ZXDELIMITER_ADDR||' XDELIMITER_ADDR */';
*/*PL.L11 CONSTANT TO ENSURE THAT LIST FORM IS LONG ENOUGH ----------*/
*        ZPRMNUM=ZPRMNUM+1;
*        ZPRM(ZPRMNUM)=ZPRMLINE||' 2 * CHAR(0);';
*        IF XPLISTVER¬=0
*           & XMF¬='S'
*          THEN
*            DO;
*              ZPRMNUM=ZPRMNUM+1;
*              ZPRM(ZPRMNUM)=
*               'DCL #Z'||ZNDX||'_LENCHECK FIXED(32) CONSTANT('||
*               'LENGTH('||XMFCTRL||')-LENGTH(#Z'||ZNDX||'));'||
*               '/* CONSTANT TO ENSURE THAT THE LIST FORM'||
*               ' IS LONG ENOUGH */';
*            END;
*/*PL.L12 PARAMETER LIST SIZE----------------------------------------*/
*        ZPLLEN=28;
*        IF ZPRMMAX<ZPLLEN
*           & XMF¬='E'
*           & XMF¬='M'
*          THEN
*            ZPRMMAX=ZPLLEN;
*/*PL.L13 -----------------------------------------------------------*/
*      END;
*/*PI.L01 XMF¬='L' & XMFSCK='COMPLETE' ------------------------------*/
*  IF XMF¬='L'
*    THEN
*      DO;
*        ANS('RFY GPR15F UNRSTD;') NORESCAN COL(MACLMAR);
*/*PI.L03 CLEAR PARAMETER LIST --------------------------------------*/
*  IF XMFSCK='COMPLETE'
*    THEN
*            ANS('#Z'||ZNDX||'=''''B;'||
*                '/* CLEAR PARAMETER AREA */')
*                NORESCAN COL(MACLMAR);
*/*PI.L15 ADDR(XPATTERNSTR) CHAR(*)----------------------------------*/
*        IF ZXPATTERNSTR¬=''
*          THEN
*            ANS('#Z'||ZNDX||'_XPATTERNSTR_ADDR='||
*                'ADDR('||XPATTERNSTR||');'||
*                '/* ADDR XPATTERNSTR CHAR(*) */')
*                NORESCAN COL(MACLMAR);
*/*PI.L17 XPATTERNSTRLEN FIXED(31)-----------------------------------*/
*        IF ZXPATTERNSTRLEN='INPUT' |
*           ZXPATTERNSTRLEN='INOUT'
*          THEN
*            ANS('#Z'||ZNDX||'_XPATTERNSTRLEN='||
*                XPATTERNSTRLEN||';'||
*                '/* XPATTERNSTRLEN FIXED(31) */')
*                NORESCAN COL(MACLMAR);
*/*PI.L15 ADDR(XSTRING) CHAR(*)--------------------------------------*/
*        IF ZXSTRING¬=''
*          THEN
*            ANS('#Z'||ZNDX||'_XSTRING_ADDR='||
*                'ADDR('||XSTRING||');'||
*                '/* ADDR XSTRING CHAR(*) */')
*                NORESCAN COL(MACLMAR);
*/*PI.L17 XSTRINGLEN FIXED(31)---------------------------------------*/
*        IF ZXSTRINGLEN='INPUT' |
*           ZXSTRINGLEN='INOUT'
*          THEN
*            ANS('#Z'||ZNDX||'_XSTRINGLEN='||
*                XSTRINGLEN||';'||
*                '/* XSTRINGLEN FIXED(31) */')
*                NORESCAN COL(MACLMAR);
*/*PI.L15 ADDR(XZEROORMORE) CHAR(1)----------------------------------*/
*        IF ZXZEROORMORE¬=''
*          THEN
*            ANS('#Z'||ZNDX||'_XZEROORMORE_ADDR='||
*                'ADDR('||XZEROORMORE||');'||
*                '/* ADDR XZEROORMORE CHAR(1) */')
*                NORESCAN COL(MACLMAR);
*/*PI.L15 ADDR(XONECHAR) CHAR(1)-------------------------------------*/
*        IF ZXONECHAR¬=''
*          THEN
*            ANS('#Z'||ZNDX||'_XONECHAR_ADDR='||
*                'ADDR('||XONECHAR||');'||
*                '/* ADDR XONECHAR CHAR(1) */')
*                NORESCAN COL(MACLMAR);
*/*PI.L14 CHECK FOR * AS THE CHAR(1) ARGUMENT------------------------*/
*        IF TRANSLATE(XDELIMITER)
*                    = 'LENGTHS_WERE_SET'
*           & XMFSCK='COMPLETE'
*          THEN
*            ZXDELIMITER='';                 /* RESET INPUT/INOUT */
*/*PI.L15 ADDR(XDELIMITER) CHAR(1)-----------------------------------*/
*        IF ZXDELIMITER¬=''
*          THEN
*            DO;
*            IF (XDELIMITER='LENGTHS_WERE_SET' & XMFSCK¬='COMPLETE')
*              THEN
*                ANS('#Z'||ZNDX||'_XDELIMITER_ADDR=0;'||
*                    '/* ADDR XDELIMITER CHAR(1) */')
*                    NORESCAN COL(MACLMAR);
*            IF XDELIMITER¬='LENGTHS_WERE_SET'
*              THEN
*                ANS('#Z'||ZNDX||'_XDELIMITER_ADDR='||
*                    'ADDR('||XDELIMITER||');'||
*                    '/* ADDR XDELIMITER CHAR(1) */')
*                    NORESCAN COL(MACLMAR);
*            END;
*/*PI.L29 NOT MF=M MACRO FORM----------------------------------------*/
*        IF XMF¬='M'
*          THEN
*            DO;
*/*PI.L31 INVOKE FUNCTION--------------------------------------------*/
*              ANS('RFY GPR01P RSTD;') NORESCAN COL(MACLMAR);
*              ANS('GPR01P=ADDR(#Z'||ZNDX||');'||
*                  '/* PARAMETER LIST */')
*                  NORESCAN COL(MACLMAR);
*              IF SYSASCE¬='P'
*                THEN
*                  ANS('SAR(GPR01P,ALET(#Z'||ZNDX||'));'||
*                      '/* PARAMETER LIST AR */')
*                      NORESCAN COL(MACLMAR);
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
* IF WorkArea = '' |                                   /*        @L1A*/
*    Translate(Xworkarea) = 'NO_WORKAREA' THEN         /*        @L1A*/
*    ANS('CALL ((((XM@CVT+140)->I031P+232) -> I031P+28) -> I031P)'
*            || '-> I31ANY;')
*         SKIP COL(5);                                 /*        @L1A*/
* ELSE DO;             /* Workarea, use ASAWILDB                 @L1A*/
*    BANS SKIP COL(5);                                 /*        @L1A*/
*      'RFY GPR00P RSTD;'
*      'GPR00P = ADDR(' || XWorkArea || ');'
*      'CALL ((((XM@CVT+140)->I031P+232) -> I031P+32) -> I031P)' ||
*            '-> I31ANY;'
*      'RFY GPR00P UNRSTD;'
*    EANS;                                             /*        @L1A*/
* END;                                                 /*        @L1A*/
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
*              ANS('RFY GPR01P UNRSTD;') NORESCAN COL(MACLMAR);
*              IF NUMBER(RETCODE)>0
*                THEN
*                  ANS('RFY GPR15F RSTD;') NORESCAN COL(MACLMAR);
*/*PO.L08 XRETCODE FIXED(31) RETURN CODE-----------------------------*/
*              IF NUMBER(RETCODE)>0
*                THEN
*                    ANS(XRETCODE||
*                     '=GPR15F; /* SET RETURN CODE */')
*                      NORESCAN COL(MACLMAR);
*/*PO.L10 REMOVE REGISTER RESTRICTIONS-------------------------------*/
*              IF NUMBER(RETCODE)>0
*                THEN
*              ANS('RFY GPR15F UNRSTD;') NORESCAN COL(MACLMAR);
*/*PO.L11 END OF FUNCTION INVOCATION---------------------------------*/
*            END;
*/*PO.L12 END OF PARAMETER LIST PROCESSING---------------------------*/
*      END;
*/*PO.L13 ASAXWC USAGE INDICATOR-------------------------------------*/
*  ZASAXWC='YES';                            /* SET ASAXWC USED */
*/*PO.L15 END OF EXECUTABLE ASAXWC-PLISTVER MACRO--------------------*/
*  IF XMF¬='L'
*    THEN
*      ANS('END; /* ASAXWC-PLISTVER */')
*          NORESCAN COL(MACLMAR);
*/*PO.L16 RESTORE PRINT CONTROLS-------------------------------------*/
*  ANS(MACCONC||'LIST POP NOECHO;') NORESCAN COL(MACLMAR);
*/*PO.L17 END OF ASAXWC MACRO----------------------------------------*/
*  ANS(MACCONC||'SPACE;') NORESCAN COL(MACLMAR);
*  ANS(' ') NORESCAN COL(MACLMAR);
*/*******************************************************************/
*/*  PO.L18 END OF CODE TO BE BYPASSED WHEN ZMACRET ¬= 0            */
*/*******************************************************************/
*      END;
*/*******************************************************************/
*/*  MVS ONLY     -CHECK IF AMG PARM LISTS ARE PRESENT              */
*/*               -ROUND MAX AMG PARM LIST TO DOUBLEWORD MULTIPLES  */
*/*******************************************************************/
*  IF ZPRMNUM>0                   /* NUMBER OF AMG PARM LIST ENTRIES*/
*    THEN
*      DO;
*        ZPRMMAX=((ZPRMMAX+7)/8)*8; /* ROUND PARM LIST SIZE UP TO
*                                      DOUBLEWORD MULTIPLES        */
*/*******************************************************************/
*/*  MVS -GENERATE PARM LIST DCL TO OVERLAY ?EPILOG'S ILIST AREA    */
*/*******************************************************************/
*        IF XMF ¬= 'M' & XMF ¬= 'E'
*          THEN
*            DO;
*              IF INDEX(EHALIST,',AMG,')=0 /* HAS DECLARE BEEN DONE?*/
*                THEN
*                  DO;
*                    ANS('?EPILOG
*                        STRING(''DCL #ZPLIST DEF(ILIST);'');');
*                    EHALIST=EHALIST||',AMG,';
*                  END;
*            END;
*/*******************************************************************/
*/*  MVS  -EXTRACT PARM LISTS FROM AMG GLOBAL MACRO ARRAYS          */
*/*******************************************************************/
*        IF XMF ¬= 'M' & XMF ¬= 'E'
*          THEN
*            DO;
*              IF ZPRMMAX>EHAMAXLEN
*                THEN
*                  EHAMAXLEN=ZPRMMAX; /* SET MAX PARM LIST SIZE     */
*            END;
*        DO ZI=1 TO ZPRMNUM; /* EXTRACT AMG PARM LISTS               */
*          ANS('?EPILOG STRING('''||ZPRM(ZI)||''');')
*              COL(MACLMAR);
*        END;
*      END;
*/*-----------------------------------------------------------------*/
*/*  MVS  -ENSURE THAT GPRS NEEDED BY AMG MACROS WILL BE PROVIDED   */
*/*        BY ?EPILOG                                               */
*/*-----------------------------------------------------------------*/
*        IF INDEX(EHAREGS,'01P')=0
*          THEN
*            EHAREGS=EHAREGS||'01P'; /* GPR01P                      */
*        IF INDEX(EHAREGS,'15F')=0
*          THEN
*            EHAREGS=EHAREGS||'15F'; /* GPR15F                      */
*  RETURN CODE(ZMACRET);
*%END ASAXWC;
