/**  REXX -- CONVERT NUMERIC DISPLAY DATA TO BINARY  **/
   NUMERIC DIGITS 30
   RTN = 0
   SAVEMSG = MSG()
   IF SAVEMSG = 'OFF' THEN
      X = MSG("ON")
   X = ADDRESS()
   SUBCOM ISPEXEC
   IF RC <> 0 THEN DO
      SAY 'CVB MUST BE RUN UNDER ISPF EDIT!'
      SIGNAL EOJ
   END
   SUBCOM ISREDIT
   IF RC = 0 THEN DO
      UMODE = 'ISREDIT'
      ADDRESS ISPEXEC "CONTROL ERRORS RETURN"
      ADDRESS ISREDIT,
         "ISREDIT MACRO (FRMLEFT,FRMRIGHT,PARMS)"
      IF RC = 0 THEN DO
         ADDRESS ISREDIT "ISREDIT ("DSN") = DATASET"
      END
   END
   IF DSN = 'DSN' THEN DO
      SAY CVB 'EDIT MACRO CAN ONLY BE RUN UNDER ISPF EDIT',
         'WITH NO PENDING EDIT COMMANDS!'
      SIGNAL EOJ
   END
   ADDRESS ISREDIT "CAPS OFF"

   ERRORMSG = ''
   MESG = ''
   IF FRMLEFT = '' THEN DO
     SIGNAL ERROR
   END
   IF FRMLEFT = ''  |  FRMRIGHT = ''  THEN DO
      MESG = 'PARAMETERS ARE MISSING!'
      SIGNAL ERROR
   END
   IF ¬DATATYPE(FRMLEFT,'W')  |  FRMLEFT = 0  THEN DO
      MESG = "'"FRMLEFT"' VALUE OF FROM-LEFT-COL IS INVALID!"
      SIGNAL ERROR
   END
   IF ¬DATATYPE(FRMRIGHT,'W')  |  FRMRIGHT = 0  THEN DO
      MESG = "'"FRMRIGHT"' VALUE OF FROM-RIGHT-COL IS INVALID!"
      SIGNAL ERROR
   END
   IF FRMLEFT > FRMRIGHT THEN DO
      MESG = "FROM-LEFT-COL "FRMLEFT" IS > THAN FROM-RIGHT-COL "FRMRIGHT
      SIGNAL ERROR
   END

   PARMS   = TRANSLATE(PARMS)
   LBL1    = ""
   LBL2    = ""
   TOLEFT  = ""
   TORIGHT = ""
   MINUS   = 0
   DO II = 1 TO 5;
      TOKEN = WORD(PARMS,II)
      IF TOKEN = "" THEN LEAVE
      IF SUBSTR(TOKEN,1,1) = "." THEN DO
         IF LBL1 = "" THEN LBL1 = TOKEN
         ELSE IF LBL2 = "" THEN LBL2 = TOKEN
            ELSE DO
               ZEDSMSG = ".LABEL RC=8"
               ZEDLMSG = "TOO MANY LABELS --" LBL1 LBL2 TOKEN
               ADDRESS "ISPEXEC" "SETMSG MSG(ISRZ000)"
               EXIT 8
            END
      END
      ELSE IF SUBSTR(TOKEN,1,1) = "-" THEN DO
         MINUS = SUBSTR(TOKEN,2)
      END
      ELSE DO
         IF DATATYPE(TOKEN,'W')  THEN DO
            IF TOLEFT = "" THEN TOLEFT = TOKEN
            ELSE IF TORIGHT = "" THEN TORIGHT = TOKEN
               ELSE DO
                  ZEDSMSG = ".LABEL RC=8"
                  ZEDLMSG = "TOO MANY COLUMNS --" TOLEFT TORIGHT TOKEN
                  ADDRESS "ISPEXEC" "SETMSG MSG(ISRZ000)"
                  EXIT 8
               END
         END
      END
   END II
   IF LBL1 <> ""  &  LBL2 = ""  THEN LBL2 = LBL1
   IF TOLEFT <> "" AND TORIGHT = "" THEN TORIGHT = TOLEFT
   IF TOLEFT = "" THEN DO
      TOLEFT  = FRMLEFT
      TORIGHT = FRMRIGHT
   END

   IF ¬DATATYPE(TOLEFT,'W')  |  TOLEFT=0  THEN DO
      MESG = "'"TOLEFT"' VALUE OF TO-LEFT-COL IS INVALID!"
      SIGNAL ERROR
   END
   IF ¬DATATYPE(TORIGHT,'W')  |  TORIGHT=0  THEN DO
      MESG = "'"TORIGHT"' VALUE OF TO-RIGHT-COL IS INVALID!"
      SIGNAL ERROR
   END
   LEN = FRMRIGHT - FRMLEFT + 1
   IF TOLEFT > TORIGHT THEN DO
      MESG = "TO-LEFT-COL "TOLEFT" IS GREATER THAN TO-RIGHT-COL "TORIGHT
      SIGNAL ERROR
   END
   "ISREDIT ("LRECL") = LRECL "
   IF TORIGHT > LRECL THEN DO
      MESG = "TO-RIGHT COLUMN IS GREATER THAN RECORD SIZE ("LRECL")"
      SIGNAL ERROR
   END

   IF LBL1 <> '' THEN DO
      "ISREDIT L &LBL1"
      IF RC <> 0 THEN DO
         MESG = "LABEL" LBL1 "NOT FOUND"
         SIGNAL ERROR
      END
   END
   IF LBL2 <> '' THEN DO
      "ISREDIT L &LBL2"
      IF RC <> 0 THEN DO
         MESG = "LABEL" LBL2 "NOT FOUND"
         SIGNAL ERROR
      END
   END
   "ISREDIT ("LRECL") = LRECL "
   "ISREDIT ("SAVLINE","SAVCOL") = CURSOR "
   "ISREDIT ("ANUM") = AUTONUM "
   "ISREDIT (END) = LINENUM .ZLAST"

   START = 1
   IF LBL1 <> '' THEN
       "ISREDIT (START) = LINENUM &LBL1"

   IF LBL2 <> '' THEN
        "ISREDIT (END) = LINENUM &LBL2"
   ELSE
        LBL2 = LBL1

   IF START > END THEN DO
      WST = START
      START = END
      END = WST
   END

   TOT  = 0
   OVFL = 0
   DO PNTR =  START  TO  END  BY 1
      TOT = TOT + 1
      "ISREDIT (RECORD) = LINE &PNTR"
      IF MINUS = 0,
         THEN DO
           IF VERIFY(SUBSTR(RECORD,FRMRIGHT,1),'}JKLMNOPQR') = 0
             THEN ISTR = '-',
                  || SUBSTR(RECORD,FRMLEFT,FRMRIGHT-FRMLEFT),
                  || TRANSLATE(SUBSTR(RECORD,FRMRIGHT,1),
                     ,'0123456789', '}JKLMNOPQR')
             ELSE IF VERIFY(SUBSTR(RECORD,FRMRIGHT,1),'{ABCDEFGHI') = 0
               THEN ISTR = '+',
                     || SUBSTR(RECORD,FRMLEFT,FRMRIGHT-FRMLEFT),
                     || TRANSLATE(SUBSTR(RECORD,FRMRIGHT,1),
                        ,'0123456789', '{ABCDEFGHI')
               ELSE ISTR = SUBSTR(RECORD,FRMLEFT,FRMRIGHT-FRMLEFT+1)
         END
         ELSE ISTR = SUBSTR(RECORD,MINUS,1),
                     || SUBSTR(RECORD,FRMLEFT,FRMRIGHT-FRMLEFT+1)
      USTR = X2C(D2X(ISTR,2*(TORIGHT - TOLEFT + 1)))
      RECORD = SUBSTR(RECORD,1,TOLEFT-1),
               || USTR,
               || SUBSTR(RECORD,TORIGHT+1)
      "ISREDIT LINE &PNTR = &STR(RECORD)"
   END

   STR = OVFL || '/' || TOT
   CALL SETMSG '* NO ' STR 'CVB $OVERFLOW OVER TOTAL'
   "ISREDIT LOCATE" START
   "ISREDIT AUTONUM =" ANUM
    SIGNAL EOJ

SETMSG:
   PARSE ARG ZERRHM ZERRALRM ZERRSM'$'ZERRLM
   ADDRESS ISPEXEC 'SETMSG MSG(ISRZ002) COND'
   RETURN

ERROR:
   IF MESG <> '' THEN DO
      RTN = 20
      ERRORMSG = '===>' MESG
   END
   CALL DISPDOC

EOJ:
   SAY "PLEASE NOTE, CAPS IS NOW OFF..."
   X = MSG(SAVEMSG)
   RETURN RTN

DISPDOC:
   ADDRESS TSO "CLEAR"
   SAY "CVB - DECIMAL TO BINARY CONVERSION BY COLUMNS             "
   SAY
   SAY ERRORMSG
   SAY
   SAY " FORMAT "
   SAY "    CVB     FROM-COL1 FROM-COL2 (TO-COL1 TO-COL2)         "
   SAY "              (-MINUS-COL)  (.A .B)                       "
   SAY
   SAY "       FROM-COLUMNS ARE REQUIRED. TO-COLUMNS WILL DEFAULT "
   SAY "       TO FROM-COLUMNS.  THE MINUS COLUMN AND THE LABEL   "
   SAY "       RANGES ARE OPTIONAL.                               "
   SAY
   SAY " EXAMPLE "
   SAY "    CVB        2 18  73 80  -1 .A .B                      "
   SAY "       WILL CONVERT THE NUMERIC DATA IN COLUMNS 2 THROUGH "
   SAY "       18 INTO A 8 BYTE BINARY NUMBER IN COLUMNS 73 TO    "
   SAY "       80 IN THE RANGE .A THROUGH .B, PICKING UP THE SIGN "
   SAY "       FROM COLUMN 1.                                     "
   SAY
   EXIT(1)
