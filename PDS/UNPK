/**  REXX -- UNPK COLUMNS ONTO SAME OR OTHER COLUMNS  **/
   RTN = 0
   SAVEMSG = MSG()
   IF SAVEMSG = 'OFF' THEN
      X = MSG("ON")
   X = ADDRESS()
   SUBCOM ISPEXEC
   IF RC <> 0 THEN DO
      SAY 'UNPK MUST BE RUN UNDER ISPF EDIT!'
      SIGNAL EOJ
   END
   SUBCOM ISREDIT
   IF RC = 0 THEN DO
      UMODE = 'ISREDIT'
      ADDRESS ISPEXEC "CONTROL ERRORS RETURN"
      ADDRESS ISREDIT,
         "ISREDIT MACRO (FRMLEFT,FRMRIGHT,PARMS)"
      IF RC = 0 THEN DO
         ADDRESS ISREDIT "ISREDIT ("DSN") = DATASET"
      END
   END
   IF DSN = 'DSN' THEN DO
      SAY UNPK 'EDIT MACRO CAN ONLY BE RUN UNDER ISPF EDIT',
         'WITH NO PENDING EDIT COMMANDS!'
      SIGNAL EOJ
   END

   ERRORMSG = ''
   MESG = ''
   IF FRMLEFT = ''  |  FRMRIGHT = ''  THEN DO
      MESG = 'PARAMETERS ARE MISSING!'
      SIGNAL ERROR
   END
   IF ¬DATATYPE(FRMLEFT,'W')  |  FRMLEFT = 0  THEN DO
      MESG = "'"FRMLEFT"' VALUE OF FROM-LEFT-COL IS INVALID!"
      SIGNAL ERROR
   END
   IF ¬DATATYPE(FRMRIGHT,'W')  |  FRMRIGHT = 0  THEN DO
      MESG = "'"FRMRIGHT"' VALUE OF FROM-RIGHT-COL IS INVALID!"
      SIGNAL ERROR
   END
   IF FRMLEFT > FRMRIGHT THEN DO
      MESG = "FROM-LEFT-COL "FRMLEFT" IS > THAN FROM-RIGHT-COL "FRMRIGHT
      SIGNAL ERROR
   END

   PARMS   = TRANSLATE(PARMS)
   LBL1    = ""
   LBL2    = ""
   TOLEFT  = ""
   TORIGHT = ""
   MINUS   = 0
   DO II = 1 TO 5;
      TOKEN = WORD(PARMS,II)
      IF TOKEN = "" THEN LEAVE
      IF SUBSTR(TOKEN,1,1) = "." THEN DO
         IF LBL1 = "" THEN LBL1 = TOKEN
         ELSE IF LBL2 = "" THEN LBL2 = TOKEN
            ELSE DO
               ZEDSMSG = ".LABEL RC=8"
               ZEDLMSG = "TOO MANY LABELS --" LBL1 LBL2 TOKEN
               ADDRESS "ISPEXEC" "SETMSG MSG(ISRZ000)"
               EXIT 8
            END
      END
      ELSE IF SUBSTR(TOKEN,1,1) = "-" THEN DO
         MINUS = SUBSTR(TOKEN,2)
      END
      ELSE DO
         IF DATATYPE(TOKEN,'W')  THEN DO
            IF TOLEFT = "" THEN TOLEFT = TOKEN
            ELSE IF TORIGHT = "" THEN TORIGHT = TOKEN
               ELSE DO
                  ZEDSMSG = ".LABEL RC=8"
                  ZEDLMSG = "TOO MANY COLUMNS --" TOLEFT TORIGHT TOKEN
                  ADDRESS "ISPEXEC" "SETMSG MSG(ISRZ000)"
                  EXIT 8
               END
         END
      END
   END II
   IF LBL1 <> ""  &  LBL2 = ""  THEN LBL2 = LBL1
   IF TOLEFT <> "" AND TORIGHT = "" THEN TORIGHT = TOLEFT
   IF TOLEFT = "" THEN DO
      TOLEFT  = FRMLEFT
      TORIGHT = FRMRIGHT
   END

   IF ¬DATATYPE(TOLEFT,'W')  |  TOLEFT=0  THEN DO
      MESG = "'"TOLEFT"' VALUE OF TO-LEFT-COL IS INVALID!"
      SIGNAL ERROR
   END
   IF ¬DATATYPE(TORIGHT,'W')  |  TORIGHT=0  THEN DO
      MESG = "'"TORIGHT"' VALUE OF TO-RIGHT-COL IS INVALID!"
      SIGNAL ERROR
   END
   LEN = FRMRIGHT - FRMLEFT + 1
   IF TOLEFT > TORIGHT THEN DO
      MESG = "TO-LEFT-COL "TOLEFT" IS GREATER THAN TO-RIGHT-COL "TORIGHT
      SIGNAL ERROR
   END
   "ISREDIT ("LRECL") = LRECL "
   IF TORIGHT > LRECL THEN DO
      MESG = "TO-RIGHT COLUMN IS GREATER THAN RECORD SIZE ("LRECL")"
      SIGNAL ERROR
   END

   IF LBL1 <> '' THEN DO
      "ISREDIT L &LBL1"
      IF RC <> 0 THEN DO
         MESG = "LABEL" LBL1 "NOT FOUND"
         SIGNAL ERROR
      END
   END
   IF LBL2 <> '' THEN DO
      "ISREDIT L &LBL2"
      IF RC <> 0 THEN DO
         MESG = "LABEL" LBL2 "NOT FOUND"
         SIGNAL ERROR
      END
   END
   "ISREDIT ("LRECL") = LRECL "
   "ISREDIT ("SAVLINE","SAVCOL") = CURSOR "
   "ISREDIT ("ANUM") = AUTONUM "
   "ISREDIT (END) = LINENUM .ZLAST"

   START = 1
   IF LBL1 <> '' THEN
       "ISREDIT (START) = LINENUM &LBL1"

   IF LBL2 <> '' THEN
        "ISREDIT (END) = LINENUM &LBL2"
   ELSE
        LBL2 = LBL1

   IF START > END THEN DO
      WST = START
      START = END
      END = WST
   END

   GOOD_HEX = '00010203040506070809'X || '10111213141516171819'X,
           || '20212223242526272829'X || '30313233343536373839'X,
           || '40414243444546474849'X || '50515253545556575859'X,
           || '60616263646566676869'X || '70717273747576777879'X,
           || '80818283848586878889'X || '90919293949596979899'X
   TO_SIGN   = '0123456789}JKLMNOPQR0123456789'
   TO_SIGN2  = '012345678901234567890123456789'
   FROM_SIGN = '0C1C2C3C4C5C6C7C8C9C'X,
            || '0D1D2D3D4D5D6D7D8D9D'X,
            || '0F1F2F3F4F5F6F7F8F9F'X

   TOT  = 0
   OK   = 0
   OVFL = 0
   DO PNTR =  START  TO  END  BY 1
      TOT = TOT + 1
      "ISREDIT (RECORD) = LINE &PNTR"
      IF VERIFY(SUBSTR(RECORD,FRMLEFT,FRMRIGHT-FRMLEFT),GOOD_HEX) = 0,
            & VERIFY(SUBSTR(RECORD,FRMRIGHT,1),FROM_SIGN) = 0,
         THEN DO
            OK = OK + 1
            USTR = C2X(SUBSTR(RECORD,FRMLEFT,FRMRIGHT-FRMLEFT))
            IF MINUS = 0,
               THEN DO
                  ZSTR = SUBSTR(RECORD,FRMRIGHT,1)
                  ZSTR = TRANSLATE(ZSTR,TO_SIGN,FROM_SIGN)
               END
               ELSE DO
                  ZSTR = SUBSTR(RECORD,FRMRIGHT,1)
                  IF VERIFY(ZSTR,'0D1D2D3D4D5D6D7D8D9D'X) = 0,
                     THEN DO
                        RECORD = SUBSTR(RECORD,1,MINUS-1),
                           || '-',
                           || SUBSTR(RECORD,MINUS+1)
                     END
                     ELSE DO
                        RECORD = SUBSTR(RECORD,1,MINUS-1),
                           || '+',
                           || SUBSTR(RECORD,MINUS+1)
                     END
                  ZSTR = TRANSLATE(ZSTR,TO_SIGN2,FROM_SIGN)
               END
            USTR = USTR || ZSTR
            IF LENGTH(USTR) > TORIGHT - TOLEFT + 1,
               THEN DO
                  RECORD = SUBSTR(RECORD,1,TOLEFT-1),
                     || SUBSTR(USTR,LENGTH(USTR)-TORIGHT+TOLEFT),
                     || SUBSTR(RECORD,TORIGHT+1)
                  USTRO = LENGTH(USTR) - TORIGHT + TOLEFT - 1
                  ZEROS  = COPIES('0',USTRO)
                  IF SUBSTR(USTR,1,USTRO) <> ZEROS THEN OVFL = OVFL + 1
               END
               ELSE DO
                  ZEROS  = COPIES('0',TORIGHT-TOLEFT+1-LENGTH(USTR))
                  ZEROS  = ZEROS || USTR
                  RECORD = SUBSTR(RECORD,1,TOLEFT-1),
                     || ZEROS || SUBSTR(RECORD,TORIGHT+1)
               END
         END
      "ISREDIT LINE &PNTR = &STR(RECORD)"
   END

   STR = OK || '/' || OVFL || '/' || TOT
   CALL SETMSG '* NO ' STR 'UNPKED $VALID OVER OVERFLOW OVER TOTAL'
   "ISREDIT LOCATE" START
   "ISREDIT AUTONUM =" ANUM
    SIGNAL EOJ

SETMSG:
   PARSE ARG ZERRHM ZERRALRM ZERRSM'$'ZERRLM
   ADDRESS ISPEXEC 'SETMSG MSG(ISRZ002) COND'
   RETURN

ERROR:
   IF MESG <> '' THEN DO
      RTN = 20
      ERRORMSG = '===>' MESG
   END
   CALL DISPDOC
   SIGNAL EOJ

EOJ:
   X = MSG(SAVEMSG)
   RETURN RTN

DISPDOC:
   ADDRESS TSO "CLEAR"
   SAY "UNPK - DECIMAL UNPACK BY COLUMNS"
   SAY
   SAY ERRORMSG
   SAY
   SAY " FORMAT "
   SAY "    UNPK    FROM-COL1 FROM-COL2 (TO-COL1 TO-COL2)         "
   SAY "              (-MINUS-COL)  (.A .B)                       "
   SAY
   SAY "       FROM-COLUMNS ARE REQUIRED. TO-COLUMNS WILL DEFAULT "
   SAY "       TO FROM COLUMNS.  THE MINUS COLUMN AND THE LABEL   "
   SAY "       RANGES ARE OPTIONAL. THE MINUS COLUMN, IF          "
   SAY "       SPECIFIED, RECEIVES THE SIGN IN + OR - FORM, ELSE  "
   SAY "       A MINUS VALUE WILL CAUSE THE LAST TO DIGIT TO BE   "
   SAY "       APPROPRIATELY ZONED (-0 = }, -1 = J, -2 = K, ETC). "
   SAY
   SAY " EXAMPLE "
   SAY "    UNPK      15 18  73 80  .A .B  -14                    "
   SAY "       WILL UNPACK THE CONTENTS OF COLS 15 THRU 18 TO     "
   SAY "       COLUMNS 73 THROUGH 80 IN LINE RANGE .A THRU .B     "
   SAY "       AND PUT THE SIGN IN COLUMN 14.                     "
   SAY
   EXIT(1)
