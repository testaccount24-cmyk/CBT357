//-YOUR-USERID-V JOB  (-YOUR-ACCT-INFO-),'-YOUR-NAME-',
//             CLASS=2,MSGCLASS=X,NOTIFY=-YOUR-USERID-
//***
//***  SUMMARIZE VALUES IN SPECIFIC COLUMNS IN A FILE
//***
//C          EXEC     PGM=IEL0AA,REGION=4M,
//             PARM=('AG,A,NCT,ESD,F(I),NOFLOW,NIS,NOLIST,M,NMI,NEST',
//             'MAP,OF,OPT(TIME),OP,SZ(MAX),S,STMT,STG,X(F)')
//STEPLIB      DD       DISP=SHR,DSN=-YOUR-PLI-LIB-

 VALUES: PROC(PARM) OPTIONS(MAIN) REORDER;

    DCL  PARM          CHAR(00100) VARYING;
    DCL  REC           CHAR(32760) STATIC VARYING;
    DCL  REC#          FIXED BIN(31) STATIC INIT(0);
    DCL  I_EOF_IND     CHAR(01) STATIC INIT('N');
    DCL  SYSIN_EOF_IND CHAR(01) STATIC INIT('N');

    DCL  1  COL_PAIRS(1024) STATIC,
          10  LINK_PTR      PTR,
          10  #VALUES       FIXED BIN(31),
          10  FIRST_COL     FIXED BIN(15),
          10  SECOND_COL    FIXED BIN(15),
          10  LEN_COL       FIXED BIN(15),
          10  THRU_TYPE     CHAR(01),
          10  DESC_COL      CHAR(50);
    DCL  1  SAMPLE          BASED,
          10  NEXT_PTR      PTR,
          10  OCCURS        FIXED BIN(31),
          10  VALUE         CHAR(32760);
    DCL  COL_PAIRS#         FIXED BIN(15) STATIC INIT(0);
    DCL  (II,JJ,KK)         FIXED BIN(31) STATIC INIT(0);
    DCL  (LL,MM,NN)         FIXED BIN(31) STATIC INIT(0);
    DCL  XX                 CHAR(*)  CTL;
    DCL  PTR_TBL(*)         PTR      CTL;
    DCL  TEMP_PTR           PTR STATIC;

    DCL  ADDR               BUILTIN;
    DCL  NULL               BUILTIN;
    DCL  SUBSTR             BUILTIN;
    DCL  TRANSLATE          BUILTIN;
    DCL  VERIFY             BUILTIN;

    DCL  HEX_LINE1          CHAR(256) STATIC;
      HEX_LINE1
             = (16)'0' || (16)'1' || (16)'2' || (16)'3'
            || (16)'4' || (16)'5' || (16)'6' || (16)'7'
            || (16)'8' || (16)'9' || (16)'A' || (16)'B'
            || (16)'C' || (16)'D' || (16)'E' || (16)'F' ;
    DCL  HEX_LINE2          CHAR(256) STATIC
         INIT( (16)'0123456789ABCDEF' );
    DCL  PRINTABLE_CHARACTERS  CHAR(256) STATIC;
       PRINTABLE_CHARACTERS
          =    ' !@#$%&*()_+-=0123456789{}|¬¦\:";''<>?,./'
            || 'abcdefghijklmnopqrstuvwxyz'
            || 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' ;
    DCL  PRINTABLE             CHAR(256) STATIC VARYING;


    ON ENDFILE(SYSIN) SYSIN_EOF_IND = 'Y';
    READ FILE(SYSIN) INTO(REC);

    DO WHILE ( SYSIN_EOF_IND = 'N' );
       COL_PAIRS# = COL_PAIRS# + 1;
       FIRST_COL(COL_PAIRS#)  = SUBSTR(REC,01,05);
       SECOND_COL(COL_PAIRS#) = SUBSTR(REC,07,05);
       THRU_TYPE(COL_PAIRS#)  = SUBSTR(REC,06,01);
       LEN_COL(COL_PAIRS#)    = SECOND_COL(COL_PAIRS#)
          - FIRST_COL(COL_PAIRS#) + 1;
       DESC_COL(COL_PAIRS#)   = SUBSTR(REC,12,50);
       #VALUES(COL_PAIRS#)    = 1;
       READ FILE(SYSIN) INTO(REC);
    END;


    ON ENDFILE(I) I_EOF_IND = 'Y';
    READ FILE(I) INTO(REC);
    IF I_EOF_IND  = 'N'
       THEN DO;
          REC# = REC# + 1;
          DO II = 1 TO COL_PAIRS#;
             IF THRU_TYPE(II) = '-'
                THEN DO;
                   JJ = 8 + LEN_COL(II);
                   ALLOC XX CHAR(JJ);
                   LINK_PTR(II) = ADDR(XX);
                   LINK_PTR(II) -> NEXT_PTR = NULL;
                   LINK_PTR(II) -> OCCURS   = 1;
                   SUBSTR(LINK_PTR(II) -> VALUE,1,LEN_COL(II))
                      = SUBSTR(REC,FIRST_COL(II),LEN_COL(II));
                END;
                ELSE DO;
                   ALLOC XX CHAR(9);
                   LINK_PTR(II) = ADDR(XX);
                   LINK_PTR(II) -> NEXT_PTR = NULL;
                   LINK_PTR(II) -> OCCURS   = 1;
                   SUBSTR(LINK_PTR(II) -> VALUE,1,1)
                      = SUBSTR(REC,FIRST_COL(II),1);
                   DO LL = 1 TO (LEN_COL(II)-1);
                      TEMP_PTR = LINK_PTR(II);
                      DO WHILE ( TEMP_PTR ¬= NULL );
                         IF SUBSTR(TEMP_PTR -> VALUE,1,1)
                               = SUBSTR(REC,FIRST_COL(II)+LL,1)
                            THEN DO;
                               TEMP_PTR -> OCCURS
                                  = TEMP_PTR -> OCCURS + 1;
                               TEMP_PTR = NULL;
                            END;
                            ELSE DO;
                               TEMP_PTR = TEMP_PTR -> NEXT_PTR;
                               IF TEMP_PTR = NULL
                                  THEN DO;
                                     #VALUES(II) = #VALUES(II) + 1;
                                     ALLOC XX CHAR(9);
                                     TEMP_PTR = LINK_PTR(II);
                                     LINK_PTR(II) = ADDR(XX);
                                     LINK_PTR(II) -> NEXT_PTR
                                        = TEMP_PTR;
                                     LINK_PTR(II) -> OCCURS = 1;
                                     SUBSTR(LINK_PTR(II) -> VALUE,1,1)
                                       = SUBSTR(REC,FIRST_COL(II)+ll,1);
                                     TEMP_PTR = NULL;
                                  END;
                            END;
                      END;
                   END;
                END;
          END;
       END;

    IF I_EOF_IND  = 'N'
       THEN READ FILE(I) INTO(REC);

    DO WHILE ( I_EOF_IND  = 'N' );
       REC# = REC# + 1;
       DO II = 1 TO COL_PAIRS#;
          IF THRU_TYPE(II) = '-'
             THEN DO;
                TEMP_PTR = LINK_PTR(II);
                DO WHILE ( TEMP_PTR ¬= NULL );
                   IF SUBSTR(TEMP_PTR -> VALUE,1,LEN_COL(II))
                         = SUBSTR(REC,FIRST_COL(II),LEN_COL(II))
                      THEN DO;
                         TEMP_PTR -> OCCURS = TEMP_PTR -> OCCURS + 1;
                         TEMP_PTR = NULL;
                      END;
                      ELSE DO;
                         TEMP_PTR = TEMP_PTR -> NEXT_PTR;
                         IF TEMP_PTR = NULL
                            THEN DO;
                               #VALUES(II) = #VALUES(II) + 1;
                               JJ = 8 + LEN_COL(II);
                               ALLOC XX CHAR(JJ);
                               TEMP_PTR     = LINK_PTR(II);
                               LINK_PTR(II) = ADDR(XX);
                               LINK_PTR(II) -> NEXT_PTR
                                  = TEMP_PTR;
                               LINK_PTR(II) -> OCCURS   = 1;
                               SUBSTR(LINK_PTR(II)
                                     -> VALUE,1,LEN_COL(II))
                                  = SUBSTR(REC,FIRST_COL(II),
                                     LEN_COL(II));
                               TEMP_PTR = NULL;
                            END;
                      END;
                END;
             END;
             ELSE DO;
                DO LL = 0 TO (LEN_COL(II)-1);
                   TEMP_PTR = LINK_PTR(II);
                   DO WHILE ( TEMP_PTR ¬= NULL );
                      IF SUBSTR(TEMP_PTR -> VALUE,1,1)
                            = SUBSTR(REC,FIRST_COL(II)+LL,1)
                         THEN DO;
                            TEMP_PTR -> OCCURS
                               = TEMP_PTR -> OCCURS + 1;
                            TEMP_PTR = NULL;
                         END;
                         ELSE DO;
                            TEMP_PTR = TEMP_PTR -> NEXT_PTR;
                            IF TEMP_PTR = NULL
                               THEN DO;
                                  #VALUES(II) = #VALUES(II) + 1;
                                  ALLOC XX CHAR(9);
                                  TEMP_PTR = LINK_PTR(II);
                                  LINK_PTR(II) = ADDR(XX);
                                  LINK_PTR(II) -> NEXT_PTR
                                     = TEMP_PTR;
                                  LINK_PTR(II) -> OCCURS   = 1;
                                  SUBSTR(LINK_PTR(II) -> VALUE,1,1)
                                    = SUBSTR(REC,FIRST_COL(II)+ll,1);
                                  TEMP_PTR = NULL;
                               END;
                         END;
                   END;
                END;
             END;
       END;
       READ FILE(I) INTO(REC);
    END;


    IF PARM = ''
       THEN;
       ELSE IF PARM = 'VALUES'
          THEN DO;
             DO II = 1 TO COL_PAIRS#;
                IF THRU_TYPE(II) = '-'
                   THEN DO;
                      ALLOC PTR_TBL(#VALUES(II));
                      TEMP_PTR   = LINK_PTR(II);
                      DO JJ = 1 TO #VALUES(II);
                         PTR_TBL(JJ) = TEMP_PTR;
                         TEMP_PTR    = TEMP_PTR -> NEXT_PTR;
                      END;
                      DO JJ = 1 TO #VALUES(II) - 1;
                         DO KK = JJ + 1 TO #VALUES(II);
                            IF SUBSTR(PTR_TBL(JJ)
                                     -> VALUE,1,LEN_COL(II))
                                  > SUBSTR(PTR_TBL(KK)
                                     -> VALUE,1,LEN_COL(II))
                               THEN DO;
                                  TEMP_PTR    = PTR_TBL(JJ);
                                  PTR_TBL(JJ) = PTR_TBL(KK);
                                  PTR_TBL(KK) = TEMP_PTR;
                               END;
                         END;
                      END;
                      LINK_PTR(II) = PTR_TBL(1);
                      TEMP_PTR     = PTR_TBL(1);
                      DO JJ = 2 TO #VALUES(II);
                         TEMP_PTR -> NEXT_PTR = PTR_TBL(JJ);
                         TEMP_PTR             = PTR_TBL(JJ);
                      END;
                      TEMP_PTR -> NEXT_PTR = NULL;
                      FREE PTR_TBL;
                   END;
                   ELSE DO;
                      ALLOC PTR_TBL(#VALUES(II));
                      TEMP_PTR   = LINK_PTR(II);
                      DO JJ = 1 TO #VALUES(II);
                         PTR_TBL(JJ) = TEMP_PTR;
                         TEMP_PTR    = TEMP_PTR -> NEXT_PTR;
                      END;
                      DO JJ = 1 TO #VALUES(II) - 1;
                         DO KK = JJ + 1 TO #VALUES(II);
                            IF SUBSTR(PTR_TBL(JJ)
                                     -> VALUE,1,1)
                                  > SUBSTR(PTR_TBL(KK)
                                     -> VALUE,1,1)
                               THEN DO;
                                  TEMP_PTR    = PTR_TBL(JJ);
                                  PTR_TBL(JJ) = PTR_TBL(KK);
                                  PTR_TBL(KK) = TEMP_PTR;
                               END;
                         END;
                      END;
                      LINK_PTR(II) = PTR_TBL(1);
                      TEMP_PTR     = PTR_TBL(1);
                      DO JJ = 2 TO #VALUES(II);
                         TEMP_PTR -> NEXT_PTR = PTR_TBL(JJ);
                         TEMP_PTR             = PTR_TBL(JJ);
                      END;
                      TEMP_PTR -> NEXT_PTR = NULL;
                      FREE PTR_TBL;
                   END;
             END;
          END;
          ELSE IF PARM = 'OCCURS'
             THEN DO;
                DO II = 1 TO COL_PAIRS#;
                   ALLOC PTR_TBL(#VALUES(II));
                   TEMP_PTR   = LINK_PTR(II);
                   DO JJ = 1 TO #VALUES(II);
                      PTR_TBL(JJ) = TEMP_PTR;
                      TEMP_PTR    = TEMP_PTR -> NEXT_PTR;
                   END;
                   DO JJ = 1 TO #VALUES(II) - 1;
                      DO KK = JJ + 1 TO #VALUES(II);
                         IF PTR_TBL(JJ) -> OCCURS
                               < PTR_TBL(KK) -> OCCURS
                            THEN DO;
                              TEMP_PTR    = PTR_TBL(JJ);
                              PTR_TBL(JJ) = PTR_TBL(KK);
                              PTR_TBL(KK) = TEMP_PTR;
                            END;
                      END;
                   END;
                   LINK_PTR(II) = PTR_TBL(1);
                   TEMP_PTR     = PTR_TBL(1);
                   DO JJ = 2 TO #VALUES(II);
                      TEMP_PTR -> NEXT_PTR = PTR_TBL(JJ);
                      TEMP_PTR             = PTR_TBL(JJ);
                   END;
                   TEMP_PTR -> NEXT_PTR = NULL;
                   FREE PTR_TBL;
                END;
             END;


    PUT EDIT ('RECORD COUNT =', REC#)
             (SKIP(1), A, P'Z,ZZZ,ZZZ,ZZ9');

    DO II = 1 TO COL_PAIRS#;
       IF THRU_TYPE(II) = '-'
          THEN DO;
             TEMP_PTR = LINK_PTR(II);
             PUT EDIT ('COLUMN(S) ', FIRST_COL(II), '-',
                       SECOND_COL(II), ' CONTAIN ', #VALUES(II),
                       ' UNIQUE VALUE(S) -- ', DESC_COL(II))
                      (SKIP(2), A, P'ZZZZ9', A, P'ZZZZ9',
                       A, P'Z,ZZZ,ZZZ,ZZ9', A, A);
             DO WHILE ( TEMP_PTR ¬= NULL );
                IF VERIFY(SUBSTR(TEMP_PTR -> VALUE,1,LEN_COL(II)),
                      PRINTABLE_CHARACTERS) = 0
                   THEN DO;
                      PUT EDIT ('   ', TEMP_PTR -> OCCURS, ' >>',
                                SUBSTR(TEMP_PTR -> VALUE,1,LEN_COL(II)),
                                '<<')
                               (SKIP(1), A, P'Z,ZZZ,ZZZ,ZZ9', A, A, A);
                      TEMP_PTR = TEMP_PTR -> NEXT_PTR;
                   END;
                   ELSE DO;
                      PRINTABLE = SUBSTR(TEMP_PTR
                         -> VALUE,1,LEN_COL(II));
                      PRINTABLE = TRANSLATE(PRINTABLE,HEX_LINE1);
                      PUT EDIT ('                 >>',
                                PRINTABLE, '<<')
                               (SKIP(1), A, A, A);
                      PRINTABLE = SUBSTR(TEMP_PTR
                         -> VALUE,1,LEN_COL(II));
                      PRINTABLE = TRANSLATE(PRINTABLE,HEX_LINE2);
                      PUT EDIT ('   ', TEMP_PTR -> OCCURS, ' >>',
                                PRINTABLE, '<<')
                               (SKIP(1), A, P'Z,ZZZ,ZZZ,ZZ9', A, A, A);
                      TEMP_PTR = TEMP_PTR -> NEXT_PTR;
                   END;
             END;
          END;
          ELSE DO;
             TEMP_PTR = LINK_PTR(II);
             PUT EDIT ('COLUMN(S) ', FIRST_COL(II), ' THRU ',
                       SECOND_COL(II), ' HAVE ', #VALUES(II),
                       ' UNIQUE VALUE(S) -- ', DESC_COL(II))
                      (SKIP(2), A, P'ZZZZ9', A, P'ZZZZ9',
                       A, P'Z,ZZZ,ZZZ,ZZ9', A, A);
             DO WHILE ( TEMP_PTR ¬= NULL );
                IF VERIFY(SUBSTR(TEMP_PTR -> VALUE,1,1),
                      PRINTABLE_CHARACTERS) = 0
                   THEN DO;
                      PUT EDIT ('   ', TEMP_PTR -> OCCURS, ' >>',
                                SUBSTR(TEMP_PTR -> VALUE,1,1),
                                '<<')
                               (SKIP(1), A, P'Z,ZZZ,ZZZ,ZZ9', A, A, A);
                      TEMP_PTR = TEMP_PTR -> NEXT_PTR;
                   END;
                   ELSE DO;
                      PRINTABLE = SUBSTR(TEMP_PTR
                         -> VALUE,1,1);
                      PRINTABLE = TRANSLATE(PRINTABLE,HEX_LINE1);
                      PUT EDIT ('                 >>',
                                PRINTABLE, '<<')
                               (SKIP(1), A, A, A);
                      PRINTABLE = SUBSTR(TEMP_PTR
                         -> VALUE,1,1);
                      PRINTABLE = TRANSLATE(PRINTABLE,HEX_LINE2);
                      PUT EDIT ('   ', TEMP_PTR -> OCCURS, ' >>',
                                PRINTABLE, '<<')
                               (SKIP(1), A, P'Z,ZZZ,ZZZ,ZZ9', A, A, A);
                      TEMP_PTR = TEMP_PTR -> NEXT_PTR;
                   END;
             END;
          END;
    END;


    END VALUES;

//SYSUT1       DD       UNIT=VIO,
//             SPACE=(CYL,(05,02),,CONTIG)
//SYSPRINT     DD       SYSOUT=*
//SYSLIN       DD       DSN=&&LOADSET,DISP=(MOD,PASS),
//             UNIT=VIO,SPACE=(CYL,(05,02))
//***
//L          EXEC     PGM=HEWLKED,
//             PARM='XREF,LIST,LET,DCBS,AMODE=31,RMODE=ANY',
//             REGION=4M
//SYSLIB       DD       DISP=SHR,DSN=-YOUR-SCEELLED-
//SYSUT1       DD       UNIT=VIO,
//             SPACE=(CYL,(05,02),,CONTIG)
//SYSPRINT     DD       SYSOUT=*
//SYSLMOD      DD       DISP=SHR,DSN=-YOUR-LOADLIB-
//SYSLIN       DD       DSN=&&LOADSET,DISP=(OLD,DELETE)
//             DD       *
  SETSSI   00060600
  ENTRY    PLISTART
  NAME     VALUES(R)
//***
