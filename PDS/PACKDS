  /*-REXX----------------------- PACKDS -----------------------REXX-*/
  /*                                                                */
  /* Call TRSMAIN to Pack or Terse a dataset so that it is smaller  */
  /* and of fixed attributes prior to FTP'ing offsite or whatever.  */
  /*                                                                */
  /* Syntax:  %PACKDS input-DSN output-DSN          (Both optional) */
  /*                                                                */
  /*----------------------------------------------------------------*/

address TSO
"subcom ISPEXEC"; if RC=0 then SPF=1; else SPF=0
call   on error   name RXERROR         /* Activate command ERROR trap */
signal on syntax  name RXERROR                /* Activate SYNTAX trap */
signal on novalue name RXERROR               /* Activate NOVALUE trap */

arg INDS OUTDS                                 /* Retrieve input args */

if length(INDS) = 0 | length(OUTDS) = 0 then do
   if length(INDS) = 0 then CURPOS = 'INDS'; else CURPOS = 'OUTDS'
   OK = '8'
   address ISPEXEC "display panel(PACKDS)"   /* Display PACKDS panels */
   drop OK
   if RC <> 0 then exit 0
end

TP = sysvar('SYSPREF')                                  /* TSO Prefix */
if left(INDS,1) = "'" then do
   if right(INDS,1) = "'" then nop
   else INDS = INDS"'"
end
else if left(INDS,length(TP)+1) = TP||'.' then INDS = "'"INDS"'"

if left(OUTDS,1) = "'" then do
   if right(OUTDS,1) = "'" then nop
   else OUTDS = OUTDS"'"
end
else if left(OUTDS,length(TP)+1) = TP||'.' then OUTDS = "'"OUTDS"'"

X = msg("OFF")
OK = 'ALL'
"free dd(INFILE OUTFILE SYSPRINT)"              /* Free required DD's */
"DEL" OUTDS                                  /* Delete output dataset */
drop OK
X = msg("ON")

call LISTDSI INDS                /* Retrieve input dataset alloc info */

if SYSDSSMS = 'PDSE' | pos('LIBRARY',SYSDSSMS) > 0 then do
   say '-----------------------------------------------------'
   say 'PDSE datasets are not supported.'
   say
   say 'Please convert the dataset to a PDS and then pack it.'
   say '-----------------------------------------------------'
   ZISPFRC = 8
   if SPF then address ISPEXEC "vput (ZISPFRC) shared"
   exit ZISPFRC
end
SA = SYSALLOC                                      /* Space allocated */
SS = SYSSECONDS                             /* Secondary alloc amount */

if left(SYSUNITS,1) = "C" then do        /* If CYL, convert to tracks */
   SA = SYSALLOC * 15
   SS = SYSSECONDS * 15
   SU = "TR"
end
else SU = "TR"

"alloc dd(INFILE) shr reuse ds("INDS")" /* Allocate input/output dsets*/
"alloc dd(OUTFILE) ds("OUTDS") new catalog release reuse "||,
       "space("SA","SS")" SU "dsorg(PS) lrecl(1024) recfm(F B) "||,
       "blksize(0)"
"alloc dd(SYSPRINT) ds(*) reuse"     /* Allocate SYSPRINT to terminal */

                       /* Modify call stmt if TRSMAIN not in LINKLIST */
"call *(TRSMAIN) 'SPACK'"                             /* Call TRSMAIN */

"free dd(INFILE OUTFILE SYSPRINT)"                       /* Free DD's */

ZISPFRC = 0
if SPF then address ISPEXEC "vput (ZISPFRC) shared"
exit ZISPFRC                                            /* All Done ! */

/*====================================================================*/
/*                       SUBROUTINES/FUNCTIONS                        */
/*====================================================================*/

  /*---------------------------- RXERROR ---------------------------*/
  /*                                                                */
  /* REXX error condition handler. The routine gets control when a  */
  /* error condition is raised, and:                                */
  /*                                                                */
  /* A. Validates the error condition is OK and if so, returns      */
  /*    quietly, or                                                 */
  /*                                                                */
  /* B. Issues diagnostics messages about the error and where it    */
  /*    occurred, then exits passing the failed RC to the original  */
  /*    caller.                                                     */
  /*                                                                */
  /* To use this routine, code the following near the top of the    */
  /* exec:                                                          */
  /*                                                                */
  /*   call   on error   name RXERROR                               */
  /*   signal on syntax  name RXERROR                               */
  /*   signal on novalue name RXERROR                               */
  /*                                                                */
  /* For those Host commands where a failure is possible set the    */
  /* variable 'OK' to any Return Codes that are acceptable for the  */
  /* Host command.  For example:                                    */
  /*                                                                */
  /*   OK='8';   "host cmd"; drop OK <- RC 8 is acceptable.         */
  /*   OK='4 8'; "host cmd"; drop OK <- RC's 4 or 8 are acceptable. */
  /*   OK='ALL'; "host cmd"; drop OK <- ALL RC's are acceptable.    */
  /*                                                                */
  /*----------------------------------------------------------------*/
  /* NOTE: This subroutine does NOT use the PROCEDURE instruction,  */
  /*       so all variables created within it must be *hidden*, ie. */
  /*       unique.                                                  */
  /*----------------------------------------------------------------*/

RXERROR: trace N
address TSO
call   off error
signal off syntax
signal off novalue
_SIGL=SIGL
if symbol('RC') = 'VAR' then _RC = RC; else _RC = 'N/A'
"subcom ISPEXEC"; if RC=0 then _SPF=1; else _SPF=0
parse source . . _EXNAME .
_ERRORTXT = ''

if condition('I') = 'CALL' then ,
   if symbol('OK') = 'VAR' then ,
      if wordpos(_RC,OK)>0 | translate(OK)='ALL' then do
         call   on error   name RXERROR
         signal on syntax  name RXERROR
         signal on novalue name RXERROR
         drop ZERRLM ZERRMSG ZERRSM
         RC = _RC
         return
      end
      else nop

select
   when pos(condition('C'),'ERROR FAILURE') > 0 then do
      _CMD = strip(strip(word(condition('D'),1),'B','"'),'B',"'")
      _ERRORTXT = '(Host command: '_CMD')'
      say 'RXERROR-> RC: '_RC' '_ERRORTXT' at line: '_SIGL ||,
          ' in EXEC: '_EXNAME
      if _SIGL <= sourceline() then do
         say ' '
         say 'RXERROR-> Line '_SIGL': 'strip(sourceline(_SIGL))
      end
      if datatype(_RC,'N') then ,
         if abs(_RC) > 7 then ZISPFRC = abs(_RC)
         else ZISPFRC = 8
      else ZISPFRC = 8
      if _SPF then address ISPEXEC "vput (ZISPFRC) shared"
      exit ZISPFRC
   end

   when condition('C') = 'SYNTAX' then do
      if datatype(_RC,'N') = 1 then ,
         if (_RC >= 0 & _RC < 100) then _ERRORTXT = '('errortext(_RC)')'
         else nop
      say 'RXERROR-> RC: '_RC' '_ERRORTXT' at line: '_SIGL ||,
          ' in EXEC: '_EXNAME
      if _SIGL <= sourceline() then do
         say ' '
         say 'RXERROR-> Line '_SIGL': 'strip(sourceline(_SIGL))
      end
      if datatype(_RC,'N') then ,
         if abs(_RC) > 7 then ZISPFRC = abs(_RC)
         else ZISPFRC = 8
      else ZISPFRC = 8
      if _SPF then address ISPEXEC "vput (ZISPFRC) shared"
      exit ZISPFRC
   end

   when condition('C') = 'NOVALUE' then do
      _ERRORTXT = '(No value for variable: 'condition('D')')'
      say 'RXERROR-> RC: '_RC' '_ERRORTXT' at line: '_SIGL ||,
          ' in EXEC: '_EXNAME
      if _SIGL <= sourceline() then do
         say ' '
         say "RXERROR-> Line "_SIGL": "strip(sourceline(_SIGL))
      end
      if datatype(_RC,'N') then ,
         if abs(_RC) > 7 then ZISPFRC = abs(_RC)
         else ZISPFRC = 8
      else ZISPFRC = 8
      if _SPF then address ISPEXEC "vput (ZISPFRC) shared"
      exit ZISPFRC
   end

   otherwise condition('C') <> '' then do
      _ERRORTXT = '(Condition='condition('C')', Description=' ||,
                  condition('D')')'
      say 'RXERROR-> RC: '_RC' '_ERRORTXT' at line: '_SIGL ||,
          ' in EXEC: '_EXNAME
      if _SIGL <= sourceline() then do
         say ' '
         say "RXERROR-> Line "_SIGL": "strip(sourceline(_SIGL))
      end
      if datatype(_RC,'N') then ,
         if abs(_RC) > 7 then ZISPFRC = abs(_RC)
         else ZISPFRC = 8
      else ZISPFRC = 8
      if _SPF then address ISPEXEC "vput (ZISPFRC) shared"
      exit ZISPFRC
   end
end
ZISPFRC = 8                                  /* Should NEVER get here */
if _SPF then address ISPEXEC "vput (ZISPFRC) shared"
exit ZISPFRC                                      /* but just case... */
