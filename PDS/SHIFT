/**  REXX -- SHIFT COLUMNS WITHIN BOUNDS  **/
   RTN = 0
   SAVEMSG = MSG()
   IF SAVEMSG = 'OFF' THEN X = MSG("ON")
   X = ADDRESS()
   SUBCOM ISPEXEC
   IF RC <> 0 THEN DO
      SAY 'SHIFT MUST BE RUN UNDER ISPF EDIT!'
      SIGNAL EOJ
   END
   SUBCOM ISREDIT
   IF RC = 0 THEN DO
      UMODE = 'ISREDIT'
      ADDRESS ISPEXEC "CONTROL ERRORS RETURN"
      ADDRESS ISREDIT "ISREDIT MACRO (PARMS)"
      IF RC = 0 THEN DO
         ADDRESS ISREDIT "ISREDIT ("DSN") = DATASET"
      END
   END
   IF DSN = 'DSN' THEN DO
      SAY SHIFT 'EDIT MACRO CAN ONLY BE RUN UNDER ISPF EDIT',
         'WITH NO PENDING EDIT COMMANDS!'
      SIGNAL EOJ
   END

   ERRORMSG = ""
   MESG     = ""

   PARMS     = TRANSLATE(PARMS)
   LBL1      = ""
   LBL2      = ""
   DIRECTION = ""
   TYPE      = ""
   LINEEXCL  = ""
   NUMCOLS   = ""
   DO II = 1 TO 20
      TOKEN = WORD(PARMS,II)
      IF TOKEN = "" THEN LEAVE
      IF SUBSTR(TOKEN,1,1) = "." THEN DO
         IF LBL1 = "" THEN LBL1 = TOKEN
         ELSE IF LBL2 = "" THEN LBL2 = TOKEN
            ELSE DO
               ZEDSMSG = "BAD LABEL"
               ZEDLMSG = "TOO MANY LABELS --" LBL1 LBL2 TOKEN
               ADDRESS "ISPEXEC" "SETMSG MSG(ISRZ000)"
               EXIT 8
            END
      END
      ELSE DO
         IF DATATYPE(TOKEN,'W')  THEN DO
            IF NUMCOLS = "" THEN NUMCOLS = TOKEN
            ELSE IF NUMCOLS <> TOKEN THEN DO
               ZEDSMSG = "BAD # COLS"
               ZEDLMSG = "TOO MANY SHIFT COLUMNS --" NUMCOLS TOKEN
               ADDRESS "ISPEXEC" "SETMSG MSG(ISRZ000)"
               EXIT 8
            END
         END
         ELSE IF TOKEN = 'L' | TOKEN = 'LEFT' THEN DO
            IF DIRECTION = "" THEN DIRECTION = TOKEN
            ELSE IF DIRECTION <> TOKEN THEN DO
               ZEDSMSG = "BAD DIRECTION"
               ZEDLMSG = "TOO MANY DIRECTIONS ENTERED" DIRECTION TOKEN
               ADDRESS "ISPEXEC" "SETMSG MSG(ISRZ000)"
               EXIT 8
            END
         END
         ELSE IF TOKEN = 'R' | TOKEN = 'RIGHT' THEN DO
            IF DIRECTION = "" THEN DIRECTION = TOKEN
            ELSE IF DIRECTION <> TOKEN THEN DO
               ZEDSMSG = "BAD DIRECTION"
               ZEDLMSG = "TOO MANY DIRECTIONS ENTERED" DIRECTION TOKEN
               ADDRESS "ISPEXEC" "SETMSG MSG(ISRZ000)"
               EXIT 8
            END
         END
         ELSE IF TOKEN = 'X' THEN DO
            IF LINEEXCL = "" THEN LINEEXCL = TOKEN
            ELSE IF LINEEXCL <> TOKEN THEN DO
               ZEDSMSG = "BAD EXCL OPTION"
               ZEDLMSG = "TOO MANY X|NX ENTERED" LINEEXCL TOKEN
               ADDRESS "ISPEXEC" "SETMSG MSG(ISRZ000)"
               EXIT 8
            END
         END
         ELSE IF TOKEN = 'NX' THEN DO
            IF LINEEXCL = "" THEN LINEEXCL = TOKEN
            ELSE IF LINEEXCL <> TOKEN THEN DO
               ZEDSMSG = "BAD EXCL OPTION"
               ZEDLMSG = "TOO MANY X|NX ENTERED" LINEEXCL TOKEN
               ADDRESS "ISPEXEC" "SETMSG MSG(ISRZ000)"
               EXIT 8
            END
         END
         ELSE IF TOKEN = 'MAX' THEN DO
            IF TYPE = "" THEN TYPE = TOKEN
            ELSE IF TYPE <> TOKEN THEN DO
               ZEDSMSG = "BAD TYPE"
               ZEDLMSG = "TOO MANY TYPES ENTERED" TYPE TOKEN
               ADDRESS "ISPEXEC" "SETMSG MSG(ISRZ000)"
               EXIT 8
            END
         END
         ELSE IF TOKEN = 'LEAVE' THEN DO
            IF TYPE = "" THEN TYPE = TOKEN
            ELSE IF TYPE <> TOKEN THEN DO
               ZEDSMSG = "BAD TYPE"
               ZEDLMSG = "TOO MANY TYPES ENTERED" TYPE TOKEN
               ADDRESS "ISPEXEC" "SETMSG MSG(ISRZ000)"
               EXIT 8
            END
         END
         ELSE DO
            ZEDSMSG = "?"TOKEN"?"
            ZEDLMSG = "UNKNOWN OPTION SPECIFIED" TOKEN
            ADDRESS "ISPEXEC" "SETMSG MSG(ISRZ000)"
            EXIT 8
         END
      END
   END II

   IF LBL1 <> ""  &  LBL2 = ""  THEN LBL2 = LBL1
   IF NUMCOLS = '' THEN NUMCOLS = 1
   IF DIRECTION = ''  THEN DO
      MESG = 'DIRECTION MUST BE SUPPLIED!'
      SIGNAL ERROR
   END
   IF LBL1 <> '' THEN DO
      "ISREDIT L &LBL1"
      IF RC <> 0 THEN DO
         MESG = "LABEL" LBL1 "NOT FOUND"
         SIGNAL ERROR
      END
   END
   IF LBL2 <> '' THEN DO
      "ISREDIT L &LBL2"
      IF RC <> 0 THEN DO
         MESG = "LABEL" LBL2 "NOT FOUND"
         SIGNAL ERROR
      END
   END

   "ISREDIT ("SAVLINE","SAVCOL") = CURSOR "
   "ISREDIT ("LEFTB","RIGHTB")   = BOUNDS "
   IF NUMCOLS > (RIGHTB-LEFTB+1) THEN NUMCOLS = RIGHTB-LEFTB+1
   "ISREDIT (END)                = LINENUM .ZLAST"
   START = 1
   IF LBL1 <> '' THEN "ISREDIT (START) = LINENUM &LBL1"
   IF LBL2 <> '' THEN "ISREDIT (END) = LINENUM &LBL2"
   ELSE LBL2 = LBL1
   IF START > END THEN DO
      WST = START
      START = END
      END = WST
   END

   DO PNTR =  START  TO  END  BY 1
      "ISREDIT (LINESTAT) = XSTATUS" PNTR
      IF LINEEXCL = '' | LINESTAT = LINEEXCL THEN DO
         "ISREDIT (REC) = LINE &PNTR"
         IF SUBSTR(DIRECTION,1,1) = 'L' THEN DO
            IF TYPE = ''
               THEN REC = OVERLAY(SUBSTR(REC,LEFTB+NUMCOLS,
                  ,RIGHTB-LEFTB+1-NUMCOLS),
                     ,REC,LEFTB,RIGHTB-LEFTB+1,' ')
            ELSE IF TYPE = 'MAX' THEN DO
               XX = VERIFY(SUBSTR(REC,LEFTB,NUMCOLS),' ')
               IF XX = 0
                     THEN REC = OVERLAY(SUBSTR(REC,LEFTB+NUMCOLS,
                        ,RIGHTB-LEFTB+1-NUMCOLS),
                           ,REC,LEFTB,RIGHTB-LEFTB+1,' ')
                     ELSE REC = OVERLAY(SUBSTR(REC,LEFTB+XX-1,
                        ,RIGHTB-LEFTB+1-XX),
                           ,REC,LEFTB,RIGHTB-LEFTB+1,' ')
            END
            ELSE IF VERIFY(SUBSTR(REC,LEFTB,NUMCOLS),' ') = 0
               THEN REC = OVERLAY(SUBSTR(REC,LEFTB+NUMCOLS,
                  ,RIGHTB-LEFTB+1-NUMCOLS),
                     ,REC,LEFTB,RIGHTB-LEFTB+1,' ')
         END
         ELSE DO
            IF TYPE = ''
               THEN REC = OVERLAY(COPIES(' ',NUMCOLS),
                  || SUBSTR(REC,LEFTB, RIGHTB-LEFTB+1),
                        ,REC,LEFTB,RIGHTB-LEFTB+1)
               ELSE IF TYPE = 'MAX' THEN DO
                  DO XX = 0 TO NUMCOLS-1,
                     WHILE SUBSTR(REC,RIGHTB-XX,1) = ' '
                  END
                  REC = OVERLAY(COPIES(' ',XX),
                     || SUBSTR(REC,LEFTB,RIGHTB-LEFTB+1),
                           ,REC,LEFTB,RIGHTB-LEFTB+1)
               END
               ELSE IF SUBSTR(REC,RIGHTB-NUMCOLS+1,NUMCOLS) = ' '
                  THEN REC = OVERLAY(COPIES(' ',NUMCOLS),
                     || SUBSTR(REC,LEFTB,RIGHTB-LEFTB+1),
                           ,REC,LEFTB,RIGHTB-LEFTB+1)
         END
         "ISREDIT LINE &PNTR = &STR(REC)"
      END
   END

   "ISREDIT LOCATE" START
   SIGNAL EOJ

SETMSG:
   PARSE ARG ZERRHM ZERRALRM ZERRSM'$'ZERRLM
   ADDRESS ISPEXEC 'SETMSG MSG(ISRZ002) COND'
   RETURN

ERROR:
   IF MESG <> '' THEN DO
      RTN = 20
      ERRORMSG = '===>' MESG
   END
   CALL DISPDOC
   SIGNAL EOJ

EOJ:
   X = MSG(SAVEMSG)
   RETURN RTN

DISPDOC:
   ADDRESS TSO "CLEAR"
   SAY "SHIFT - SHIFT COLUMNS LEFT OR RIGHT WITHIN BOUNDS  "
   SAY
   SAY ERRORMSG
   SAY
   SAY " FORMAT "
   SAY "    SHIFT  LEFT|RIGHT  ( #COLUMNS )                "
   SAY "           ( X|NX )    ( .A .B )    ( MAX|LEAVE )  "
   SAY
   SAY "       DIRECTION IS REQUIRED. LEFT MAY BE ENTERED AS 'L'  "
   SAY "       AND RIGHT AS 'R'. # COLUMNS DEFAULTS TO 1. LABEL   "
   SAY "       RANGES ARE OPTIONAL. X OR NX MAY BE SPECIFIED TO   "
   SAY "       RESTRICT THE SHIFT TO EXCLUDED OR UNEXCLUDED LINES "
   SAY "       ONLY (DEFAULT IS ALL LINES). 'MAX' IMPLIES THAT THE"
   SAY "       SHIFT WILL ONLY CUT OFF BLANKS, STOPPING AT NON-   "
   SAY "       BLANKS; 'LEAVE' THAT A SHIFT THAT WOULD TRUNCATE   "
   SAY "       NON BLANKS WILL NOT BE DONE AT ALL. FULL TRUNCATION"
   SAY "       IS THE DEFAULT. OPTIONS MAY BE INTERMIXED.         "
   SAY
   SAY " EXAMPLE "
   SAY "    SHIFT  7  LEFT  .II .JJ                          "
   SAY "       SHIFTS LEFT ALL DATA BETWEEN .II AND .JJ      "
   SAY "       7 COLUMNS, TRUNCATING AS NECESSARY, WITHIN    "
   SAY "       THE CURRENT BOUNDS.                           "
   RETURN
