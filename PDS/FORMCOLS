/**  REXX -- FORMAT COLUMNS ONTO SAME OR OTHER COLUMNS  **/
   RTN = 0
   SAVEMSG = MSG()
   IF SAVEMSG = 'OFF' THEN X = MSG("ON")
   X = ADDRESS()
   SUBCOM ISPEXEC
   IF RC <> 0 THEN DO
      SAY 'FORMCOLS MUST BE RUN UNDER ISPF EDIT!'
      SIGNAL EOJ
   END
   SUBCOM ISREDIT
   IF RC = 0 THEN DO
      UMODE = 'ISREDIT'
      ADDRESS ISPEXEC "CONTROL ERRORS RETURN"
      ADDRESS ISREDIT "ISREDIT MACRO (PARMS)"
      IF RC = 0 THEN DO
         ADDRESS ISREDIT "ISREDIT ("DSN") = DATASET"
      END
   END
   IF DSN = 'DSN' THEN DO
      SAY FORMCOLS 'EDIT MACRO CAN ONLY BE RUN UNDER ISPF EDIT',
         'WITH NO PENDING EDIT COMMANDS!'
      SIGNAL EOJ
   END

   ERRORMSG = ''
   MESG = ''
   IF SUBSTR(PARMS,1,1) = "'"
      THEN DO
         PARMS  = SUBSTR(PARMS,2)
         QLOC   = INDEX(PARMS,"'")
         FORMAT = SUBSTR(PARMS,1,QLOC-1)
         PARMS  = SUBSTR(PARMS,QLOC+1)
      END
      ELSE DO
         IF SUBSTR(PARMS,1,1) = '"'
            THEN DO
               PARMS  = SUBSTR(PARMS,2)
               QLOC   = INDEX(PARMS,'"')
               FORMAT = SUBSTR(PARMS,1,QLOC-1)
               PARMS  = SUBSTR(PARMS,QLOC+1)
            END
            ELSE DO
               FORMAT = WORD(PARMS,1)
               PARMS = SUBSTR(PARMS,LENGTH(FORMAT)+1)
            END
      END
   FRMLEFT  = WORD(PARMS,1)
   FRMRIGHT = WORD(PARMS,2)
   IF FORMAT = '' | FRMLEFT = ''  |  FRMRIGHT = ''  THEN DO
      MESG = 'MANDATORY PARAMETERS ARE MISSING!'
      SIGNAL ERROR
   END
   FORMAT = TRANSLATE(FORMAT)
   IF ¬DATATYPE(FRMLEFT,'W')  |  FRMLEFT = 0  THEN DO
      MESG = "'"FRMLEFT"' VALUE OF FROM-LEFT-COL IS INVALID!"
      SIGNAL ERROR
   END
   IF ¬DATATYPE(FRMRIGHT,'W')  |  FRMRIGHT = 0  THEN DO
      MESG = "'"FRMRIGHT"' VALUE OF FROM-RIGHT-COL IS INVALID!"
      SIGNAL ERROR
   END
   IF FRMLEFT > FRMRIGHT THEN DO
      MESG = "FROM-LEFT-COL "FRMLEFT" IS > THAN FROM-RIGHT-COL "FRMRIGHT
      SIGNAL ERROR
   END

   PARMS   = TRANSLATE(PARMS)
   LBL1    = ""
   LBL2    = ""
   TOLEFT  = ""
   TORIGHT = ""
   DO II = 3 TO 6;
      TOKEN = WORD(PARMS,II)
      IF TOKEN = "" THEN LEAVE
      IF SUBSTR(TOKEN,1,1) = "." THEN DO
         IF LBL1 = "" THEN LBL1 = TOKEN
         ELSE IF LBL2 = "" THEN LBL2 = TOKEN
            ELSE DO
               ZEDSMSG = ".LABEL RC=8"
               ZEDLMSG = "TOO MANY LABELS --" LBL1 LBL2 TOKEN
               ADDRESS "ISPEXEC" "SETMSG MSG(ISRZ000)"
               EXIT 8
            END
      END
      ELSE DO
         IF DATATYPE(TOKEN,'W')  THEN DO
            IF TOLEFT = "" THEN TOLEFT = TOKEN
            ELSE IF TORIGHT = "" THEN TORIGHT = TOKEN
               ELSE DO
                  ZEDSMSG = ".LABEL RC=8"
                  ZEDLMSG = "TOO MANY COLUMNS --" TOLEFT TORIGHT TOKEN
                  ADDRESS "ISPEXEC" "SETMSG MSG(ISRZ000)"
                  EXIT 8
               END
         END
      END
   END II

   IF LBL1 <> ""  &  LBL2 = ""  THEN LBL2 = LBL1
   IF TOLEFT <> "" AND TORIGHT = "" THEN TORIGHT = TOLEFT
   IF TOLEFT = "" THEN DO
      TOLEFT  = FRMLEFT
      TORIGHT = FRMRIGHT
   END

   IF ¬DATATYPE(TOLEFT,'W')  |  TOLEFT=0  THEN DO
      MESG = "'"TOLEFT"' VALUE OF TO-LEFT-COL IS INVALID!"
      SIGNAL ERROR
   END
   IF ¬DATATYPE(TORIGHT,'W')  |  TORIGHT=0  THEN DO
      MESG = "'"TORIGHT"' VALUE OF TO-RIGHT-COL IS INVALID!"
      SIGNAL ERROR
   END
   IF TOLEFT > TORIGHT THEN DO
      MESG = "TO-LEFT-COL "TOLEFT" IS GREATER THAN TO-RIGHT-COL "TORIGHT
      SIGNAL ERROR
   END
   "ISREDIT ("LRECL") = LRECL "
   IF TORIGHT > LRECL THEN DO
      MESG = "TO-RIGHT COLUMN IS GREATER THAN RECORD SIZE ("LRECL")"
      SIGNAL ERROR
   END
   FLEN = FRMRIGHT - FRMLEFT + 1
   TLEN = TORIGHT - TOLEFT + 1

   IF LBL1 <> '' THEN DO
      "ISREDIT L &LBL1"
      IF RC <> 0 THEN DO
         MESG = "LABEL" LBL1 "NOT FOUND"
         SIGNAL ERROR
      END
   END
   IF LBL2 <> '' THEN DO
      "ISREDIT L &LBL2"
      IF RC <> 0 THEN DO
         MESG = "LABEL" LBL2 "NOT FOUND"
         SIGNAL ERROR
      END
   END
   "ISREDIT ("LRECL") = LRECL "
   "ISREDIT ("SAVLINE","SAVCOL") = CURSOR "
   "ISREDIT ("ANUM") = AUTONUM "
   "ISREDIT (END) = LINENUM .ZLAST"

   START = 1
   IF LBL1 <> '' THEN "ISREDIT (START) = LINENUM &LBL1"
   IF LBL2 <> '' THEN "ISREDIT (END) = LINENUM &LBL2"
   ELSE LBL2 = LBL1

   IF START > END THEN DO
      WST = START
      START = END
      END = WST
   END

   TOT  = 0
   OK   = 0
   OVFL = 0
   DO PNTR =  START  TO  END  BY 1
      TOT = TOT + 1
      OVERFLOW = 'NO'
      "ISREDIT (RECORD) = LINE &PNTR"
      INPUT = SUBSTR(RECORD,FRMLEFT,FLEN)
                                     /* DETERMINE SIGN IF ANY      */
      II = INDEX(INPUT,'+')
      IF II > 0
         THEN DO
            INPUT = SUBSTR(INPUT,1,II-1) || SUBSTR(INPUT,II+1)
            SIGN = '+'
         END
         ELSE DO
            II = INDEX(INPUT,'-')
            IF II > 0
               THEN DO
                  INPUT = SUBSTR(INPUT,1,II-1) || SUBSTR(INPUT,II+1)
                  SIGN = '-'
               END
               ELSE DO
                  DO II =  LENGTH(INPUT)  TO  1  BY  -1,
                        WHILE ( SUBSTR(INPUT,II,1) = ' ' )
                  END
                  IF SUBSTR(INPUT,II,1) = '.' THEN II = II - 1
                  IF VERIFY(SUBSTR(INPUT,II,1),'{0A1B2C3D4E5F6G7H8I9')=0
                     THEN SIGN = '+'
                     ELSE DO
                        IF VERIFY(SUBSTR(INPUT,II,1),'}JKLMNOPQR')=0
                           THEN SIGN = '-'
                           ELSE SIGN = '+'
                     END
                  XX = TRANSLATE(SUBSTR(INPUT,II,1),
                      ,'000111222333444555666777888999',
                      ,'{0}A1JB2KC3LD4ME5NF6OG7PH8QI9R')
                  INPUT = OVERLAY(XX,INPUT,II,1)
               END
         END
                                     /* ELIMINATE INPUT COMMAS,    */
                                     /* STRIP BLANKS AND ZEROS     */
      INPUT = STRIP(INPUT,,' ')
      INPUT = STRIP(INPUT,L,'0')
      II = INDEX(INPUT,',')
      DO WHILE II > 0
         INPUT = SUBSTR(INPUT,1,II-1) || SUBSTR(INPUT,II+1)
         II = INDEX(INPUT,',')
      END
                                     /* SYNCH DECIMAL POINTS       */
      II = INDEX(INPUT,'.')
      OUTPUT = FORMAT
      JJ = INDEX(OUTPUT,'.')
      IF II > 0 THEN INPUT = STRIP(INPUT,T,'0')
                                     /* PROCESS VALID INPUT DATA   */
      IF VERIFY(INPUT,'.0123456789') = 0
         THEN DO
            OK = OK + 1
            IF II = 0 & JJ = 0
                                     /* NEITHER HAS A DECIMAL PT   */
               THEN CALL NEITHER
               ELSE IF II > 0 & JJ > 0
                                     /* BOTH HAVE DECIMAL POINTS   */
                  THEN CALL BOTH
                                     /* FORMAT HAS A DECIMAL PT    */
                  ELSE IF II = 0 & JJ > 0
                     THEN CALL ONLYOUT
                                     /* DATA ONLY HAS A DECIMAL PT */
                     ELSE CALL ONLYIN
            IF LENGTH(OUTPUT) > TLEN THEN OVERFLOW = 'YES'
            OUTPUT = RIGHT(OUTPUT,TLEN)
            RECORD = OVERLAY(OUTPUT,RECORD,TOLEFT,TLEN)
            "ISREDIT LINE &PNTR = &STR(RECORD)"
            IF OVERFLOW = 'YES' THEN OVFL = OVFL + 1
         END
   END

   STR = OK || '/' || OVFL || '/' || TOT
   CALL SETMSG '* NO ' STR 'FORMATTED $VALID OVER OVERFLOW OVER TOTAL'
   "ISREDIT LOCATE" START
   "ISREDIT AUTONUM =" ANUM
   SIGNAL EOJ

SETMSG:
   PARSE ARG ZERRHM ZERRALRM ZERRSM'$'ZERRLM
   ADDRESS ISPEXEC 'SETMSG MSG(ISRZ002) COND'
   RETURN

NEITHER:
   KK = LENGTH(INPUT)
   DO LL = LENGTH(OUTPUT) TO 1 BY -1
      IF SUBSTR(OUTPUT,LL,1) = '9'
         THEN DO
            IF KK > 0 THEN DO
               OUTPUT=OVERLAY(SUBSTR(INPUT,KK,1),OUTPUT,LL,1)
               KK = KK - 1
            END
            ELSE OUTPUT=OVERLAY('0',OUTPUT,LL,1)
         END
      ELSE IF SUBSTR(OUTPUT,LL,1) = 'Z'
         THEN DO
            IF KK > 0 THEN DO
               OUTPUT=OVERLAY(SUBSTR(INPUT,KK,1),OUTPUT,LL,1)
               KK = KK - 1
            END
            ELSE OUTPUT=OVERLAY(' ',OUTPUT,LL,1)
         END
      ELSE IF SUBSTR(OUTPUT,LL,1) = ','
         THEN DO
            IF KK <= 0 THEN DO
               IF ( LL > 1 & INDEX(SUBSTR(OUTPUT,1,LL-1),'9') = 0 ),
                     | LL = 1 THEN OUTPUT=OVERLAY(' ',OUTPUT,LL,1)
            END
         END
      ELSE IF SUBSTR(OUTPUT,LL,1) = '+'
         THEN DO
            OUTPUT = OVERLAY(SIGN,OUTPUT,LL,1)
         END
      ELSE IF SUBSTR(OUTPUT,LL,1) = '-'
         THEN DO
            IF SIGN = '-' THEN OUTPUT = OVERLAY(SIGN,OUTPUT,LL,1)
            ELSE OUTPUT = OVERLAY(' ',OUTPUT,LL,1)
         END
   END
   IF KK > 0 THEN OVERFLOW = 'YES'
   RETURN

BOTH:
   MM = II + 1
   DO LL = (JJ+1) TO LENGTH(OUTPUT)
      IF SUBSTR(OUTPUT,LL,1) = '9'
         THEN DO
            IF MM <= LENGTH(INPUT) THEN DO
               OUTPUT=OVERLAY(SUBSTR(INPUT,MM,1),OUTPUT,LL,1)
               MM = MM + 1
            END
            ELSE OUTPUT=OVERLAY('0',OUTPUT,LL,1)
         END
      ELSE IF SUBSTR(OUTPUT,LL,1) = 'Z'
         THEN DO
            IF MM <= LENGTH(INPUT) THEN DO
               OUTPUT=OVERLAY(SUBSTR(INPUT,MM,1),OUTPUT,LL,1)
               MM = MM + 1
            END
            ELSE OUTPUT=OVERLAY(' ',OUTPUT,LL,1)
         END
      ELSE IF SUBSTR(OUTPUT,LL,1) = '+'
         THEN DO
            OUTPUT = OVERLAY(SIGN,OUTPUT,LL,1)
         END
      ELSE IF SUBSTR(OUTPUT,LL,1) = '-'
         THEN DO
            IF SIGN = '-' THEN OUTPUT = OVERLAY(SIGN,OUTPUT,LL,1)
            ELSE OUTPUT = OVERLAY(' ',OUTPUT,LL,1)
         END
   END

   KK = II - 1
   DO LL = (JJ-1) TO 1 BY -1
      IF SUBSTR(OUTPUT,LL,1) = '9'
         THEN DO
            IF KK > 0 THEN DO
               OUTPUT=OVERLAY(SUBSTR(INPUT,KK,1),OUTPUT,LL,1)
               KK = KK - 1
            END
            ELSE OUTPUT=OVERLAY('0',OUTPUT,LL,1)
         END
      ELSE IF SUBSTR(OUTPUT,LL,1) = 'Z'
         THEN DO
            IF KK > 0 THEN DO
               OUTPUT=OVERLAY(SUBSTR(INPUT,KK,1),OUTPUT,LL,1)
               KK = KK - 1
            END
            ELSE OUTPUT=OVERLAY(' ',OUTPUT,LL,1)
         END
      ELSE IF SUBSTR(OUTPUT,LL,1) = ','
         THEN DO
            IF KK <= 0 THEN DO
               IF ( LL > 1 & INDEX(SUBSTR(OUTPUT,1,LL-1),'9') = 0 ),
                     | LL = 1 THEN OUTPUT=OVERLAY(' ',OUTPUT,LL,1)
            END
         END
      ELSE IF SUBSTR(OUTPUT,LL,1) = '+'
         THEN DO
            OUTPUT = OVERLAY(SIGN,OUTPUT,LL,1)
         END
      ELSE IF SUBSTR(OUTPUT,LL,1) = '-'
         THEN DO
            IF SIGN = '-' THEN OUTPUT = OVERLAY(SIGN,OUTPUT,LL,1)
            ELSE OUTPUT = OVERLAY(' ',OUTPUT,LL,1)
         END
   END
   IF KK > 0 | MM <= LENGTH(INPUT) THEN OVERFLOW = 'YES'
   RETURN

ONLYIN:
   KK = II - 1
   DO LL = LENGTH(OUTPUT) TO 1 BY -1
      IF SUBSTR(OUTPUT,LL,1) = '9'
         THEN DO
            IF KK > 0 THEN DO
               OUTPUT=OVERLAY(SUBSTR(INPUT,KK,1),OUTPUT,LL,1)
               KK = KK - 1
            END
            ELSE OUTPUT=OVERLAY('0',OUTPUT,LL,1)
         END
      ELSE IF SUBSTR(OUTPUT,LL,1) = 'Z'
         THEN DO
            IF KK > 0 THEN DO
               OUTPUT=OVERLAY(SUBSTR(INPUT,KK,1),OUTPUT,LL,1)
               KK = KK - 1
            END
            ELSE OUTPUT=OVERLAY(' ',OUTPUT,LL,1)
         END
      ELSE IF SUBSTR(OUTPUT,LL,1) = ','
         THEN DO
            IF KK <= 0 THEN DO
               IF ( LL > 1 & INDEX(SUBSTR(OUTPUT,1,LL-1),'9') = 0 ),
                     | LL = 1 THEN OUTPUT=OVERLAY(' ',OUTPUT,LL,1)
            END
         END
      ELSE IF SUBSTR(OUTPUT,LL,1) = '+'
         THEN DO
            OUTPUT = OVERLAY(SIGN,OUTPUT,LL,1)
         END
      ELSE IF SUBSTR(OUTPUT,LL,1) = '-'
         THEN DO
            IF SIGN = '-' THEN OUTPUT = OVERLAY(SIGN,OUTPUT,LL,1)
            ELSE OUTPUT = OVERLAY(' ',OUTPUT,LL,1)
         END
   END
   IF KK > 0 | SUBSTR(INPUT,II+1) \= '' THEN OVERFLOW = 'YES'
   RETURN

ONLYOUT:
   DO LL = (JJ+1) TO LENGTH(OUTPUT)
      IF SUBSTR(OUTPUT,LL,1) = '9'
         THEN OUTPUT=OVERLAY('0',OUTPUT,LL,1)
      ELSE IF SUBSTR(OUTPUT,LL,1) = 'Z'
         THEN OUTPUT=OVERLAY(' ',OUTPUT,LL,1)
      ELSE IF SUBSTR(OUTPUT,LL,1) = '+'
         THEN OUTPUT = OVERLAY(SIGN,OUTPUT,LL,1)
      ELSE IF SUBSTR(OUTPUT,LL,1) = '-'
         THEN DO
            IF SIGN = '-' THEN OUTPUT = OVERLAY(SIGN,OUTPUT,LL,1)
            ELSE OUTPUT = OVERLAY(' ',OUTPUT,LL,1)
         END
   END

   KK = LENGTH(INPUT)
   DO LL = LENGTH(OUTPUT) TO 1 BY -1
      IF SUBSTR(OUTPUT,LL,1) = '9'
         THEN DO
            IF KK > 0 THEN DO
               OUTPUT=OVERLAY(SUBSTR(INPUT,KK,1),OUTPUT,LL,1)
               KK = KK - 1
            END
            ELSE OUTPUT=OVERLAY('0',OUTPUT,LL,1)
         END
      ELSE IF SUBSTR(OUTPUT,LL,1) = 'Z'
         THEN DO
            IF KK > 0 THEN DO
               OUTPUT=OVERLAY(SUBSTR(INPUT,KK,1),OUTPUT,LL,1)
               KK = KK - 1
            END
            ELSE OUTPUT=OVERLAY(' ',OUTPUT,LL,1)
         END
      ELSE IF SUBSTR(OUTPUT,LL,1) = ','
         THEN DO
            IF KK <= 0 THEN DO
               IF ( LL > 1 & INDEX(SUBSTR(OUTPUT,1,LL-1),'9') = 0 ),
                     | LL = 1 THEN OUTPUT=OVERLAY(' ',OUTPUT,LL,1)
            END
         END
      ELSE IF SUBSTR(OUTPUT,LL,1) = '+'
         THEN DO
            OUTPUT = OVERLAY(SIGN,OUTPUT,LL,1)
         END
      ELSE IF SUBSTR(OUTPUT,LL,1) = '-'
         THEN DO
            IF SIGN = '-' THEN OUTPUT = OVERLAY(SIGN,OUTPUT,LL,1)
            ELSE OUTPUT = OVERLAY(' ',OUTPUT,LL,1)
         END
   END
   IF KK > 0 THEN OVERFLOW = 'YES'
   RETURN

ERROR:
   IF MESG <> '' THEN DO
      RTN = 20
      ERRORMSG = '===>' MESG
   END
   CALL DISPDOC
   SIGNAL EOJ

EOJ:
   X = MSG(SAVEMSG)
   RETURN RTN

DISPDOC:
   ADDRESS TSO "CLEAR"
   SAY "FORMCOLS - FORMAT ARITHMETIC VALUES "
   SAY
   SAY ERRORMSG
   SAY
   SAY " FORMAT "
   SAY "    FORMCOLS  FORMAT  FROM-COL1 FROM-COL2          "
   SAY "              (TO-COL1 TO-COL2)  (.A .B)           "
   SAY
   SAY "       FROM-COLUMN'S AND FORMAT ARE REQUIRED. THE TO-     "
   SAY "       COLUMNS WILL DEFAULT TO THE FROM-COLUMNS.  LABEL   "
   SAY "       RANGES ARE OPTIONAL. FORMAT MAY USE +, -, PERIOD,  "
   SAY "       Z, 9 OR COMMA. ZONED INPUT IS RECOGNIZED.          "
   SAY
   SAY " EXAMPLE "
   SAY "    FORMCOLS  ZZ,ZZZ,ZZ9-  1 8  41 53                "
   SAY "       WILL FORMAT THE ARITHMETIC DATA IN COLUMNS 1  "
   SAY "       THRU 8 INTO 41 THRU 53, RIGHT JUSTIFYING THE  "
   SAY "       RESULT. E.G. 00001234 IN 1 THRU 8 WILL BECOME "
   SAY "       '       1,234 ' IN 41 THRU 53.                "
   SAY
   RETURN
