//-YOUR-USERID-D JOB  (-YOUR-ACCT-INFO-),'-YOUR-NAME-',
//             CLASS=2,MSGCLASS=X,NOTIFY=-YOUR-USERID-
//***
//C          EXEC     PGM=IEL0AA,REGION=4M,
//             PARM=('AG,A,NCT,ESD,F(I),NOFLOW,NIS,NOLIST,M,NMI,NEST',
//             'MAP,OF,OPT(TIME),OP,SZ(MAX),S,STMT,STG,X(F)')
//STEPLIB      DD       DISP=SHR,DSN=-YOUR-PLI-LIB-

 BASE:  PROC(PARM) OPTIONS(MAIN) REORDER;

   /**  EXPAND A FILE INTO ITS MAX FIELD SIZE REMOVING SEPARATOR    **/
   /**  CHARACTERS, POSSIBLY REMOVING HEADERS & TRAILERS, PROVIDING **/
   /**  A MASTER FORMAT TO BE USED, ELIMINATING DECIMAL POINTS BUT  **/
   /**  ALIGNING THE DATA, AND ROLLING ACTUAL SIGNS INTO THE DATA   **/

    DCL  PARM           CHAR(00006) VARYING;
    DCL  SEP_CHAR       CHAR(00001) STATIC;
    DCL  REMOVE_HDR     CHAR(00001) STATIC;
    DCL  REMOVE_TLR     CHAR(00001) STATIC;
    DCL  IS_MASTER      CHAR(00001) STATIC;
    DCL  DEL_DEC_PT     CHAR(00001) STATIC;
    DCL  ROLL_SIGN      CHAR(00001) STATIC;
    DCL  HEXDIG1        CHAR(00001) STATIC;
    DCL  HEXDIG2        CHAR(00001) STATIC;
    DCL  REC            CHAR(32760) STATIC VARYING;
    DCL  PRE_REC        CHAR(32760) STATIC VARYING;
    DCL  NEW_REC        CHAR(32760) STATIC VARYING;
    DCL  NEW_FIELD      CHAR(32760) STATIC VARYING;
    DCL  S              CHAR(00001) STATIC;
    DCL  NAME           CHAR(00030) STATIC;
    DCL  COB_CARD       CHAR(00080) STATIC;
    DCL  EZ_CARD        CHAR(00080) STATIC;
    DCL  1  MASTER_REC,
        10  MASTER_CBL_NAME    CHAR(00030),
        10  MASTER_FILLER_10   CHAR(00002) INIT(' '),
        10  MASTER_FIELD_LEN   PIC '99999',
        10  MASTER_FILLER_20   CHAR(00002) INIT(' '),
        10  MASTER_TYPE        CHAR(00001),
        10  MASTER_FILLER_30   CHAR(00002) INIT(' '),
        10  MASTER_DEC_PLACES  PIC '99',
        10  MASTER_FILLER_90   CHAR(00036) INIT(' ');
    DCL  PADDING        CHAR(32760) STATIC VARYING;
    DCL  RIGHT_PADDING  CHAR(32760) STATIC VARYING;
    DCL  1  ARRAY(01000) STATIC,
        10  FIELD_LEN   FIXED BIN(31) INIT((01000)(-1)),
        10  NUMERIC     CHAR          INIT((01000)('Y')),
        10  DEC_PLACES  FIXED BIN(31) INIT((01000)(0)),
        10  CBL_NAME    CHAR(00030)   INIT((01000)(' ')),
        10  GOT_SIGN    CHAR(00001)   INIT((01000)('N'));
    DCL  REC_LEN        FIXED BIN(31) STATIC INIT(0);
    DCL  FINAL_RC       FIXED BIN(31) STATIC INIT(0);
    DCL  (II,JJ,KK)     FIXED BIN(31) STATIC INIT(0);
    DCL  (HH,TT)        FIXED BIN(31) STATIC INIT(0);
    DCL  (LL,MM,NN)     FIXED BIN(31) STATIC INIT(0);
    DCL  (PP,RR,SS)     FIXED BIN(31) STATIC INIT(0);
    DCL  FL_PIC         PIC 'ZZZZ9' STATIC;
    DCL  FFL_PIC        PIC '99999' STATIC;
    DCL  LL_PIC         PIC 'ZZZZ9' STATIC;
    DCL  LLL_PIC        PIC '99999' STATIC;
    DCL  FF#_PIC        PIC '99999' STATIC;
    DCL  DPL_PIC        PIC '99' STATIC;
    DCL  HDR_DATE       CHAR(10) STATIC INIT('CCYY/MM/DD');
    DCL  TLR_DATE       CHAR(10) STATIC INIT('CCYY/MM/DD');
    DCL  TLR_TOT_CNT    PIC 'ZZ,ZZZ,ZZ9' STATIC;
    DCL  TLR_DATA_CNT   PIC 'ZZ,ZZZ,ZZ9' STATIC;
    DCL  ZEROLEN#       FIXED BIN(31) STATIC INIT(0);
    DCL  READ#          FIXED BIN(31) STATIC INIT(0);
    DCL  WRITTEN#       FIXED BIN(31) STATIC INIT(0);
    DCL  I_EOF_IND      CHAR(01) STATIC INIT('N');
    DCL  MASTER_EOF_IND CHAR(01) STATIC INIT('N');
    DCL  I              FILE INPUT  RECORD SEQL;
    DCL  MASTER         FILE INPUT  RECORD SEQL;
    DCL  O              FILE OUTPUT RECORD SEQL;
    DCL  OCOB           FILE OUTPUT RECORD SEQL;
    DCL  OEZ            FILE OUTPUT RECORD SEQL;
    DCL  LAYOUT         FILE OUTPUT RECORD SEQL;
    DCL  ( DATE, INDEX, LENGTH, PLIRETC, REPEAT, SUBSTR,
           TIME, TRANSLATE, VERIFY)
                        BUILTIN;
    DCL  SIGN           CHAR(001) STATIC;
    DCL  SIGN_LOC       CHAR(005) STATIC;
    DCL  SIGN_TRANS     CHAR(010) STATIC;
    DCL  HIGH_HEX       CHAR(256) STATIC
         INIT(('000000000000000011111111111111112222222222222222'
           ||  '333333333333333344444444444444445555555555555555'
           ||  '666666666666666677777777777777778888888888888888'
           ||  '9999999999999999AAAAAAAAAAAAAAAABBBBBBBBBBBBBBBB'
           ||  'CCCCCCCCCCCCCCCCDDDDDDDDDDDDDDDDEEEEEEEEEEEEEEEE'
           ||  'FFFFFFFFFFFFFFFF'));
    DCL  LOW_HEX        CHAR(256) STATIC
         INIT(('0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF'
           ||  '0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF'
           ||  '0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF'
           ||  '0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF'
           ||  '0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF'
           ||  '0123456789ABCDEF'));

 /** PICK UP PARM OPTIONS **/
    SEP_CHAR   = SUBSTR(PARM,1,1);
    REMOVE_HDR = SUBSTR(PARM,2,1);
    REMOVE_TLR = SUBSTR(PARM,3,1);
    IS_MASTER  = SUBSTR(PARM,4,1);
    DEL_DEC_PT = SUBSTR(PARM,5,1);
    ROLL_SIGN  = SUBSTR(PARM,6,1);

 /** IF MASTER OPTION CHOSEN, PUT THAT FORMAT INTO ARRAY **/
    OPEN FILE(I), FILE(O), FILE(OCOB), FILE(OEZ), FILE(LAYOUT);
    IF IS_MASTER = 'Y'
       THEN CALL GET_MASTER_FORMAT;

 /** FIRST READ OF DATA TO ANALYZE FIELDS **/
    ON ENDFILE(I) I_EOF_IND = 'Y';
    IF REMOVE_HDR = 'Y'
       THEN DO;
          READ FILE(I) INTO(REC);
          READ# = 1;
       END;
       ELSE READ# = 0;

    READ FILE(I) INTO(REC);
    READ# = READ# + 1;
    READ FILE(I) INTO(PRE_REC);
    DO WHILE ( I_EOF_IND  = 'N' );
       CALL ANAL_FIELD_LENGTHS;
       REC = PRE_REC;
       READ# = READ# + 1;
       READ FILE(I) INTO(PRE_REC);
       IF I_EOF_IND  = 'Y'
          THEN DO;
             IF REMOVE_TLR = 'N'
                THEN CALL ANAL_FIELD_LENGTHS;
          END;
    END;
    CLOSE FILE(I);

 /** CREATE COBOL AND EASYTRIEVE STRUCTURES PLUS GENERATE LAYOUT **/
    LL = 1;
    DO JJ = 1 TO 01000 WHILE ( FIELD_LEN(JJ) ¬= -1 );
       REC_LEN = REC_LEN + FIELD_LEN(JJ);
       CALL WRITE_COB_EZ_STRUCTURES;
    END;

 /** SECOND READ OF DATA TO GENERATE EXPANDED FILE **/
    I_EOF_IND = 'N';
    OPEN FILE(I);
    ON ENDFILE(I) I_EOF_IND = 'Y';
    IF REMOVE_HDR = 'Y'
       THEN DO;
          READ FILE(I) INTO(REC);
          NN = 1;
       END;
       ELSE NN = 0;

    READ FILE(I) INTO(REC);
    NN = NN + 1;
    READ FILE(I) INTO(PRE_REC);
    DO WHILE ( I_EOF_IND  = 'N' );
       CALL NORM_FIELD_LENGTHS;
       REC = PRE_REC;
       NN = NN + 1;
       READ FILE(I) INTO(PRE_REC);
       IF I_EOF_IND  = 'Y'
          THEN DO;
             IF REMOVE_TLR = 'N'
                THEN CALL NORM_FIELD_LENGTHS;
          END;
    END;

    CLOSE FILE(I), FILE(O), FILE(OCOB), FILE(OEZ), FILE(LAYOUT);

    CALL TERMINATION;
    CALL PLIRETC(FINAL_RC);


 ANAL_FIELD_LENGTHS:  PROC;
    II = 1;
    JJ = 1;
    DO WHILE ( II <= LENGTH(REC) );
       DO KK = II TO LENGTH(REC) BY 1
          WHILE ( SUBSTR(REC,KK,1) ¬= SEP_CHAR );
       END;
       IF VERIFY(SUBSTR(REC,II,KK-II),'+-.0123456789') ¬= 0
          THEN DO;
             IF IS_MASTER = 'Y' & NUMERIC(JJ) = 'Y'
                THEN DO;
                   PUT FILE(SYSOUT) EDIT ( '*E*  REC # ', READ#,
                                     ' FIELD ', JJ,
                                     ' >', SUBSTR(REC,II,KK-II), '<',
                                     ' SHOULD BE NUMERIC' )
                                   ( SKIP(1), A, P'ZZ,ZZZ,ZZ9',
                                     A, P'Z,ZZ9', A, A, A, A );
                   IF FINAL_RC < 08 THEN FINAL_RC = 08;
                END;
             NUMERIC(JJ)    = 'N';
             DEC_PLACES(JJ) = 0;
          END;
          ELSE DO;
             IF NUMERIC(JJ) = 'Y'
                THEN DO;
                   IF INDEX(SUBSTR(REC,II,KK-II),'+') ¬= 0
                         | INDEX(SUBSTR(REC,II,KK-II),'-') ¬= 0
                      THEN GOT_SIGN(JJ) = 'Y';
                   PP = INDEX(SUBSTR(REC,II,KK-II),'.');
                   IF PP ¬= 0  &  DEC_PLACES(JJ) < (KK-II-PP)
                      THEN DEC_PLACES(JJ) = (KK-II-PP);
                END;
          END;
       IF FIELD_LEN(JJ) < ( KK - II )
          THEN DO;
             IF IS_MASTER = 'Y'
                THEN DO;
                   PUT FILE(SYSOUT) EDIT ( '*S*  REC # ', READ#,
                                     ' FIELD ', JJ,
                                     ' >', SUBSTR(REC,II,KK-II), '<',
                                     ' SHOULD BE ONLY ',
                                     FIELD_LEN(JJ), ' BYTES' )
                                   ( SKIP(1), A, P'Z,ZZ9',
                                     A, P'Z,ZZ9', A, A, A, A,
                                     P'ZZ,ZZ9', A );
                   IF FINAL_RC < 12 THEN FINAL_RC = 12;
                END;
             FIELD_LEN(JJ) = KK - II;
          END;
       II = KK + 1;
       JJ = JJ + 1;
    END;
 END ANAL_FIELD_LENGTHS;


 GET_MASTER_FORMAT:  PROC;
    OPEN FILE(MASTER);
    ON ENDFILE(MASTER) MASTER_EOF_IND = 'Y';
    READ FILE(MASTER) INTO(MASTER_REC);
    II = 0;
    DO WHILE ( MASTER_EOF_IND  = 'N' );
       IF SUBSTR(MASTER_CBL_NAME,1,1) ¬= '*'
          THEN DO;
             II = II + 1;
             FIELD_LEN(II)     = MASTER_FIELD_LEN;
             IF MASTER_TYPE = 'N'
                THEN NUMERIC(II) = 'Y';
                ELSE NUMERIC(II) = 'N';
             DEC_PLACES(II)    = MASTER_DEC_PLACES;
             CBL_NAME(II)      = MASTER_CBL_NAME;
          END;
       READ FILE(MASTER) INTO(MASTER_REC);
    END;
    CLOSE FILE(MASTER);
 END GET_MASTER_FORMAT;


 NORM_FIELD_LENGTHS:  PROC;
    II = 1;
    JJ = 1;
    NEW_REC = '';
    DO WHILE ( II <= LENGTH(REC) );
       DO KK = II TO LENGTH(REC) BY 1
          WHILE ( SUBSTR(REC,KK,1) ¬= SEP_CHAR );
       END;
       IF NUMERIC(JJ) = 'N' | FIELD_LEN(JJ) = 0
          THEN DO;
             IF FIELD_LEN(JJ) = (KK-II)
                THEN PADDING = '';
                ELSE PADDING
                   = REPEAT(' ',(FIELD_LEN(JJ) - KK + II - 1 ));
             NEW_REC = NEW_REC || SUBSTR(REC,II,KK-II) || PADDING;
          END;
          ELSE DO;
             IF GOT_SIGN(JJ) = 'Y'
                THEN DO;
                   SIGN = '+';
                   SS = INDEX(SUBSTR(REC,II,KK-II),'+');
                   IF SS ¬= 0
                      THEN SIGN = '+';
                      ELSE DO;
                         SS = INDEX(SUBSTR(REC,II,KK-II),'-');
                         IF SS ¬= 0 THEN SIGN = '-';
                      END;
                END;
             RIGHT_PADDING = '';
             IF DEC_PLACES(JJ) ¬= 0
                THEN DO;
                   PP = INDEX(SUBSTR(REC,II,KK-II),'.');
                   RR = (KK-II-PP);
                   IF DEC_PLACES(JJ) = RR
                      THEN RIGHT_PADDING = '';
                      ELSE RIGHT_PADDING
                         = REPEAT('0',DEC_PLACES(JJ)-RR-1);
                END;
             IF FIELD_LEN(JJ) = (KK-II+LENGTH(RIGHT_PADDING))
                THEN PADDING = '';
                ELSE DO;
                   IF (KK-II) ¬= 0
                      THEN PADDING = REPEAT('0',
                         (FIELD_LEN(JJ)
                            - KK + II - LENGTH(RIGHT_PADDING) - 1 ));
                END;
             IF ROLL_SIGN = 'Y' & (KK-II) ¬= 0
                   & INDEX(SUBSTR(REC,II,KK-II),SIGN) ¬= 0
                THEN PADDING = '0' || PADDING;
             IF DEL_DEC_PT = 'Y' & (KK-II) ¬= 0
                   & INDEX(SUBSTR(REC,II,KK-II),'.') ¬= 0
                THEN PADDING = '0' || PADDING;
             IF (KK-II) = 0
                THEN DO;
                   IF FIELD_LEN(JJ) ¬= 0
                      THEN DO;
                         IF DEL_DEC_PT = 'Y'
                            THEN DO;
                               IF DEC_PLACES(JJ) ¬= 0
                                  THEN NEW_FIELD = REPEAT('0',
                                        FIELD_LEN(JJ)-DEC_PLACES(JJ)-1)
                                     || '.'
                                     || REPEAT('0',DEC_PLACES(JJ)-1);
                                  ELSE NEW_FIELD = REPEAT('0',
                                     FIELD_LEN(JJ)-1);
                            END;
                            ELSE DO;
                               IF DEC_PLACES(JJ) ¬= 0
                                  THEN NEW_FIELD = REPEAT('0',
                                        FIELD_LEN(JJ)-DEC_PLACES(JJ)-2)
                                     || '.'
                                     || REPEAT('0',DEC_PLACES(JJ)-1);
                                  ELSE NEW_FIELD = REPEAT('0',
                                     FIELD_LEN(JJ)-1);
                            END;
                      END;
                      ELSE
                         NEW_FIELD = PADDING || SUBSTR(REC,II,KK-II)
                            || RIGHT_PADDING;
                END;
                ELSE NEW_FIELD = PADDING || SUBSTR(REC,II,KK-II)
                   || RIGHT_PADDING;
             IF GOT_SIGN(JJ) = 'Y'
                THEN DO;
                   IF ROLL_SIGN = 'Y'
                      THEN DO;
                         IF INDEX(NEW_FIELD,SIGN) ¬= 0
                            THEN DO;
                               NEW_FIELD
                                  = SUBSTR(NEW_FIELD,1,
                                        INDEX(NEW_FIELD,SIGN)-1)
                                     || SUBSTR(NEW_FIELD,
                                        INDEX(NEW_FIELD,SIGN)+1);
                            END;
                         IF SIGN = '+'
                            THEN SIGN_TRANS = '{ABCDEFGHI';
                            ELSE SIGN_TRANS = '}JKLMNOPQR';
                         SUBSTR(NEW_FIELD,
                            LENGTH(NEW_FIELD),1)
                               = TRANSLATE(SUBSTR(NEW_FIELD,
                                  LENGTH(NEW_FIELD),1),
                                  SIGN_TRANS,'0123456789');
                      END;
                      ELSE DO;
                         IF INDEX(NEW_FIELD,SIGN) ¬= 0
                            THEN NEW_FIELD
                               = SIGN || SUBSTR(NEW_FIELD,1,
                                        INDEX(NEW_FIELD,SIGN)-1)
                                  || SUBSTR(NEW_FIELD,
                                        INDEX(NEW_FIELD,SIGN)+1);
                            ELSE NEW_FIELD
                               = SIGN || SUBSTR(NEW_FIELD,2);
                      END;
                END;
             IF DEL_DEC_PT = 'Y'
                   & INDEX(NEW_FIELD,'.') ¬= 0
                THEN
                   NEW_FIELD
                      = SUBSTR(NEW_FIELD,1,INDEX(NEW_FIELD,'.')-1)
                         || SUBSTR(NEW_FIELD,
                            INDEX(NEW_FIELD,'.')+1);
             NEW_REC = NEW_REC || NEW_FIELD;
             IF LENGTH(NEW_FIELD) ¬= FIELD_LEN(JJ)
                THEN DO;
                   PUT FILE(SYSOUT) EDIT ( '*E*  REC # ', NN,
                                     ' FIELD ', JJ,
                                     ' IS ', LENGTH(NEW_FIELD),
                                     ' BYTES AND NOT ', FIELD_LEN(JJ) )
                                   ( SKIP(1), A, P'ZZ,ZZZ,ZZ9',
                                     A, P'Z,ZZ9', A,
                                     P'ZZ,ZZ9', A , P'ZZ,ZZ9' );
                   IF FINAL_RC < 12 THEN FINAL_RC = 12;
                END;
          END;
       II = KK + 1;
       JJ = JJ + 1;
    END;
    WRITE FILE(O) FROM(NEW_REC);
    WRITTEN# = WRITTEN# + 1;
    IF LENGTH(NEW_REC) ¬= REC_LEN
       THEN DO;
          PUT FILE(SYSOUT) EDIT ( '*E*  REC # ', NN,
                            ' IS NOT CORRECT LENGTH, ',
                            LENGTH(NEW_REC),
                            ' RATHER THEN ', REC_LEN, ' BYTES' )
                          ( SKIP(1), A, P'ZZ,ZZZ,ZZ9',
                            A, P'ZZ,ZZ9', A,
                            P'ZZ,ZZ9', A );
          IF FINAL_RC < 12 THEN FINAL_RC = 12;
       END;
 END NORM_FIELD_LENGTHS;


 WRITE_COB_EZ_STRUCTURES:  PROC;
    IF FIELD_LEN(JJ) = 0 THEN ZEROLEN# = ZEROLEN# + 1;
    ELSE DO;
       LL_PIC   = LL;
       LLL_PIC  = LL;
       DPL_PIC  = DEC_PLACES(JJ);
       FL_PIC   = FIELD_LEN(JJ);
       FFL_PIC  = FIELD_LEN(JJ);
       IF IS_MASTER = 'Y'
          THEN NAME = CBL_NAME(JJ);
          ELSE NAME = 'POS-' || LLL_PIC;
       IF NUMERIC(JJ) = 'Y'
          THEN DO;
             IF GOT_SIGN(JJ) = 'Y'
                THEN S = 'S';
                ELSE S = ' ';
             EZ_CARD = '     ' || NAME    || '   '       || LL_PIC
                || '   '       || FL_PIC  || '   N  '    || DPL_PIC;
             IF DPL_PIC = 0
                THEN COB_CARD = '           10  ' || NAME
                      || '   PIC ' || S || '9('
                      || FFL_PIC   || ').';
                ELSE COB_CARD = '           10  ' || NAME
                      || '   PIC ' || S || '9('
                      || FFL_PIC   || ')V9(' || DPL_PIC ||  ').';
          END;
          ELSE DO;
             EZ_CARD = '     ' || NAME || '   ' || LL_PIC
                || '   ' || FL_PIC || '   ' || 'A';
             COB_CARD = '           10  ' || NAME
                || '   PIC  X(' || FFL_PIC || ').';
          END;
       WRITE FILE(OEZ)  FROM(EZ_CARD);
       WRITE FILE(OCOB) FROM(COB_CARD);
    END;
    FF#_PIC = JJ;
    IF IS_MASTER = 'Y'
       THEN MASTER_CBL_NAME   = CBL_NAME(JJ);
       ELSE MASTER_CBL_NAME   = 'FIELD' || FF#_PIC;
    MASTER_FIELD_LEN          = FIELD_LEN(JJ);
    IF NUMERIC(JJ) = 'Y'
       THEN MASTER_TYPE       = 'N';
       ELSE MASTER_TYPE       = 'A';
    IF FIELD_LEN(JJ) = 0 & IS_MASTER = 'N'
       THEN MASTER_TYPE       = 'A';
    MASTER_DEC_PLACES         = DEC_PLACES(JJ);
    WRITE FILE(LAYOUT) FROM(MASTER_REC);
    LL = LL + FIELD_LEN(JJ);
 END WRITE_COB_EZ_STRUCTURES;


 TERMINATION: PROC;
    PUT EDIT ( '**************************************' )
             ( SKIP(1), A );
    PUT EDIT ( '***  ', DATE, ' DETAB STATS ', TIME, '  ***' )
             ( SKIP(1), A, A, A, A, A );
    PUT EDIT ( '**************************************' )
             ( SKIP(1), A );
    IF HDR_DATE ¬= 'CCYY/MM/DD'
       THEN PUT EDIT ( '***  HEADER DATE VALUE:       ', HDR_DATE )
                     ( SKIP(2), A, A );
    IF TLR_DATE ¬= 'CCYY/MM/DD'
       THEN PUT EDIT ( '***  TRAILER DATE VALUE:      ', TLR_DATE )
                     ( SKIP(2), A, A );
    PUT EDIT ( '***  NUMBER RECORDS READ:    ', READ#    )
             ( SKIP(2), A, P'Z,ZZZ,ZZ9' );
    IF TLR_DATE ¬= 'CCYY/MM/DD'
       THEN PUT EDIT ( '***  TRAILER TOTAL NUMBER:  ', TLR_TOT_CNT )
                     ( SKIP(2), A, A );
    PUT EDIT ( '***  NUMBER RECORDS WRITTEN: ', WRITTEN# )
             ( SKIP(2), A, P'Z,ZZZ,ZZ9' );
    IF TLR_DATE ¬= 'CCYY/MM/DD'
       THEN PUT EDIT ( '***  TRAILER DATA COUNT:    ', TLR_DATA_CNT )
                     ( SKIP(2), A, A );
    PUT EDIT ( '***  NUMBER ZERO LEN FIELDS: ', ZEROLEN# )
             ( SKIP(2), A, P'Z,ZZZ,ZZ9' );
    DO KK = 1 TO 01000 WHILE ( FIELD_LEN(KK) ¬= -1 );
       IF FIELD_LEN(KK) = 0 THEN DO;
       PUT EDIT ( '  *  FIELD ', KK, ' IS ALWAYS ZERO LENGTH')
               ( SKIP(2), A, P'ZZ,ZZ9', A );
       END;
    END;

    HEXDIG1 = TRANSLATE(SEP_CHAR,HIGH_HEX);
    HEXDIG2 = TRANSLATE(SEP_CHAR,LOW_HEX);
    PUT EDIT ( '***  SEP_CHAR VALUE RECEIVED:     ',
               'X''', HEXDIG1, HEXDIG2, ''' (', SEP_CHAR, ')')
             ( SKIP(2), A, A, A, A, A, A, A );

    PUT EDIT ( '***  OUTPUT RECORD SIZE:        ', REC_LEN )
             ( SKIP(2), A, P'ZZ,ZZ9' );
 END TERMINATION;


 END BASE;

//SYSUT1       DD       UNIT=VIO,
//             SPACE=(CYL,(05,02),,CONTIG)
//SYSPRINT     DD       SYSOUT=*
//SYSLIN       DD       DSN=&&LOADSET,DISP=(MOD,PASS),
//             UNIT=VIO,SPACE=(CYL,(05,02))
//***
//L          EXEC     PGM=HEWLKED,COND=(5,LT),
//             PARM='XREF,LIST,LET,DCBS,AMODE=31,RMODE=ANY',
//             REGION=4M
//SYSLIB       DD       DISP=SHR,DSN=-YOUR-SCEELLED-
//SYSUT1       DD       UNIT=VIO,
//             SPACE=(CYL,(05,02),,CONTIG)
//SYSPRINT     DD       SYSOUT=*
//SYSLMOD      DD       DISP=SHR,DSN=-YOUR-LOADLIB-
//SYSLIN       DD       DSN=&&LOADSET,DISP=(OLD,DELETE)
//             DD       *
  SETSSI   03021200
  ENTRY    PLISTART
  NAME     DETAB(R)
//***
