/**  REXX -- Exclude a block between lines by indentation  **/

   Address ISREDIT
   'MACRO (Parms)'
   If Parms = '?' then signal DispDoc
   '(Bot) = LINENUM .ZLast'
   '(Cur,Col) = CURSOR'
   'RESET LAB'

   If Cur > 0 then do
      '(Line) = LINE' Cur
      Do ii = 8 to 71 while ( substr(Line,ii,1) = ' ' )
      End ii
      IndentCol = ii - 7
      If translate(substr(Line,ii,3)) = 'IF ',
            | translate(substr(Line,ii,8)) = 'PERFORM ',
            | translate(substr(Line,ii,9)) = 'EVALUATE ',
         then call Look_Down
         else if translate(substr(Line,ii,5)) = 'ELSE ',
            then call Check_Up_or_Down
            else call Look_Up
   Exit(0)

Look_Down:
   ii = Cur + 1
   'LABEL (ii) = .AXI'
   Do ii = Cur+1 to Bot
      '(Line) = LINE' ii
      If substr(Line,7,IndentCol) = ' ',
            & ( translate(substr(Line,IndentCol+7,5)) = 'ELSE ',
              | translate(substr(Line,IndentCol+7,7)) = 'END-IF ',
              | translate(substr(Line,IndentCol+7,7)) = 'END-IF.',
              | translate(substr(Line,IndentCol+7,12)) = 'END-PERFORM ',
              | translate(substr(Line,IndentCol+7,12)),
                  = 'END-PERFORM.',
              | translate(substr(Line,IndentCol+7,13)),
                  = 'END-EVALUATE ',
              | translate(substr(Line,IndentCol+7,13)),
                  = 'END-EVALUATE.' )  then do
            ii = ii - 1
            If ii <> (Cur+1) then 'LABEL (ii) = .BXI'
            Leave
      End
   End ii
   If ( ii > Bot ) then 'LABEL (Bot) = .BXI'
   If ii <> (Cur+1) then 'EXCLUDE .AXI .BXI ALL'
                    else 'EXCLUDE .AXI .AXI ALL'
   'RESET LAB'
   'CURSOR = (Cur,Col)'
   Return

Look_Up:
   ii = Cur - 1
   'LABEL (ii) = .BXI'
   Do ii = Cur-1 to 1 by -1
      '(Line) = LINE' ii
      If substr(Line,7,IndentCol) = ' ',
            & (  translate(substr(Line,IndentCol+7,5)) = 'ELSE ',
               | translate(substr(Line,IndentCol+7,3)) = 'IF ',
               | translate(substr(Line,IndentCol+7,8)),
                  = 'PERFORM ',
               | translate(substr(Line,IndentCol+7,9)),
                  = 'EVALUATE ' ),
         then do
            ii = ii + 1
            If ii <> (Cur-1) then 'LABEL (ii) = .AXI'
            Leave
         End
   End ii
   If ( ii < 1 )    then 'LABEL (1) = .AXI'
   If ii <> (Cur-1) then 'EXCLUDE .AXI .BXI ALL'
                    else 'EXCLUDE .BXI .BXI ALL'
   'RESET LAB'
   'CURSOR = (Cur,Col)'
   Return

Check_Up_or_Down:
   ii = Cur - 1
   '(LineStat) = XSTATUS' ii
   If LineStat = 'X' then call Look_Down
                     else call Look_Up
   Return

DispDoc:
   ADDRESS TSO "CLEAR"
   SAY "XINDENT - Exclude code based on indentation               "
   SAY
   SAY " Format "
   SAY
   SAY "    XINDENT                                               "
   SAY
   SAY "       Excludes lines from where the cursor is placed to  "
   SAY "       the correspondingly indented logic statement. If   "
   SAY "       pointing to an 'IF', the macro will exclude to the "
   SAY "       next 'ELSE' or 'END-IF'. If pointing to a 'ELSE',  "
   SAY "       it will exclude upwards to an 'IF' if the line     "
   SAY "       prior is not excluded. Otherwise it goes downwards."
   SAY "       PERFORM/END-PERFORM and EVALUATE/END-EVALUATE work "
   SAY "       similarly.                                         "
   SAY
   EXIT(0)

