//-YOUR-USERID-A JOB  (-YOUR-ACCT-INFO-),'-YOUR-NAME-',
//             CLASS=2,MSGCLASS=X,NOTIFY=-YOUR-USERID-
//***
//***  ALPHANUMERIC CONVERSION, COUNTING AND VERIFICATION
//***  SUB-PROGRAMS. ORDER OF COUNTING IS 'A' THROUGH
//***  THROUGH 'Z' THEN '0' THROUGH '9'.
//***
//C          EXEC     PGM=IGYCRCTL,REGION=4M,
//             PARM=('LIB,MAP,NUMPROC(PFD),OFF,OPTIMIZE',
//            'APOST,NOSEQ,TRUNC(OPT),XREF')
//SYSIN        DD       *

       IDENTIFICATION DIVISION.
       PROGRAM-ID.  TSTALPHA.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
           CLASS ALPHA-CHARS
               IS 'A' THRU 'Z', '0' THRU '9'.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT I
               ASSIGN TO I.
       DATA DIVISION.
       FILE SECTION.
       FD  I
           RECORDING MODE IS F
           BLOCK CONTAINS 0 RECORDS.
       01  INPUT-REC    PIC X(00080).
       WORKING-STORAGE SECTION.
       01  WS-INPUT-REC.
           05  INPUT-VALUE              PIC X(00010).
           05                           PIC X(00010).
           05  EXPECTED-PLUS-1-VALUE    PIC X(00010).
           05                           PIC X(00010).
           05  EXPECTED-MINUS-1-VALUE   PIC X(00010).
           05                           PIC X(00030).
       01   WS-RC                       PIC 99.
       01   WS-L                        PIC 99.
       01   WS-DATA1                    PIC X(10).
       01   WS-DATA2                    PIC X(10).
       01   WS-RETURN-CODE              PIC 9(4) VALUE 0.
       01  END-OF-FILE-STATUS           PIC X    VALUE 'N'.
           88  AT-END-OF-FILE                    VALUE 'Y'.

       PROCEDURE DIVISION.
       0000-MAIN.
           PERFORM 0100-INITIALIZATION
           PERFORM 0200-READ-WRITE-LOOP
               UNTIL AT-END-OF-FILE
           PERFORM 0900-TERMINATION
           MOVE WS-RETURN-CODE TO RETURN-CODE
           GOBACK
           .

       0100-INITIALIZATION.
           OPEN  INPUT  I
           READ  I INTO WS-INPUT-REC
               AT END SET AT-END-OF-FILE TO TRUE
               END-READ
           .

       0200-READ-WRITE-LOOP.

           MOVE 10 TO WS-L

           MOVE INPUT-VALUE TO WS-DATA1
           DISPLAY ' '

           CALL 'NXTALPHA' USING WS-RC, WS-L, WS-DATA1, WS-DATA2
           IF WS-DATA2 = EXPECTED-PLUS-1-VALUE
              DISPLAY '*OK* INPUT >' INPUT-VALUE '< '
                 'PLUS  1 >' WS-DATA2 '< '
                 'EXPECT  >' EXPECTED-PLUS-1-VALUE '< '
                 'RC=' WS-RC
           ELSE
              DISPLAY '*NG* INPUT >' INPUT-VALUE '< '
                 'PLUS  1 >' WS-DATA2 '< '
                 'EXPECT  >' EXPECTED-PLUS-1-VALUE '< '
                 'RC=' WS-RC
              MOVE 16 TO WS-RETURN-CODE
           END-IF

           CALL 'PRVALPHA' USING WS-RC, WS-L, WS-DATA1, WS-DATA2
           IF WS-DATA2 = EXPECTED-MINUS-1-VALUE
              DISPLAY '*OK* INPUT >' INPUT-VALUE '< '
                 'MINUS 1 >' WS-DATA2 '< '
                 'EXPECT  >' EXPECTED-MINUS-1-VALUE '< '
                 'RC=' WS-RC
           ELSE
              DISPLAY '*NG* INPUT >' INPUT-VALUE '< '
                 'MINUS 1 >' WS-DATA2 '< '
                 'EXPECT  >' EXPECTED-MINUS-1-VALUE '< '
                 'RC=' WS-RC
              MOVE 16 TO WS-RETURN-CODE
           END-IF

           CALL 'VERALPHA' USING WS-RC, WS-L, WS-DATA1
           IF WS-RC = 0
              AND  EXPECTED-PLUS-1-VALUE NOT = ' '
                 OR ( EXPECTED-PLUS-1-VALUE = ' '
                    AND  WS-DATA1 = '9999999999' )
              DISPLAY '*OK* GOOD  >' INPUT-VALUE '< '
                 'RC=' WS-RC
           ELSE
              IF WS-RC NOT = 0  AND  EXPECTED-PLUS-1-VALUE = ' '
                 DISPLAY '*OK* BAD   >' INPUT-VALUE '< '
                    'RC=' WS-RC
              ELSE
                 DISPLAY '*NG* HUH   >' INPUT-VALUE '< '
                    'RC=' WS-RC
                 MOVE 16 TO WS-RETURN-CODE
                 END-IF
           END-IF
           READ  I INTO WS-INPUT-REC
               AT END SET AT-END-OF-FILE TO TRUE
               END-READ
           .

       0900-TERMINATION.
           DISPLAY ' '
           DISPLAY '**********************************************'
           DISPLAY '*  COUNTING OFF FIRST 100 "NUMBERS"          *'
           DISPLAY '**********************************************'
           MOVE 'AAAAAAAAAA' TO WS-DATA1
           MOVE 10           TO WS-L
           MOVE  0           TO WS-RC
           DISPLAY '   ' WS-DATA1 '  RC=' WS-RC
           PERFORM  99 TIMES
              CALL 'NXTALPHA' USING WS-RC, WS-L, WS-DATA1, WS-DATA2
              DISPLAY '   ' WS-DATA2 '  RC=' WS-RC
              MOVE WS-DATA2  TO WS-DATA1
           END-PERFORM
           DISPLAY ' '
           DISPLAY '**********************************************'
           DISPLAY '*  COUNTING OFF LAST 100 "NUMBERS"           *'
           DISPLAY '**********************************************'
           MOVE '9999999999' TO WS-DATA1
           MOVE 10           TO WS-L
           MOVE  0           TO WS-RC
           DISPLAY '   ' WS-DATA1 '  RC=' WS-RC
           PERFORM  99 TIMES
              CALL 'PRVALPHA' USING WS-RC, WS-L, WS-DATA1, WS-DATA2
              DISPLAY '   ' WS-DATA2 '  RC=' WS-RC
              MOVE WS-DATA2  TO WS-DATA1
           END-PERFORM
           CLOSE I
           .


      *  NXTALPHA: DO ALPHABETIC ADDITION OF 1 TO FIELD UP TO 99
      *            BYTES LONG.  COLLATING SEQUENCE IS A TO Z THEN
      *            FOLLOWED BY 0 TO 9.

      *            PARAMETERS FOR "USING":
      *                RET-CODE      PIC 99
      *                INPUT-LENGTH  PIC 99
      *                INPUT-DATA    PIC X(##)
      *                OUTPUT-DATA   PIC X(##)

      *            LENGTH AND INPUT-DATA MUST BE SUPPLIED.  NON
      *            ALPHANUMERIC INPUT AND ALL 9'S AS INPUT ARE BOTH
      *            REJECTED.

      *            RETURN CODES:
      *               0 - ADDITION COMPLETED SUCCESSFULLY
      *               1 - NON ALPHANUMERIC VALUE FOUND
      *               2 - VALUE ALL 9'S; CAN'T GO HIGHER
      *
      *            THE RETURNED VALUE IS BLANKS IF AN INPUT ERROR IS
      *            FOUND.

       ID DIVISION.
       PROGRAM-ID.    NXTALPHA  COMMON.
       DATA DIVISION.
       WORKING-STORAGE SECTION.

       01 ARRAY-ENTRIES.
          05 ARRAY-CHARS OCCURS 99.
             10 ARRAY-CHAR         PIC X.

       01 WS-TEMP-VARIABLES.
          05 ARRAY-CHAR-SUB           PIC S9(4) COMP.

       LINKAGE SECTION.
         01 LS-RC                     PIC 99.
         01 LS-L                      PIC 99.
         01 LS-DATA1                  PIC X(99).
         01 LS-DATA2                  PIC X(99).

       PROCEDURE DIVISION USING LS-RC, LS-L, LS-DATA1, LS-DATA2.

       0000-MAINLINE-ROUTINE.

           MOVE LS-DATA1(1:LS-L) TO ARRAY-ENTRIES
           MOVE SPACES TO LS-DATA2(1:LS-L)
           MOVE 0      TO LS-RC

           IF ARRAY-ENTRIES(1:LS-L) IS NOT ALPHA-CHARS
               MOVE 1        TO LS-RC
           ELSE
               IF ARRAY-ENTRIES(1:LS-L) = ALL '9'
                   MOVE 2        TO LS-RC
               ELSE
                   PERFORM VARYING ARRAY-CHAR-SUB FROM LS-L BY -1
                           UNTIL ARRAY-CHAR-SUB < 1
                     INSPECT ARRAY-CHAR (ARRAY-CHAR-SUB)
                       CONVERTING 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
                               TO 'BCDEFGHIJKLMNOPQRSTUVWXYZ0123456789A'
                     IF ARRAY-CHAR (ARRAY-CHAR-SUB) NOT = 'A'
                         MOVE 0 TO ARRAY-CHAR-SUB
                     END-IF
                   END-PERFORM
                   MOVE ARRAY-ENTRIES(1:LS-L) TO LS-DATA2(1:LS-L)
               END-IF
           END-IF
           EXIT PROGRAM.
       END PROGRAM NXTALPHA.

      *  PRVALPHA: DO ALPHABETIC ADDITION OF 1 TO FIELD UP TO 99
      *            BYTES LONG.  COLLATING SEQUENCE IS A TO Z THEN
      *            FOLLOWED BY 0 TO 9.

      *            PARAMETERS FOR "USING":
      *                RET-CODE      PIC 99
      *                INPUT-LENGTH  PIC 99
      *                INPUT-DATA    PIC X(##)
      *                OUTPUT-DATA   PIC X(##)

      *            LENGTH AND INPUT-DATA MUST BE SUPPLIED.  NON
      *            ALPHANUMERIC INPUT AND ALL 9'S AS INPUT ARE BOTH
      *            REJECTED.

      *            RETURN CODES:
      *               0 - SUBTRACTION COMPLETED SUCCESSFULLY
      *               1 - NON ALPHANUMERIC VALUE FOUND
      *               2 - VALUE ALL A'S; CAN'T GO LOWER
      *
      *            THE RETURNED VALUE IS BLANKS IF AN INPUT ERROR IS
      *            FOUND.

       ID DIVISION.
       PROGRAM-ID.    PRVALPHA  COMMON.
       DATA DIVISION.
       WORKING-STORAGE SECTION.

       01 ARRAY-ENTRIES.
          05 ARRAY-CHARS OCCURS 99.
             10 ARRAY-CHAR         PIC X.

       01 WS-TEMP-VARIABLES.
          05 ARRAY-CHAR-SUB           PIC S9(4) COMP.

       LINKAGE SECTION.
         01 LS-RC                     PIC 99.
         01 LS-L                      PIC 99.
         01 LS-DATA1                  PIC X(99).
         01 LS-DATA2                  PIC X(99).

       PROCEDURE DIVISION USING LS-RC, LS-L, LS-DATA1, LS-DATA2.

       0000-MAINLINE-ROUTINE.

           MOVE LS-DATA1(1:LS-L) TO ARRAY-ENTRIES
           MOVE SPACES TO LS-DATA2(1:LS-L)
           MOVE 0      TO LS-RC

           IF ARRAY-ENTRIES(1:LS-L) IS NOT ALPHA-CHARS
               MOVE 1        TO LS-RC
           ELSE
               IF ARRAY-ENTRIES(1:LS-L) = ALL 'A'
                   MOVE 2        TO LS-RC
               ELSE
                   PERFORM VARYING ARRAY-CHAR-SUB FROM LS-L BY -1
                           UNTIL ARRAY-CHAR-SUB < 1
                     INSPECT ARRAY-CHAR (ARRAY-CHAR-SUB)
                       CONVERTING 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
                               TO '9ABCDEFGHIJKLMNOPQRSTUVWXYZ012345678'
                     IF ARRAY-CHAR (ARRAY-CHAR-SUB) NOT = '9'
                         MOVE 0 TO ARRAY-CHAR-SUB
                     END-IF
                   END-PERFORM
                   MOVE ARRAY-ENTRIES(1:LS-L) TO LS-DATA2(1:LS-L)
               END-IF
           END-IF
           EXIT PROGRAM.
       END PROGRAM PRVALPHA.

      *  VERALPHA: VERIFY ALPHANUMERIC  FIELD UP TO 99 BYTES LONG.
      *            COLLATING SEQUENCE IS A TO Z THEN FOLLOWED
      *            BY 0 TO 9.

      *            PARAMETERS FOR "USING":
      *                RET-CODE      PIC 99
      *                INPUT-LENGTH  PIC 99
      *                INPUT-DATA    PIC X(##)

      *            LENGTH AND INPUT-DATA MUST BE SUPPLIED.
      *
      *            RETURN CODES:
      *               0 - VALIDATION COMPLETED SUCCESSFULLY
      *               1 - NON ALPHANUMERIC VALUE FOUND

       ID DIVISION.
       PROGRAM-ID.    VERALPHA  COMMON.
       DATA DIVISION.
       WORKING-STORAGE SECTION.

       01 ARRAY-ENTRIES.
          05 ARRAY-CHARS OCCURS 99.
             10 ARRAY-CHAR         PIC X.

       01 WS-TEMP-VARIABLES.
          05 ARRAY-CHAR-SUB           PIC S9(4) COMP.

       LINKAGE SECTION.
         01 LS-RC                     PIC 99.
         01 LS-L                      PIC 99.
         01 LS-DATA1                  PIC X(99).

       PROCEDURE DIVISION USING LS-RC, LS-L, LS-DATA1.

       0000-MAINLINE-ROUTINE.

           MOVE 0      TO LS-RC
           IF LS-DATA1(1:LS-L) IS NOT ALPHA-CHARS
               MOVE 1        TO LS-RC
           END-IF
           EXIT PROGRAM.
       END PROGRAM VERALPHA.

       END PROGRAM TSTALPHA.

//SYSPRINT     DD       SYSOUT=*
//SYSLIN       DD       DSN=&&LOADSET,DISP=(MOD,PASS),
//             UNIT=SYSDA,SPACE=(CYL,(3,3)),
//             DCB=(BLKSIZE=0,LRECL=80,RECFM=FB)
//SYSUT1       DD       UNIT=SYSDA,SPACE=(CYL,(05,02))
//SYSUT2       DD       UNIT=SYSDA,SPACE=(CYL,(05,02))
//SYSUT3       DD       UNIT=SYSDA,SPACE=(CYL,(05,02))
//SYSUT4       DD       UNIT=SYSDA,SPACE=(CYL,(05,02))
//SYSUT5       DD       UNIT=SYSDA,SPACE=(CYL,(05,02))
//SYSUT6       DD       UNIT=SYSDA,SPACE=(CYL,(05,02))
//SYSUT7       DD       UNIT=SYSDA,SPACE=(CYL,(05,02))
//***
//GO         EXEC     PGM=LOADER,PARM='MAP,PRINT,AMODE(31),RMODE(ANY)',
//             REGION=4M,COND=(5,LT)
//SYSLIN       DD       DSN=&&LOADSET,DISP=(OLD,DELETE,DELETE)
//SYSLIB       DD       DISP=SHR,DSN=-YOUR-SCEELLED-
//SYSLOUT      DD       SYSOUT=*
//SYSPRINT     DD       SYSOUT=*
//** COL 1 IS START VALUE; 21 IS "+1" AND 41 "-1" EXPECTED VALUE
//I            DD       *
AAAAAAAAAA          AAAAAAAAAB
AAAAAAA1A9          AAAAAAA1BA          AAAAAAA1A8
ABABABABAB          ABABABABAC          ABABABABAA
KKKKKKKKKK          KKKKKKKKKL          KKKKKKKKKJ
ZZZZZZZZZZ          ZZZZZZZZZ0          ZZZZZZZZZY
..........
0000000000          0000000001          000000000Z
243ACQJ9E5          243ACQJ9E6          243ACQJ9E4
9999999999                              9999999998
//SYSOUT       DD       SYSOUT=*
//***
