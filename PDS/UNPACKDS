  /*-REXX---------------------- UNPACKDS ----------------------REXX-*/
  /*                                                                */
  /* Call TRSMAIN to UNpack a dataset received in packed or tersed  */
  /* format.                                                        */
  /*                                                                */
  /* Syntax:  %UNPACKDS input-DSN output-DSN output-DSORG           */
  /*                                                                */
  /*----------------------------------------------------------------*/

address TSO
"subcom ISPEXEC"; if RC=0 then SPF=1; else SPF=0
call   on error   name RXERROR         /* Activate command ERROR trap */
signal on syntax  name RXERROR                /* Activate SYNTAX trap */
signal on novalue name RXERROR               /* Activate NOVALUE trap */

arg INDS OUTDS DSORG                           /* Retrieve input args */

if length(INDS) = 0 | length(OUTDS) = 0 then do
   if length(INDS) = 0 then CURPOS = 'INDS'; else CURPOS = 'OUTDS'
   OK = '8'
   address ISPEXEC "display panel(UNPACKDS)"/* Display UNPACKDS panel */
   drop OK
   if RC <> 0 then exit 0
end

TP = sysvar('SYSPREF')                                  /* TSO Prefix */
if left(INDS,1) = "'" then do
   if right(INDS,1) = "'" then nop
   else INDS = INDS"'"
end
else if left(INDS,length(TP)+1) = TP||'.' then INDS = "'"INDS"'"

if left(OUTDS,1) = "'" then do
   if right(OUTDS,1) = "'" then nop
   else OUTDS = OUTDS"'"
end
else if left(OUTDS,length(TP)+1) = TP||'.' then OUTDS = "'"OUTDS"'"

if DSORG = "PO" & (DIR = '' | DIR = 0) then DIR = 45 /* Default DIR's */

X = msg("OFF")
OK = 'ALL'
"free dd(INFILE OUTFILE SYSPRINT)"              /* Free required DD's */
"DEL" OUTDS                                  /* Delete output dataset */
drop OK
X = msg("ON")

  /* Build output dataset ALLOC statement & allocate */

"alloc dd(OUTFILE) ds("OUTDS") new catalog release reuse " ||,
       space() "tracks UNIT(SYSDA) " ||,
       dsorg() dir() lrecl() recfm() blksize()

"alloc dd(INFILE) ds("INDS") shr reuse"     /* Allocate input dataset */

  /*
"execio 1 diskr INFILE (finis stem IN."
if "This is an Inter-Enterprise" = left(IN.1,27) then do
   OUT. = ""
   J = 0
   drop IN.
   "execio * diskr INFILE (finis stem IN."
   do I = 2 to IN.0
      J = J+1
      OUT.J = IN.I
   end
   OUT.0 = J
   "execio * diskw INFILE (finis stem OUT."
   drop IN. OUT.
end
  */
"alloc dd(SYSPRINT) ds(*)"           /* Allocate SYSPRINT to terminal */

                       /* Modify call stmt if TRSMAIN not in LINKLIST */
"call *(TRSMAIN) 'UNPACK'"                            /* Call TRSMAIN */

"free dd(INFILE OUTFILE SYSPRINT)"                       /* Free DD's */

ZISPFRC = 0
if SPF then address ISPEXEC "vput (ZISPFRC) shared"
exit ZISPFRC                                             /* All Done! */

/*====================================================================*/
/*                       SUBROUTINES/FUNCTIONS                        */
/*====================================================================*/

space:                    /* Return formatted or NULL SPACE parameter */
  if PTRKS = 0 | PTRKS = '' then do
     call LISTDSI INDS
     if left(SYSUNITS,1) = "C" then PTRKS = (SYSALLOC*15)*5
     else PTRKS = SYSALLOC*5
  end
  if STRKS = 0 | STRKS = '' then STRKS = PTRKS*15
  SPACE = "space("PTRKS","STRKS")"
return SPACE

/*====================================================================*/

dsorg:                    /* Return formatted or NULL DSORG parameter */
  if (DSORG = '' | DSORG = 'PO') & DIR > 0 then DSORG = "dsorg(PO)"
  else DSORG = "dsorg(PS)"
return DSORG

/*====================================================================*/

dir:                      /* Return formatted or NULL DIR parameter */
  if DIR > 0 then DIR = "dir("DIR")"
  else DIR = ''
return DIR

/*====================================================================*/

lrecl:                    /* Return formatted or NULL LRECL parameter */
  if LRECL > 0 then LRECL = "lrecl("LRECL")"
  else LRECL = ''
return LRECL

/*====================================================================*/

recfm:                    /* Return formatted or NULL RECFM parameter */
  select
     when RECFM = 'FB'  then RECFM = "recfm(F B)"
     when RECFM = 'FB'  then RECFM = "recfm(F B)"
     when RECFM = 'FBA' then RECFM = "recfm(F B A)"
     when RECFM = 'VBA' then RECFM = "recfm(V B A)"
     otherwise RECFM = ''
  end
return RECFM

/*====================================================================*/

blksize:                /* Return formatted or NULL BLKSIZE parameter */
  if BLKSIZE > 0 then BLKSIZE = "blksize("BLKSIZE")"
  else BLKSIZE = ''
return BLKSIZE

/*====================================================================*/

  /*---------------------------- RXERROR ---------------------------*/
  /*                                                                */
  /* REXX error condition handler. The routine gets control when a  */
  /* error condition is raised, and:                                */
  /*                                                                */
  /* A. Validates the error condition is OK and if so, returns      */
  /*    quietly, or                                                 */
  /*                                                                */
  /* B. Issues diagnostics messages about the error and where it    */
  /*    occurred, then exits passing the failed RC to the original  */
  /*    caller.                                                     */
  /*                                                                */
  /* To use this routine, code the following near the top of the    */
  /* exec:                                                          */
  /*                                                                */
  /*   call   on error   name RXERROR                               */
  /*   signal on syntax  name RXERROR                               */
  /*   signal on novalue name RXERROR                               */
  /*                                                                */
  /* For those Host commands where a failure is possible set the    */
  /* variable 'OK' to any Return Codes that are acceptable for the  */
  /* Host command.  For example:                                    */
  /*                                                                */
  /*   OK='8';   "host cmd"; drop OK <- RC 8 is acceptable.         */
  /*   OK='4 8'; "host cmd"; drop OK <- RC's 4 or 8 are acceptable. */
  /*   OK='ALL'; "host cmd"; drop OK <- ALL RC's are acceptable.    */
  /*                                                                */
  /*----------------------------------------------------------------*/
  /* NOTE: This subroutine does NOT use the PROCEDURE instruction,  */
  /*       so all variables created within it must be *hidden*, ie. */
  /*       unique.                                                  */
  /*----------------------------------------------------------------*/

RXERROR: trace N
address TSO
call   off error
signal off syntax
signal off novalue
_SIGL=SIGL
if symbol('RC') = 'VAR' then _RC = RC; else _RC = 'N/A'
"subcom ISPEXEC"; if RC=0 then _SPF=1; else _SPF=0
parse source . . _EXNAME .
_ERRORTXT = ''

if condition('I') = 'CALL' then ,
   if symbol('OK') = 'VAR' then ,
      if wordpos(_RC,OK)>0 | translate(OK)='ALL' then do
         call   on error   name RXERROR
         signal on syntax  name RXERROR
         signal on novalue name RXERROR
         drop ZERRLM ZERRMSG ZERRSM
         RC = _RC
         return
      end
      else nop

select
   when index(condition('C'),'ERROR FAILURE') > 0 then do
      _CMD = strip(strip(word(condition('D'),1),'B','"'),'B',"'")
      _ERRORTXT = '(Host command: '_CMD')'
      say 'RXERROR-> RC: '_RC' '_ERRORTXT' at line: '_SIGL ||,
          ' in EXEC: '_EXNAME
      if _SIGL <= sourceline() then do
         say ' '
         say 'RXERROR-> Line '_SIGL': 'strip(sourceline(_SIGL))
      end
      if datatype(_RC,'N') then ,
         if abs(_RC) > 7 then ZISPFRC = abs(_RC)
         else ZISPFRC = 8
      else ZISPFRC = 8
      if _SPF then address ISPEXEC "vput (ZISPFRC) shared"
      exit ZISPFRC
   end

   when condition('C') = 'SYNTAX' then do
      if datatype(_RC,'N') = 1 then ,
         if (_RC >= 0 & _RC < 100) then _ERRORTXT = '('errortext(_RC)')'
         else nop
      say 'RXERROR-> RC: '_RC' '_ERRORTXT' at line: '_SIGL ||,
          ' in EXEC: '_EXNAME
      if _SIGL <= sourceline() then do
         say ' '
         say 'RXERROR-> Line '_SIGL': 'strip(sourceline(_SIGL))
      end
      if datatype(_RC,'N') then ,
         if abs(_RC) > 7 then ZISPFRC = abs(_RC)
         else ZISPFRC = 8
      else ZISPFRC = 8
      if _SPF then address ISPEXEC "vput (ZISPFRC) shared"
      exit ZISPFRC
   end

   when condition('C') = 'NOVALUE' then do
      _ERRORTXT = '(No value for variable: 'condition('D')')'
      say 'RXERROR-> RC: '_RC' '_ERRORTXT' at line: '_SIGL ||,
          ' in EXEC: '_EXNAME
      if _SIGL <= sourceline() then do
         say ' '
         say "RXERROR-> Line "_SIGL": "strip(sourceline(_SIGL))
      end
      if datatype(_RC,'N') then ,
         if abs(_RC) > 7 then ZISPFRC = abs(_RC)
         else ZISPFRC = 8
      else ZISPFRC = 8
      if _SPF then address ISPEXEC "vput (ZISPFRC) shared"
      exit ZISPFRC
   end

   otherwise condition('C') <> '' then do
      _ERRORTXT = '(Condition='condition('C')', Description=' ||,
                  condition('D')')'
      say 'RXERROR-> RC: '_RC' '_ERRORTXT' at line: '_SIGL ||,
          ' in EXEC: '_EXNAME
      if _SIGL <= sourceline() then do
         say ' '
         say "RXERROR-> Line "_SIGL": "strip(sourceline(_SIGL))
      end
      if datatype(_RC,'N') then ,
         if abs(_RC) > 7 then ZISPFRC = abs(_RC)
         else ZISPFRC = 8
      else ZISPFRC = 8
      if _SPF then address ISPEXEC "vput (ZISPFRC) shared"
      exit ZISPFRC
   end
end
ZISPFRC = 8                                  /* Should NEVER get here */
if _SPF then address ISPEXEC "vput (ZISPFRC) shared"
exit ZISPFRC                                      /* but just case... */
