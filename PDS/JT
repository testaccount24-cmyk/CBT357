/* REXX - if placed on a PERFORM stmt - jump to it and make a label   */
/*        (.JBx) which can be jumped back to via the JB command;      */
/*        if on a copy statement, it does a view on the copybook      */
/**********************************************************************/
parse Source opsys . cmdname .
Call INIT
Address ISREDIT
'MACRO (PARMS) NOPROCESS'
upper parms
If parms = '?' then call DispDoc

'(number1,number2) = number'
'(V1,V2) = CURSOR'                       /* Where is the cursor?      */
call check_leading_numbers
'CURSOR ='V1 V2
call get_current_line
'(DS)    = DATASET'                      /* Which dataset             */
Parse Var ds hlq '.' lv2 '.' cob '.'     /* Check if this is COB pgm  */
i_list='COBOL COPY'                      /* Include list              */
if cob = 'COBOL' then
  nop
else
  i_list=cob||' COBOL COPY'              /* Include list              */
qual_2='COPY PR2'                        /* 2nd qualifier list        */
call define_copy
call define_call
/* Define possible first level qualifiers so that if we don't
   find the file under (say) the user's hlq, we will still look
   for it under the other defined HLQ's                         */
qual_1 = strip(hlq,'B')
/*
 If the first qualifier of the file being edited is NOT the userid,
 hen ONLY catenate SHB as other optional HLQ's. If the first IS the
 userid, then create qual_1 as the userid, the value in the 2nd
 qualifier as the 2nd one and finally SHB as the third one
*/
if qual_1 <> zuser then
 qual_1=strip(hlq) || lv2 ' SHB'         /* 1st qualifier list        */
else
 qual_1=strip(hlq) || ' SHB'             /* 1st qualifier list        */

tline = TRANSLATE(line)                  /* Uppercase line            */
tline = TRANSLATE(tline,'','().%')       /* Remove unwanted chars     */
Select                                   /* select action             */
  When POS('CALL ',tline)>0 &,         /* CALL AND COPY on same line  */
       POS('COPY ',tline)>0     then
    call determine_which_call
  When POS('PERFORM ',tline)>0  Then     /* Is it PERFORM stmt ?      */
    Call perform_stmt
  When POS('COPY ',tline)>0 &,           /* On a COPY line? and       */
       WORDPOS(cob,i_list)  >0  then     /* member of COB2 library?   */
    Call COPY_INCLUDE 'COPY '            /* Handle the COPY    member */
  When POS('INCLUDE ',tline)>0 &,        /* On an include line? and   */
       WORDPOS(cob,i_list)  >0  then     /* member of COPY library?   */
    Call COPY_INCLUDE 'INCLUDE '         /* Handle the INCLUDE member */
  When POS('CALL ',tline)>0  Then        /* Is it CALL stmt?          */
    Call call_stmt
  Otherwise                              /* Nop stmt                  */
    Call invalid_call
End
If keepcsr = 1 Then
 do
  Address ISREDIT
  'CURSOR =' v1 v2     /* Return the CURSOR         */
 end

Exit xrc
/*----------------------------------------------------------------------
! Check which version of ISPF/PDF we're on                             !
----------------------------------------------------------------------*/
INIT:
  keepcsr = 1                           /* Keep cursor in file        */
  xrc     = 0                           /* Don't place cursor on cmd  */
  Address ISPEXEC
  'VGET (ZENVIR) ASIS'
  vers = SUBSTR(zenvir,1,8)
  Parse Var vers . ver .
  If ver> 4.0 Then
   view = 'VIEW'
  Else
   view = 'EDIT'
  'VGET (ZUSER)'
Return
/*----------------------------------------------------------------------
! Handle EXTERNAL entry. eg VIEW the source code of the DCL EXT.       !
----------------------------------------------------------------------*/
EXTERNAL:
  If POS('DCL ',tline) > 0 Then          /* How do we parse DCL?      */
    Parse Var tline 'DCL ' member .      /* Take member name          */
  Else                                   /*                           */
    Parse Var tline 'DECLARE ' member .  /* Take member name          */
                                         /*                           */
  If LENGTH(member)>7 Then               /* Too long for external     */
  Do
    zedsmsg = 'PROC name too long'
    zedlmsg = "Could not find '"member"' anywhere and it's",
              "too long to be an external program."
    Call ISPFMSG
    member    = ''
  End
  If member<>'' Then Do                  /* If not blank              */
    If view <> 'BROWSE' Then do          /* Use "VIEW" if not BROWSE  */
      view member
      Call ISPFREMOVE
    End                                  /*                           */
    Else Do                              /* If "BROWSE" we have to do */
      Address ISPEXEC                    /* we must do it in the old  */
      'CONTROL ERRORS RETURN'            /* way.                      */
      ds    = ds'('member')'             /*                           */
   /**view "DATASET('"ds"')"**/
      Address ISPEXEC "SELECT PGM(ISPSTRT)",
         "PARM(CMD(ISREPDF '"tempds"' V))"
      Call ISPFREMOVE
    End                                  /*                           */
  End                                    /*                           */
Return
/*----------------------------------------------------------------------
! Handle PERFORM stmts. Also add a "JUMP-BACK" label .JB               !
----------------------------------------------------------------------*/
perform_stmt:
  alpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'   /* Used to create the label  */
  keepcsr = 0                            /* don't keep cursor pos     */
  Call ISPFVGET
  if jbnum = '' then jbnum = 0
  jbnum = jbnum + 1
  suff = substr(alpha,jbnum,1)

  'LABEL .ZCSR = .JB' || suff '0'        /* make jump-back label      */
  If POS('PERFORM ',tline)>0 Then Do
    Parse Var tline 'PERFORM ' tproc .  /* Take proc name            */
    proc = STRIP(TRANSLATE(tproc,' ','.;)('),'B')
    /* If we added the blanks specifically, we would miss calls
       to a perform where the "section" was in fact nothing other than
       a label (in which case it would have a full stop after the
       name)                                                    */
    stop = LENGTH(proc) + 16             /* 16 is for the fact that we*/
                                         /* START in pos 8 AND we add */
                                         /* 8 chars for the word      */
                                         /* ' section'                */
  End
  Else
   Do
    temp = STRIP(TRANSLATE(tline,' ',';)('),'B')
    Parse Var temp tproc .
    stop = LENGTH(tproc) + 4
   End

 /* This new code allows the word SECTION to be anywhere on the line
    and separated by any number of blanks after the actual name of
    the section being searched for                                */
  'CURSOR = 1'
  FIND ''''proc'''' next
  /* Loop round as long as we still find the occurrence of the
     procedure string we're looking for */
  do while rc <> 4
   call get_current_line
   '(LNR) = LINENUM .zcsr'
   upper line

   /* Must have proc with parens so that REXX knows it's a variable
      we're looking for (otherwise, it could easily parse proc as
      containing a trailing full stop)                         */
   parse var line leader (proc) rest trailing_nums
   /* Does the line contain the word SECTION.  OR is the first
      character on the line AFTER the procedure name a full stop */
   /* If the value in words(leader) is NOT 1, then this means
      we've found a section where the perform statement contains
      part of the string in the current section. For example,
      we called FINCL on a line containing 'perform A-MA' and
      there is a section called A-MAin as well                 */

   select

    /* do we have 'SECTION.' on the line, nothing before the
       actual procedure name we're looking for and only the
       one word ('SECTION.') after the procedure name          */
    /* The last control ensures we don't find a section
       name that contains what we are looking for, but ALSO
       has a suffix. For example, we've pressed F13 on
             PERFORM FRED
       and the current line is in fact
             FRED-NEW SECTION.
    */
    when POS('SECTION.',line) <> 0     &,
         words(leader) = 0             &,
         words(rest)   = 1             &,
         substr(rest,1,7) = 'SECTION'  then
           leave                         /* Yes - leave the loop */

    /* do we have 'SECTION.' on the line, and the text after the
       possible word 'SECTION.' only contains the usual trailing
       numbers                                                 */
    when POS('SECTION.',line) <> 0        &,
         datatype(trailing_nums) = 'NUM'  &,
         words(rest)   = 2                then
           leave                         /* Yes - leave the loop */

    /* do we have 'SECTION.' on the line, and the text after the
       possible word 'SECTION.' is blank                */
    when POS('SECTION.',line) <> 0    &,
         length(trailing_nums) = 0    &,
         words(rest)   = 1            then
           leave                         /* Yes - leave the loop */

    /* I think (?) you can code a section as only containing
       the name of the section followed by a fullstop, WITHOUT
       the actual word SECTION. The next when tests for that    */
    when words(leader) = 0         &,
         substr(rest,1,1) = '.'       then
          leave

    otherwise
         FIND ''''proc'''' next       /* No - look again            */
    end
  end
  If rc = 0 Then
   do
    locate lnr    /* Make sure found line is "top of screen" */
    Call ISPFVPUT
   end

  If rc<>0 Then Do
    keepcsr = 1                          /* return cursor if not found*/
    If rc=4 Then Do
      If POS('=',line) > 0 Then Do
        v2 = v2 + 0
        Parse Upper Var line =(v2) tproc '(' .
      End
      tline = 'DCL' tproc
      Call EXTERNAL
    End
    Else Do
      zedsmsg = 'FIND PROC error'
      zedlmsg = "FIND returned" rc "when trying to find",
                "the PROC named '"proc"' in this program."
      Call ISPFMSG
    End

    'RESET LABEL .JB' || suff '.JB' || suff
  /*  'HILITE FIND'  IBM special        */
  End
  Else xrc = 1                           /* Leave cursor on ZCMD      */
Return
/*----------------------------------------------------------------------
! Handle INCLUDEs, even EXEC SQL includes are handled                  !
----------------------------------------------------------------------*/
INCLUDE:
  Address ISPEXEC
  Parse Var tline 'INCLUDE ' member .   /* Take member name          */
  /* GLCD is DCLG backwards, ie, are we ALREADY in the DCLG PDS ?? */
  If SUBSTR(REVERSE(ds),1,4) <> 'GLCD' then
   do
    temp = reverse(ds)
    lastqual = pos('.',temp) - 1     /* Remove the last qualifier */
    temp = substr(ds,1,length(ds) - lastqual)
    tempds = temp'DCLG('member')'
   end
  else
   tempds = ds || '('member')'          /* Concat member             */

  'CONTROL ERRORS RETURN'                /* Ignore ISPF errors        */
  /* Check first whether the member exists       */
  call check_qual
  call view_member 'INCLUDE',koll

Return
/*----------------------------------------------------------------------
! Handle CALLs to external programs
! The code will through the DSN defined in the generic variables
! CALLDSNx trying to find the specific program name
----------------------------------------------------------------------*/
CALL_STMT:
  Address ISPEXEC
  Parse Var tline 'CALL ' member .       /* Get program name          */
  member = strip(member,'B')
  /* Check if surrounded by single quotes - double ones
     are not checked                                      */
  if pos('''',member) <> 0 then
   do
    /* Ensure the actual quotes don't follow along in the name */
    member = substr(member,2,length(member) - 2)
   end
  tempds = ds || '('member')'          /* Concat member             */

  'CONTROL ERRORS RETURN'                /* Ignore ISPF errors        */
  /* Check first whether the member exists       */
  /*
  call check_qual
  call view_member 'CALL',koll
  */
  call find_dsn 'CALLDSN'
  if file_found = 1 then
    koll = 'OK'
  else
    koll = 'NOT THERE'

  call view_member 'CALL',koll
  /* RC = 20 means the program couldn't be found - we'll try again
     but this time, we'll look for the name in the working storage
     section                                     */
  if rc = 20 then
   do
    Address ISREDIT
    /* Try and find the definition for the variable used instead */
    'FIND ''WORKING-STORAGE'' FIRST'
    /* Loop round as long as we still find the occurrence of the
       procedure string we're looking for */
    do while rc <> 4
     call get_current_line
     upper line
     if pos('SECTION.',line) <> 0 then   /* Does the line contain
                                            the word SECTION.  ??    */
     leave                              /* Yes - leave the loop */
    else
     'FIND ''WORKING-STORAGE'''
    end
    /* Be surprised if this doesn't work |||| */
    if rc = 0 then
     do
      /* Find the first reference to the VARIABLE used in the call */
      'FIND' member 'FIRST'
      if rc = 0 then
       do
        /* we found it - analyze the definition picking out the
           the value defined */
        '(TLINE) = LINE .zcsr'
        tline = STRIP(tline,'B')
        upper tline
        if 'CALL' <> word(tline,1) then
         do
          /* "'" on next line ensures no quotes picked up */
          Parse Var tline . 'X(' . 'VALUE' "'"member"'" .
          member = STRIP(member,'B')
          tempds = ds || '('member')'
          Address ISPEXEC
          'CONTROL ERRORS RETURN'
       /** view "DATASET('"tempds"')" **/
          Address ISPEXEC "SELECT PGM(ISPSTRT)",
             "PARM(CMD(ISREPDF '"tempds"' V))"
         end
        else
         call nothing_found 'PROGRAM'
       end
     end
   end
Return
/*----------------------------------------------------------------------
! Handle COPYs or INCLUDEs
! The code will through the DSN defined in the generic variables
! COPYDSNx trying to find the specific program name
----------------------------------------------------------------------*/
COPY_INCLUDE:
  full_qual = 0
  arg type               /* Should be COPY or INCLUDE   */
  Address ISPEXEC
  Parse Var tline (type) member .  /* Take member name */
  Parse var line (type) full_name
  full_name = strip(full_name)
  select
    when substr(full_name,1,1) = "'" & ,
         substr(reverse(full_name),1,1) = "'"   then
      do
         member = full_name
         full_qual = 1
      end
    when length(member) > 8    then
      do
        zedsmsg = 'Invalid 'type'name'
        zedlmsg = type'name cannot be more than 8 characters'
        Call ISPFMSG
        return
      end
    otherwise
      nop
  end
  select
    when full_qual = 1  then
      tempds = member
    when SUBSTR(REVERSE(ds),1,4) <> 'YPOC' then
      /* YPOC is COPY backwards, ie, are we ALREADY */
      /* in the COPY PDS ?? (we'll know this by */
      /* looking at the dataset name)              */
      do
        temp = reverse(ds)
        lastqual = pos('.',temp) - 1 /* Remove the last qualifier */
        temp = substr(ds,1,length(ds) - lastqual)
        tempds = temp'COPY('member')'
      end
    otherwise
      tempds = ds || '('member')'     /* Concat member     */
  end

  'CONTROL ERRORS RETURN'                /* Ignore ISPF errors        */
  hlq_wordnr = 1
  call find_dsn 'COPYDSN'
  if file_found = 1 then
    koll = 'OK'
  else
    koll = 'NOT THERE'

  call view_member 'COPY',koll

Return
/************************************************************
 Check if the member can be found in the various HLQ libraries
 (the generic name of the variable should be passed to this
  procedure)
************************************************************/
find_dsn:
/* varname will contain the variable name that in turn
   contains the possible HLQ that we want to look through */
   arg varname
   save_name = file
   file_found = 0
   interpret 'i2 = 'varname'_nr'
   do i = 1 to i2
    /* Ensure that temp is given the value in varnamex
       (where x will be 1 to varname_nr)              */
    interpret 'temp = 'varname||i
    upper temp
    /* If the first character in the string is a '?', then
       change it for the HLQ                            */
    if substr(temp,1,1) = "?" then
        temp = hlq||substr(temp,2)

    /* Check that the current copydsnx variable ACTUALLY contains
       something AND that we don't end up looking in the SAME PDS
       we are already editting                                 */
    select
      when pos("'",member) <> 0 then
        do
          x = MSG("OFF")
          koll = sysdsn(member)
          a = MSG(x)        /* reset message value */
          if koll = 'OK' then
            do
              file_found = 1
              tempds = member
              tempds = translate(tempds,"","'") /* remove blips */
              tempds = strip(tempds)
              return
            end
        end
      when temp <> '' & zdsn <> temp then
        do
          x = MSG("OFF")
          koll = sysdsn("'"temp"("member")'")
          a = MSG(x)        /* reset message value */
          if koll = 'OK' then
            do
              file_found = 1
              tempds = temp'('member')'
              return
            end
        end
    end
   end   /* end do i = 1 to 9 */
   zedsmsg = 'File missing'
   zedlmsg = 'Cannot find program/file 'file
   address ispexec

   address
   Return
/*----------------------------------------------------------------------
! See if we can find the member if we change the 2nd qualifier         !
----------------------------------------------------------------------*/
check_qual:
 /* Does the member exist ? */
 x = MSG("OFF")
 koll = sysdsn("'"tempds"'")
 a = MSG(x)        /* reset message value */
 if koll = 'MEMBER NOT FOUND' ! koll = 'DATASET NOT FOUND' then
  do
    save_tempds = tempds
    /* Parse the filename into its constituent parts */
    parse var tempds hlq '.' andra '.' rest
    /* Find where the current qualifier is in the search chain */
    start = wordpos(andra,qual_2)
    /* Now point at the next DSN in the search chain and see if
       we can find the member in THAT group instead            */
    call check_qual_2
    /*
    if koll <> "OK" & word(qual_1,1) <> hlq then
    */
    if koll <> "OK" & words(qual_1) <> hlq_wordnr then
     do
       hlq_wordnr = hlq_wordnr + 1
       do i2 = hlq_wordnr to words(qual_1)
        start = 0
        hlq = word(qual_1,i2)
        call check_qual_2
       end
     end
    /* We either come here via the leave or because we found the
       member somewhere in the chain. IF we lookoed all through the
       chain and never found anything, then koll will contain
       something other than OK, in which case restore the dsn
       name to the starting point                        */
    if koll <> 'OK' then
     tempds = save_tempds
  end
Return
/*----------------------------------------------------------------------
! Change the second qualifier
----------------------------------------------------------------------*/
check_qual_2:
   /* We only look for qualifiers "later" in the chain" */
   start = start + 1
   do i = start to words(qual_2)
   /* Create the relevant dsn                          */
   tempds = hlq"."word(qual_2,i)"."rest
   x = MSG("OFF")
   koll = sysdsn("'"tempds"'")
   a = MSG(x)        /* reset message value */
   if koll = 'OK' then
    leave
   End
   Return
/*----------------------------------------------------------------------
! Invalid call
----------------------------------------------------------------------*/
INVALID_CALL:
 zedsmsg = 'Invalid call'
 zedlmsg = "Cannot determine call method. Try again"
 Call ISPFMSG
return
/*----------------------------------------------------------------------
! Common message routine for no file                                   !
----------------------------------------------------------------------*/
nothing_found:
 arg member
 zedsmsg = 'No 'member' found'
 zedlmsg = 'Cannot find ANY 'member' anywhere to show'
 Call ISPFMSG
return
/*----------------------------------------------------------------------
! Common message routine for no file                                   !
----------------------------------------------------------------------*/
view_member:
 arg type,koll
 if koll = 'OK' then
  do
   Address ISPEXEC "SELECT PGM(ISPSTRT)",
      "PARM(CMD(ISREPDF '"tempds"' V))"
    /**  view "DATASET('"tempds"')"  **/
   if rc = 14 then                 /* Being editted by someone ??? */
    do
     Address ISPEXEC "SELECT PGM(ISPSTRT)",
        "PARM(CMD(ISREPDF '"tempds"' V))"
      /**  view = 'BROWSE'                Yes -browse instead    **/
      /**  view "DATASET('"tempds"')"          BROWSE the member **/
    end
  end
 else
  do
   /* If we are NOT looking for an external routine, issue the
      error message                                      */
   if type =  'CALL' then
    rc = 20
   else
    call nothing_found 'member'
  end

return
/*----------------------------------------------------------------------
! Show info/error messages to user                                     !
----------------------------------------------------------------------*/
ISPFMSG:
  IF zedsmsg <> '' THEN DO /* ERROR IN MACRO STATEMENT */
    zcmd = ''
    Address ISPEXEC
    'VPUT (ZCMD,ZEDSMSG,ZEDLMSG)'
    'SETMSG MSG(ISRZ001)'
  End
/*
If keepcsr = 1 Then
 do
  Address ISREDIT
  'CURSOR =' v1 v2
 end
*/
Return
/*----------------------------------------------------------------------
! Show info/error messages to user                                     !
----------------------------------------------------------------------*/
ISPFREMOVE: Procedure Expose JBNUM member
  Address ISPEXEC
  'VGET (FINCL) SHARED'
  If rc> 8 Then Say 'ISPFVGET: error rc='  rc
  member = STRIP(member)
  where  = POS(member,fincl)
  if where>0 Then
  do
    fincl = DELSTR(fincl,where,LENGTH(member)+2)
    fincl = SPACE(fincl,1)
    'VPUT (FINCL) SHARED'
    If rc> 8 Then Say 'ISPFVPUT: error rc=' rc
  end
Return
/*----------------------------------------------------------------------
! Show info/error messages to user                                     !
----------------------------------------------------------------------*/
ISPFVGET: Procedure Expose JBNUM
  '(member) = member'
  Address ISPEXEC
  'VGET (FINCL) SHARED'
  If rc> 8 Then Say 'ISPFVGET: error rc='  rc
  temp = member'_'
  /* Need to do it this way, otherwise the member we are editting
     could be MIKE and the value in FINCL could be MIKE2_2. As a
     result, the POS(...) would return a 1, and the resulting
     jbnum would be _2 which causes problems later on           */
  /* where = POS(member,fincl)*/
  where = POS(temp,fincl)
  if where>0 Then
  do
    jbnum = SUBSTR(fincl,(where+LENGTH(member)+1),2)
  end
  else jbnum = 0
Return
/*----------------------------------------------------------------------
! Show info/error messages to user                                     !
----------------------------------------------------------------------*/
ISPFVPUT: Procedure Expose JBNUM member
  '(MEMBER) = MEMBER'
  Address ISPEXEC
  'VGET (FINCL) SHARED'
  where = POS(member,fincl)
  if where>0 Then
  do
    fincl = OVERLAY(jbnum,fincl,(where+LENGTH(member)+1),2)
  end
  else
  do
    fincl = fincl member || '_' || jbnum
  end
  fincl = SPACE(fincl,1)
  'VPUT (FINCL) SHARED'
  If rc> 8 Then Say 'ISPFVPUT: error rc='  rc
Return
/********************************************************************
 These are the default copybook filenames that will be searched for
 if the users points to a COPY book rather than a fully
 qualified DSN. Assuming the file being edited is
               'MISI01.BMAT.COBOL'
 then the variables below will be resolved in the following manner
 ?    = MISI01
 lvl2 = BMAT
 hlq  = MISI01
 ********************************************************************/
define_copy:
      copydsn1  = '-YOUR-COPYLIB-1-'
      copydsn2  = '-YOUR-COPYLIB-2-'
      copydsn3  = '-YOUR-COPYLIB-3-'
      copydsn4  = '-YOUR-COPYLIB-4-'
            /* Pick up production copy books */
      copydsn_nr = 4   /* Number of entries in the variable above */
return
/********************************************************************/
/* Check if the code contains numbers or similar in the first       */
/* 6 characters. If so, set the variable LEADING to 7 which means   */
/* we'll always strip the first 7 characters from the line read in  */
/********************************************************************/
check_leading_numbers:
'FIND "PROGRAM-ID" FIRST'
'(V3,V4) = CURSOR'                       /* Where is the cursor?      */
'(LINE)  = LINE' V3              /* Take data from that line  */
if substr(line,2,10) = 'PROGRAM-ID' then
  leading = 1
else
  leading = 7
Address 'ISREDIT'
/*
'reset find'     /* Remove any highlighting of found strings */
*/
return
/********************************************************************
 These are the default filenames that will be searched for
 if the users points to a CALL line.
 Assuming the file being edited is
               'MISI01.BMAT.COBOLXXX'
 then the variables below will be resolved in the following manner
 ?    = MISI01
 lvl2 = BMAT
 hlq  = MISI01
 cob  = COBOLXXX
 ********************************************************************/
define_call:
select
  when hlq = zuser & cob <> 'COBOL' then
    do
      /* Last qualifier is not the standard .COBOL */
      calldsn1  = '?.'||lv2'.'||cob
      calldsn2  = '?.'||lv2'.COBOL'
      calldsn3  = lv2||'.FT.COBOL'
      calldsn_nr = 3      /* Number of entries in the variable above */
    end
  when hlq = zuser then
    do
      /* Last qualifier IS .COBOL, and HLQ is userid */
      calldsn1  = '?.'||lv2'.COBOL'
      calldsn2  = lv2||'.FT.COBOL'
      calldsn_nr = 2      /* Number of entries in the variable above */
    end
  when lv2 = 'FT' then
    do
      /* File of type system.FT.COBOL       */
      calldsn1  = hlq||'.'||lv2||'.COBOL'
      calldsn_nr = 1    /* Number of entries in the variable above */
    end
  otherwise
    do
      /* Anything else                      */
      calldsn1  = '?.'||lv2'.COBOL'
      calldsn2  = lv2||'.FT.COBOL'
      calldsn_nr = 2      /* Number of entries in the variable above */
    end
end
return
/*----------------------------------------------------------------------
! Restore cursor
----------------------------------------------------------------------*/
RESTORE_CURSOR:
Address 'ISREDIT'
'locate' v1   /*       Return the CURSOR         */
'reset find'         /* Remove any highlighting of found strings */
return
/********************************************************************/
/* Get the COBOL word where the cursor is placed.  We need this for */
/* a line such as                                                   */
/*          CALL 'E2064020' USING COPY BMATE001.                    */
/* where we need to know if the cursor is under the CALL or the     */
/* COPY statement                                                   */
/********************************************************************/
get_line_word:
temp_line = substr(line,v2)     /* Get from cursor to end of line */
temp_word = word(temp_line,1)   /* Get only the actual word */
temp_line = substr(line,1,v2 - 1) /* Get from cursor to end of line */
temp_line = reverse(temp_line)
if substr(temp_line,1,1) <> ' ' then
 temp_line = word(temp_line,1)   /* Get only the actual word */
else
 temp_line = ''
/* Reverse it and glue the start and end words together        */
temp_word = reverse(temp_line)||temp_word
temp_word = strip(temp_word)     /* and remove all blanks */
return
/**********************************************************************/
/* We've discovered that the user has called FINCL with 2 possible    */
/* combinations on the same line - check wkich one the cursor is under*/
/**********************************************************************/
determine_which_call:
call get_line_word
Select                                   /* select action             */
  When temp_word = 'COPY'       then     /* On a COPY line?           */
    Call COPY_INCLUDE 'COPY '            /* Handle the COPY    member */
  When temp_word = 'CALL'    Then        /* Is it CALL stmt?          */
    Call call_stmt                       /* Yes                       */
  Otherwise                              /* Nop stmt                  */
    Call invalid_cursor 'CALL COPY'
End

return
/**********************************************************************/
/* Return the current line where the cursor is MINUS a possible      */
/* leading 7 characters if there are the extra characters i pos 1-7  */
/*********************************************************************/
get_current_line:
'(LINE)  = LINE .zcsr'           /* Take data from that line  */
line = substr(line,leading)
return
/**********************************************************************/
/*                                                                    */
/**********************************************************************/
invalid_cursor:

 arg type1 type2
 zedsmsg = type1'/'type2' on same line'
 zedlmsg = 'Place cursor under either 'type1' or 'type2
 Call ISPFMSG
 return

DispDoc:
   ADDRESS TSO "CLEAR"
   SAY " JT - Jump to Paragraph on Line with Cursor / CopyBook "
   SAY
   SAY ERRORMSG
   SAY
   SAY " FORMAT "
   SAY "    JT    ( ? )                                    )   "
   SAY
   SAY "    Places display at Paragraph on line where cursor   "
   SAY "    was positioned. Nests invocation and returns via   "
   SAY "    JB macro.                                          "
   SAY
   SAY "    If placed on COPY statement line, will attempt to  "
   SAY "    View that CopyBook.                                "
   SAY
   RETURN
