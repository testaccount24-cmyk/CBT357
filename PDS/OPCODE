/**  REXX -- OPCODE IDENTIFIER  **/
   SAVEMSG = MSG()
   IF SAVEMSG = 'ON'  THEN  X = MSG("OFF")
   CALLED = SYSVAR(SYSNEST)
   X = ADDRESS()
   SUBCOM ISREDIT
   IF RC = 0 THEN DO
      UMODE = 'ISREDIT'
      ADDRESS ISPEXEC "CONTROL ERRORS RETURN"
      ADDRESS ISREDIT "ISREDIT MACRO ("CODE")"
      IF RC = 0 THEN DO
         ADDRESS ISREDIT "ISREDIT ("DSN") = DATASET"
      END
   END
   IF DSN = 'DSN' THEN DO
      UMODE = 'ISPEXEC'
      ARG CODE
   END
   ELSE DO
      ADDRESS ISREDIT "ISREDIT ("LIN","COL") = CURSOR"
   END
   CODE = TRANSLATE(CODE)
   IF CODE = '' THEN SIGNAL DISPDOC

   OPCODE.     = ''
   OPCODE.AC   = 'AC   STORE THEN AND SYSTEM MASK    STNSM SI    '
   OPCODE.AD   = 'AD   STORE THEN OR SYSTEM MASK     STOSM SI    '
   OPCODE.AE   = 'AE   SIGNAL PROCESSOR              SIGP  RS   C'
   OPCODE.AF   = 'AF   MONITOR CALL                  MC    SI    '
   OPCODE.A70  = 'A70  TEST UNDER MASK HIGH          TMH   RI   C'
   OPCODE.A71  = 'A71  TEST UNDER MASK LOW           TML   RI   C'
   OPCODE.A74  = 'A74  BRANCH RELATIVE ON CONDITION  BRC   RI    '
   OPCODE.A75  = 'A75  BRANCH RELATIVE AND SAVE      BRAS  RI    '
   OPCODE.A76  = 'A76  BRANCH RELATIVE ON COUNT      BRCT  RI    '
   OPCODE.A78  = 'A78  LOAD HALFWORD IMMEDIATE       LHI   RI    '
   OPCODE.A7A  = 'A7A  ADD HALFWORD IMMEDIATE        AHI   RI   C'
   OPCODE.A7C  = 'A7C  MULTIPLY HALFWORD IMMEDIATE   MHI   RI    '
   OPCODE.A7E  = 'A7E  COMPARE HALFWORD IMMEDIATE    CHI   RI   C'
   OPCODE.A8   = 'A8   MOVE LONG EXTENDED            MVCLE RS   C'
   OPCODE.A9   = 'A9   COMPARE LOGICAL LONG EXTENDED CLCLE RS   C'
   OPCODE.BA   = 'BA   COMPARE AND SWAP              CS    RS   C'
   OPCODE.BB   = 'BB   COMPARE DOUBLE AND SWAP       CDS   RS   C'
   OPCODE.BD   = 'BD   COMPARE LOGICAL C. UNDER MASK CLM   RS   C'
   OPCODE.BE   = 'BE   STORE CHARACTERS UNDER MASK   STCM  RS    '
   OPCODE.BF   = 'BF   INSERT CHARACTERS UNDER MASK  ICM   RS   C'
   OPCODE.B1   = 'B1   LOAD REAL ADDRESS             LRA   RX   C'
   OPCODE.B202 = 'B202 STORE CPU ID                  STIDP S     '
   OPCODE.B204 = 'B204 SET CLOCK                     SCK   S    C'
   OPCODE.B205 = 'B205 STORE CLOCK                   STCK  S    C'
   OPCODE.B206 = 'B206 SET CLOCK COMPARATOR          SCKC  S     '
   OPCODE.B207 = 'B207 STORE CLOCK COMPARATOR        STCKC S     '
   OPCODE.B208 = 'B208 SET CPU TIMER                 SPT   S     '
   OPCODE.B209 = 'B209 STORE CPU TIMER               STPT  S     '
   OPCODE.B20A = 'B20A SET PSW KEY FROM ADDRESS      SPKA  S     '
   OPCODE.B20B = 'B20B INSERT PSW KEY                IPK   S     '
   OPCODE.B20D = 'B20D PURGE TLB                     PTLB  S     '
   OPCODE.B210 = 'B210 SET PREFIX                    SPX   S     '
   OPCODE.B211 = 'B211 STORE PREFIX                  STPX  S     '
   OPCODE.B212 = 'B212 STORE CPU ADDRESS             STAP  S     '
   OPCODE.B218 = 'B218 PROGRAM CALL                  PC    S     '
   OPCODE.B219 = 'B219 SET ADDRESS SPACE CONTROL     SAC   S     '
   OPCODE.B21A = 'B21A COMPARE AND FORM CODEWORD     CFC   S    C'
   OPCODE.B221 = 'B221 INVALIDATE PAGE TABLE ENTRY   IPTE  RRE   '
   OPCODE.B222 = 'B222 INSERT PROGRAM MASK           IPM   RRE   '
   OPCODE.B223 = 'B223 INSERT VIRTUAL STORAGE KEY    IVSK  RRE   '
   OPCODE.B224 = 'B224 INSERT ADDRESS SPACE CONTROL  IAC   RRE  C'
   OPCODE.B225 = 'B225 SET SECONDARY ASN             SSAR  RRE   '
   OPCODE.B226 = 'B226 EXTRACT PRIMARY ASN           EPAR  RRE   '
   OPCODE.B227 = 'B227 EXTRACT SECONDARY ASN         ESAR  RRE   '
   OPCODE.B228 = 'B228 PROGRAM TRANSFER              PT    RRE   '
   OPCODE.B229 = 'B229 INSERT STORAGE KEY EXTENDED   ISKE  RRE   '
   OPCODE.B22A = 'B22A RESET REFERENCE BIT EXTENDED  RRBE  RRE  C'
   OPCODE.B22B = 'B22B SET STORAGE KEY EXTENDED      SSKE  RRE   '
   OPCODE.B22C = 'B22C TEST BLOCK                    TB    RRE  C'
   OPCODE.B22D = 'B22D DIVIDE (EXTENDED)             DXR   RRE   '
   OPCODE.B230 = 'B230 CLEAR SUBCHANNEL              CSCH  S    C'
   OPCODE.B231 = 'B231 HALT SUBCHANNEL               HSCH  S    C'
   OPCODE.B232 = 'B232 MODIFY SUBCHANNEL             MSCH  S    C'
   OPCODE.B233 = 'B233 START SUBCHANNEL              SSCH  S    C'
   OPCODE.B234 = 'B234 STORE SUBCHANNEL              STSCH S    C'
   OPCODE.B235 = 'B235 TEST SUBCHANNEL               TSCH  S    C'
   OPCODE.B236 = 'B236 TEST PENDING INTERRUPTION     TPI   S    C'
   OPCODE.B237 = 'B237 SET ADDRESS LIMIT             SAL   S     '
   OPCODE.B238 = 'B238 RESUME SUBCHANNEL             RSCH  S    C'
   OPCODE.B239 = 'B239 STORE CHANNEL REPORT WORD     STCRW S    C'
   OPCODE.B23A = 'B23A STORE CHANNEL PATH STATUS     STCPS S     '
   OPCODE.B23B = 'B23B RESET CHANNEL PATH            RCHP  S    C'
   OPCODE.B23C = 'B23C SET CHANNEL MONITOR           SCHM  S     '
   OPCODE.B240 = 'B240 BRANCH AND STACK              BAKR  RRE   '
   OPCODE.B241 = 'B241 CHECKSUM                      CKSM  RRE  C'
   OPCODE.B244 = 'B244 SQUARE ROOT (LONG)            SQDR  RRE   '
   OPCODE.B245 = 'B245 SQUARE ROOT (SHORT)           SQER  RRE   '
   OPCODE.B246 = 'B246 STORE USING REAL ADDRESS      STURA RRE   '
   OPCODE.B247 = 'B247 MODIFY STACKED STATE          MSTA  RRE   '
   OPCODE.B248 = 'B248 PURGE ALB                     PALB  RRE   '
   OPCODE.B249 = 'B249 EXTRACT STACKED REGISTERS     EREG  RRE   '
   OPCODE.B24A = 'B24A EXTRACT STACKED STATE         ESTA  RRE  C'
   OPCODE.B24B = 'B24B LOAD USING REAL ADDRESS       LURA  RRE   '
   OPCODE.B24C = 'B24C TEST ACCESS                   TAR   RRE  C'
   OPCODE.B24D = 'B24D COPY ACCESS                   CPYA  RRE   '
   OPCODE.B24E = 'B24E SET ACCESS                    SAR   RRE   '
   OPCODE.B24F = 'B24F EXTRACT ACCESS                EAR   RRE   '
   OPCODE.B252 = 'B252 MULTIPLY SINGLE               MSR   RRE   '
   OPCODE.B254 = 'B254 MOVE PAGE (FACILITY 1)        MVPG  RRE  C'
   OPCODE.B254 = 'B254 MOVE PAGE (FACILITY 2)        MVPG  RRE  C'
   OPCODE.B255 = 'B255 MOVE STRING                   MVST  RRE  C'
   OPCODE.B257 = 'B257 COMPARE UNTIL SUBSTRING EQUAL CUSE  RRE  C'
   OPCODE.B258 = 'B258 BRANCH IN SUBSPACE GROUP      BSG   RRE   '
   OPCODE.B25A = 'B25A BRANCH AND SET AUTHORITY      BSA   RRE   '
   OPCODE.B25D = 'B25D COMPARE LOGICAL STRING        CLST  RRE  C'
   OPCODE.B25E = 'B25E SEARCH STRING                 SRST  RRE  C'
   OPCODE.B279 = 'B279 SET ADDR. SPACE CONTROL FAST  SACF  S     '
   OPCODE.B6   = 'B6   STORE CONTROL                 STCTL RS    '
   OPCODE.B7   = 'B7   LOAD CONTROL                  LCTL  RS    '
   OPCODE.DA   = 'DA   MOVE TO PRIMARY               MVCP  SS   C'
   OPCODE.DB   = 'DB   MOVE TO SECONDARY             MVCS  SS   C'
   OPCODE.DC   = 'DC   TRANSLATE                     TR    SS    '
   OPCODE.DD   = 'DD   TRANSLATE AND TEST            TRT   SS   C'
   OPCODE.DE   = 'DE   EDIT                          ED    SS   C'
   OPCODE.DF   = 'DF   EDIT AND MARK                 EDMK  SS   C'
   OPCODE.D1   = 'D1   MOVE NUMERICS                 MVN   SS    '
   OPCODE.D2   = 'D2   MOVE (CHARACTER)              MVC   SS    '
   OPCODE.D3   = 'D3   MOVE ZONES                    MVZ   SS    '
   OPCODE.D4   = 'D4   AND (CHARACTER)               NC    SS   C'
   OPCODE.D5   = 'D5   COMPARE LOGICAL (CHARACTER)   CLC   SS   C'
   OPCODE.D6   = 'D6   OR (CHARACTER)                OC    SS   C'
   OPCODE.D7   = 'D7   EXCLUSIVE OR (CHARACTER)      XC    SS   C'
   OPCODE.D9   = 'D9   MOVE WITH KEY                 MVCK  SS   C'
   OPCODE.EE   = 'EE   PERFORM LOCKED OPERATION      PLO   SS   C'
   OPCODE.E500 = 'E500 LOAD ADDRESS SPACE PARAMETERS LASP  SSE  C'
   OPCODE.E501 = 'E501 TEST PROTECTION               TPROT SSE  C'
   OPCODE.E50E = 'E50E MOVE WITH SOURCE KEY          MVCSK SSE   '
   OPCODE.E50F = 'E50F MOVE WITH DESTINATION KEY     MVCDK SSE   '
   OPCODE.E8   = 'E8   MOVE INVERSE                  MVCIN SS    '
   OPCODE.FA   = 'FA   ADD DECIMAL                   AP    SS   C'
   OPCODE.FB   = 'FB   SUBTRACT DECIMAL              SP    SS   C'
   OPCODE.FC   = 'FC   MULTIPLY DECIMAL              MP    SS    '
   OPCODE.FD   = 'FD   DIVIDE DECIMAL                DP    SS    '
   OPCODE.F0   = 'F0   SHIFT AND ROUND DECIMAL       SRP   SS   C'
   OPCODE.F1   = 'F1   MOVE WITH OFFSET              MVO   SS    '
   OPCODE.F2   = 'F2   PACK                          PACK  SS    '
   OPCODE.F3   = 'F3   UNPACK                        UNPK  SS    '
   OPCODE.F8   = 'F8   ZERO AND ADD                  ZAP   SS   C'
   OPCODE.F9   = 'F9   COMPARE DECIMAL               CP    SS   C'
   OPCODE.0A   = '0A   SUPERVISOR CALL               SVC   RR    '
   OPCODE.0B   = '0B   BRANCH AND SET MODE           BSM   RR    '
   OPCODE.0C   = '0C   BRANCH AND SAVE AND SET MODE  BASSM RR    '
   OPCODE.0D   = '0D   BRANCH AND SAVE               BASR  RR    '
   OPCODE.0E   = '0E   MOVE LONG                     MVCL  RR   C'
   OPCODE.0F   = '0F   COMPARE LOGICAL LONG          CLCL  RR   C'
   OPCODE.0101 = '0101 PROGRAM RETURN                PR    E     '
   OPCODE.0102 = '0102 UPDATE TREE                   UPT   E    C'
   OPCODE.04   = '04   SET PROGRAM MASK              SPM   RR    '
   OPCODE.05   = '05   BRANCH AND LINK               BALR  RR    '
   OPCODE.06   = '06   BRANCH ON COUNT               BCTR  RR    '
   OPCODE.07   = '07   BRANCH ON CONDITION           BCR   RR    '
   OPCODE.1A   = '1A   ADD                           AR    RR   C'
   OPCODE.1B   = '1B   SUBTRACT                      SR    RR   C'
   OPCODE.1C   = '1C   MULTIPLY                      MR    RR    '
   OPCODE.1D   = '1D   DIVIDE                        DR    RR    '
   OPCODE.1E   = '1E   ADD LOGICAL                   ALR   RR   C'
   OPCODE.1F   = '1F   SUBTRACT LOGICAL              SLR   RR   C'
   OPCODE.10   = '10   LOAD POSITIVE                 LPR   RR   C'
   OPCODE.11   = '11   LOAD NEGATIVE                 LNR   RR   C'
   OPCODE.12   = '12   LOAD AND TEST                 LTR   RR   C'
   OPCODE.13   = '13   LOAD COMPLEMENT               LCR   RR   C'
   OPCODE.14   = '14   AND                           NR    RR   C'
   OPCODE.15   = '15   COMPARE LOGICAL               CLR   RR   C'
   OPCODE.16   = '16   OR                            OR    RR   C'
   OPCODE.17   = '17   EXCLUSIVE OR                  XR    RR   C'
   OPCODE.18   = '18   LOAD                          LR    RR    '
   OPCODE.19   = '19   COMPARE                       CR    RR   C'
   OPCODE.2A   = '2A   ADD NORMALIZED (LONG)         ADR   RR   C'
   OPCODE.2B   = '2B   SUBTRACT NORMALIZED (LONG)    SDR   RR   C'
   OPCODE.2C   = '2C   MULTIPLY (LONG)               MDR   RR    '
   OPCODE.2D   = '2D   DIVIDE (LONG)                 DDR   RR    '
   OPCODE.2E   = '2E   ADD UNNORMALIZED (LONG)       AWR   RR   C'
   OPCODE.2F   = '2F   SUBTRACT UNNORMALIZED (LONG)  SWR   RR   C'
   OPCODE.20   = '20   LOAD POSITIVE (LONG)          LPDR  RR   C'
   OPCODE.21   = '21   LOAD NEGATIVE (LONG)          LNDR  RR   C'
   OPCODE.22   = '22   LOAD AND TEST (LONG)          LTDR  RR   C'
   OPCODE.23   = '23   LOAD COMPLEMENT (LONG)        LCDR  RR   C'
   OPCODE.24   = '24   HALVE (LONG)                  HDR   RR    '
   OPCODE.25   = '25   LOAD ROUNDED (EXT. TO LONG)   LRDR  RR    '
   OPCODE.26   = '26   MULTIPLY (EXTENDED)           MXR   RR    '
   OPCODE.27   = '27   MULTIPLY (LONG TO EXTENDED)   MXDR  RR    '
   OPCODE.28   = '28   LOAD (LONG)                   LDR   RR    '
   OPCODE.29   = '29   COMPARE (LONG)                CDR   RR   C'
   OPCODE.3A   = '3A   ADD NORMALIZED (SHORT)        AER   RR   C'
   OPCODE.3B   = '3B   SUBTRACT NORMALIZED (SHORT)   SER   RR   C'
   OPCODE.3C   = '3C   MULTIPLY (SHORT TO LONG)      MER   RR    '
   OPCODE.3D   = '3D   DIVIDE (SHORT)                DER   RR    '
   OPCODE.3E   = '3E   ADD UNNORMALIZED (SHORT)      AUR   RR   C'
   OPCODE.3F   = '3F   SUBTRACT UNNORMALIZED (SHORT) SUR   RR   C'
   OPCODE.30   = '30   LOAD POSITIVE (SHORT)         LPER  RR   C'
   OPCODE.31   = '31   LOAD NEGATIVE (SHORT)         LNER  RR   C'
   OPCODE.32   = '32   LOAD AND TEST (SHORT)         LTER  RR   C'
   OPCODE.33   = '33   LOAD COMPLEMENT (SHORT)       LCER  RR   C'
   OPCODE.34   = '34   HALVE (SHORT)                 HER   RR    '
   OPCODE.35   = '35   LOAD ROUNDED (LONG TO SHORT)  LRER  RR    '
   OPCODE.36   = '36   ADD NORMALIZED (EXTENDED)     AXR   RR   C'
   OPCODE.37   = '37   SUBTRACT NORMALIZED (EXT.)    SXR   RR   C'
   OPCODE.38   = '38   LOAD (SHORT)                  LER   RR    '
   OPCODE.39   = '39   COMPARE (SHORT)               CER   RR   C'
   OPCODE.4A   = '4A   ADD HALFWORD                  AH    RX   C'
   OPCODE.4B   = '4B   SUBTRACT HALFWORD             SH    RX   C'
   OPCODE.4C   = '4C   MULTIPLY HALFWORD             MH    RX    '
   OPCODE.4D   = '4D   BRANCH AND SAVE               BAS   RX    '
   OPCODE.4E   = '4E   CONVERT TO DECIMAL            CVD   RX    '
   OPCODE.4F   = '4F   CONVERT TO BINARY             CVB   RX    '
   OPCODE.40   = '40   STORE HALFWORD                STH   RX    '
   OPCODE.41   = '41   LOAD ADDRESS                  LA    RX    '
   OPCODE.42   = '42   STORE CHARACTER               STC   RX    '
   OPCODE.43   = '43   INSERT CHARACTER              IC    RX    '
   OPCODE.44   = '44   EXECUTE                       EX    RX    '
   OPCODE.45   = '45   BRANCH AND LINK               BAL   RX    '
   OPCODE.46   = '46   BRANCH ON COUNT               BCT   RX    '
   OPCODE.47   = '47   BRANCH ON CONDITION           BC    RX    '
   OPCODE.48   = '48   LOAD HALFWORD                 LH    RX    '
   OPCODE.49   = '49   COMPARE HALFWORD              CH    RX   C'
   OPCODE.5A   = '5A   ADD                           A     RX   C'
   OPCODE.5B   = '5B   SUBTRACT                      S     RX   C'
   OPCODE.5C   = '5C   MULTIPLY                      M     RX    '
   OPCODE.5D   = '5D   DIVIDE                        D     RX    '
   OPCODE.5E   = '5E   ADD LOGICAL                   AL    RX   C'
   OPCODE.5F   = '5F   SUBTRACT LOGICAL              SL    RX   C'
   OPCODE.50   = '50   STORE                         ST    RX    '
   OPCODE.51   = '51   LOAD ADDRESS EXTENDED         LAE   RX    '
   OPCODE.54   = '54   AND                           N     RX   C'
   OPCODE.55   = '55   COMPARE LOGICAL               CL    RX   C'
   OPCODE.56   = '56   OR                            O     RX   C'
   OPCODE.57   = '57   EXCLUSIVE OR                  X     RX   C'
   OPCODE.58   = '58   LOAD                          L     RX    '
   OPCODE.59   = '59   COMPARE                       C     RX   C'
   OPCODE.6A   = '6A   ADD NORMALIZED (LONG)         AD    RX   C'
   OPCODE.6B   = '6B   SUBTRACT NORMALIZED (LONG)    SD    RX   C'
   OPCODE.6C   = '6C   MULTIPLY (LONG)               MD    RX    '
   OPCODE.6D   = '6D   DIVIDE (LONG)                 DD    RX    '
   OPCODE.6E   = '6E   ADD UNNORMALIZED (LONG)       AW    RX   C'
   OPCODE.6F   = '6F   SUBTRACT UNNORMALIZED (LONG)  SW    RX   C'
   OPCODE.60   = '60   STORE (LONG)                  STD   RX    '
   OPCODE.67   = '67   MULTIPLY (LONG TO EXTENDED)   MXD   RX    '
   OPCODE.68   = '68   LOAD (LONG)                   LD    RX    '
   OPCODE.69   = '69   COMPARE (LONG)                CD    RX   C'
   OPCODE.7A   = '7A   ADD NORMALIZED (SHORT)        AE    RX   C'
   OPCODE.7B   = '7B   SUBTRACT NORMALIZED (SHORT)   SE    RX   C'
   OPCODE.7C   = '7C   MULTIPLY (SHORT TO LONG)      ME    RX    '
   OPCODE.7D   = '7D   DIVIDE (SHORT)                DE    RX    '
   OPCODE.7E   = '7E   ADD UNNORMALIZED (SHORT)      AU    RX   C'
   OPCODE.7F   = '7F   SUBTRACT UNNORMALIZED (SHORT) SU    RX   C'
   OPCODE.70   = '70   STORE (SHORT)                 STE   RX    '
   OPCODE.71   = '71   MULTIPLY SINGLE               MS    RX    '
   OPCODE.78   = '78   LOAD (SHORT)                  LE    RX    '
   OPCODE.79   = '79   COMPARE (SHORT)               CE    RX   C'
   OPCODE.8A   = '8A   SHIFT RIGHT SINGLE            SRA   RS   C'
   OPCODE.8B   = '8B   SHIFT LEFT SINGLE             SLA   RS   C'
   OPCODE.8C   = '8C   SHIFT RIGHT DOUBLE LOGICAL    SRDL  RS    '
   OPCODE.8D   = '8D   SHIFT LEFT DOUBLE LOGICAL     SLDL  RS    '
   OPCODE.8E   = '8E   SHIFT RIGHT DOUBLE            SRDA  RS   C'
   OPCODE.8F   = '8F   SHIFT LEFT DOUBLE             SLDA  RS   C'
   OPCODE.80   = '80   SET SYSTEM MASK               SSM   S     '
   OPCODE.82   = '82   LOAD PSW                      LPSW  S     '
   OPCODE.83   = '83   DIAGNOSE                                  '
   OPCODE.84   = '84   BRANCH RELATIVE ON INDEX HIGH BRXH  RSI   '
   OPCODE.85   = '85   BRANCH RELATIVE ON INDEX L.E. BRXLE RSI   '
   OPCODE.86   = '86   BRANCH ON INDEX HIGH          BXH   RS    '
   OPCODE.87   = '87   BRANCH ON INDEX LOW OR EQUAL  BXLE  RS    '
   OPCODE.88   = '88   SHIFT RIGHT SINGLE LOGICAL    SRL   RS    '
   OPCODE.89   = '89   SHIFT LEFT SINGLE LOGICAL     SLL   RS    '
   OPCODE.9A   = '9A   LOAD ACCESS MULTIPLE          LAM   RS    '
   OPCODE.9B   = '9B   STORE ACCESS MULTIPLE         STAM  RS    '
   OPCODE.90   = '90   STORE MULTIPLE                STM   RS    '
   OPCODE.91   = '91   TEST UNDER MASK               TM    SI   C'
   OPCODE.92   = '92   MOVE (IMMEDIATE)              MVI   SI    '
   OPCODE.93   = '93   TEST AND SET                  TS    S    C'
   OPCODE.94   = '94   AND (IMMEDIATE)               NI    SI   C'
   OPCODE.95   = '95   COMPARE LOGICAL (IMMEDIATE)   CLI   SI   C'
   OPCODE.96   = '96   OR (IMMEDIATE)                OI    SI   C'
   OPCODE.97   = '97   EXCLUSIVE OR (IMMEDIATE)      XI    SI   C'
   OPCODE.98   = '98   LOAD MULTIPLE                 LM    RS    '
   OPCODE.99   = '99   TRACE                         TRACE RS    '
   DO WHILE CODE = ''
       SAY "PLEASE ENTER OP CODE (EG 41):"
       PULL CODE
       SAVMSG = ''
   END
   IF OPCODE.CODE <> ''
       THEN DO
           SAY 'OP CODE '''CODE''' IS' SUBSTR(OPCODE.CODE,06,29)
           SAY '    WITH MNEMONIC' SUBSTR(OPCODE.CODE,36,05),
               '    AND IS A(N)  ' SUBSTR(OPCODE.CODE,42,04),
               'INSTRUCTION'
           IF SUBSTR(OPCODE.CODE,47,1) = 'C'
              THEN SAY '    AND SETS A CONDITION CODE'
       END
       ELSE DO
           SAY 'OP CODE '''CODE''' NOT FOUND IN CURRENT TABLE...'
       END
   EXIT(1)

DISPDOC:
   ADDRESS TSO "CLEAR"
   SAY "OPCODE - DESCRIBE HEX ASSEMBLER INSTRUCTION              "
   SAY
   SAY " FORMAT "
   SAY
   SAY "    OPCODE  ##                                           "
   SAY
   SAY "       WILL PROVIDE A SHORT DESCRIPTION OF THE OPERATION "
   SAY "       CODE INPUT AS A HEX VALUE.                        "
   SAY
   SAY " EXAMPLE "
   SAY
   SAY "    OPCODE  90                                           "
   SAY
   SAY "       OP CODE '90' IS STORE MULTIPLE                    "
   SAY "           WITH MNEMONIC STM AND IS A(N) RS INSTRUCTION  "
   SAY
   EXIT(1)

