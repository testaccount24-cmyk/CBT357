//-YOUR-USERID-C JOB  (-YOUR-ACCT-INFO-),'-YOUR-NAME-',
//             CLASS=2,MSGCLASS=X,NOTIFY=-YOUR-USERID-
//***
//*** COBOL CODE TO SET, TEST OR FLIP BITS WITHIN ANY ARRAY -
//*** CONTAINED IN A TEST PROGRAM
//***
//C          EXEC     PGM=IGYCRCTL,REGION=4M,
//             PARM=('LIB,MAP,NUMPROC(PFD),OFF,OPTIMIZE',
//            'APOST,NOSEQ,TRUNC(OPT),XREF')
//SYSIN        DD       *

       IDENTIFICATION DIVISION.
       PROGRAM-ID.  TESTER.

       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT I
               ASSIGN TO I.
           SELECT O
               ASSIGN TO O.

       DATA DIVISION.
       FILE SECTION.
       FD  I
           RECORDING MODE IS F
           BLOCK CONTAINS 0 RECORDS.
       01  INPUT-REC    PIC X(00080).
       FD  O
           RECORDING MODE IS F
           BLOCK CONTAINS 0 RECORDS.
       01  OUTPUT-REC   PIC X(00080).
       WORKING-STORAGE SECTION.
       01  WS-INPUT-REC.
           05  WS-FUNCTION            PIC X(00010).
           05  WS-BIT-NUMBER          PIC 9(00009).
           05                         PIC X(00001).
           05  WS-EXPECTED-RC         PIC 9(00002).
           05                         PIC X(00058).
       01  WORK-AREAS.
          05  WS-ARRAY                PIC  X(00080)
                                      VALUE ALL LOW-VALUES.
          05  WS-RC                   PIC  99       VALUE 00.
          05  END-OF-FILE-STATUS      PIC X         VALUE 'N'.
              88  AT-END-OF-FILE                    VALUE 'Y'.

       PROCEDURE DIVISION.

       0000-MAIN.
           PERFORM 0100-INITIALIZATION
           PERFORM 0200-READ-WRITE-LOOP
               UNTIL AT-END-OF-FILE
           PERFORM 0900-TERMINATION
           GOBACK
           .

       0100-INITIALIZATION.
           OPEN  INPUT  I
                 OUTPUT O
           READ  I INTO WS-INPUT-REC
               AT END SET AT-END-OF-FILE TO TRUE
               END-READ
           .

       0200-READ-WRITE-LOOP.
           PERFORM 0400-PERFORM-FUNCTION
           DISPLAY 'FUNCTION ' WS-FUNCTION ' -- BIT ' WS-BIT-NUMBER
           IF WS-RC = WS-EXPECTED-RC
               DISPLAY '   *OK*  RC OK  = ' WS-RC
           ELSE
               DISPLAY '   *NG*  BAD RC = ' WS-RC
                       ' EXPECTED ' WS-EXPECTED-RC
               MOVE 4 TO RETURN-CODE
           END-IF
           WRITE OUTPUT-REC FROM WS-ARRAY
           READ  I INTO WS-INPUT-REC
               AT END SET AT-END-OF-FILE TO TRUE
               END-READ
           .

       0400-PERFORM-FUNCTION.
           EVALUATE WS-FUNCTION
               WHEN 'SETON'
                   CALL  'SETON'   USING  WS-ARRAY  WS-BIT-NUMBER  WS-RC
               WHEN 'SETOFF'
                   CALL  'SETOFF'  USING  WS-ARRAY  WS-BIT-NUMBER  WS-RC
               WHEN 'TESTBIT'
                   CALL  'TESTBIT' USING  WS-ARRAY  WS-BIT-NUMBER  WS-RC
               WHEN 'FLIPBIT'
                   CALL  'FLIPBIT' USING  WS-ARRAY  WS-BIT-NUMBER  WS-RC
           END-EVALUATE
           .

       0900-TERMINATION.
           CLOSE I
                 O
           .

       IDENTIFICATION DIVISION.
       PROGRAM-ID.  TESTBIT COMMON.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  WORK-FIELDS.
           05  COMP-9-4        PIC     9999   COMP.
           05                  REDEFINES  COMP-9-4.
               10  COMP-9-4-1  PIC     X.
               10  COMP-9-4-2  PIC     X.
           05  WS-BYTE         PIC     9(8)   COMP.
           05  WS-RMNDR        PIC     9(4)   COMP.
           05  WS-OFFSET       PIC     9(4)   COMP.
       LINKAGE SECTION.
       01  LS-BIT-ARRAY            PIC  X(1000000).
       01                          REDEFINES LS-BIT-ARRAY.
           05  LS-ARRAY            OCCURS 1000000
                                   PIC  X.
       01  LS-BIT-NUMBER           PIC  9(9).
       01  LS-RC                   PIC  99.
       PROCEDURE DIVISION   USING  LS-BIT-ARRAY
                                   LS-BIT-NUMBER
                                   LS-RC
                                   .
      **  DETERMINE WHICH BYTE AND OFFSET TO USE
           DIVIDE LS-BIT-NUMBER BY 8
               GIVING WS-BYTE
               REMAINDER WS-RMNDR
           IF WS-RMNDR > 0
              ADD 1 TO WS-BYTE
           END-IF
      **  RETRIEVE BYTE TO COMPUTATIONAL AREA
           MOVE X'00'                TO COMP-9-4-1
           MOVE LS-ARRAY(WS-BYTE)    TO COMP-9-4-2
      **  USING OFFSET, GET BIT VALUE
           IF WS-RMNDR > 0
               COMPUTE WS-OFFSET = 2 ** (8 - WS-RMNDR)
               DIVIDE COMP-9-4 BY WS-OFFSET GIVING COMP-9-4
           END-IF
           DIVIDE COMP-9-4 BY 2 GIVING WS-OFFSET REMAINDER LS-RC
           EXIT PROGRAM.
       END PROGRAM TESTBIT.

       IDENTIFICATION DIVISION.
       PROGRAM-ID.  SETON COMMON.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  WORK-FIELDS.
           05  COMP-9-4        PIC     9999   COMP.
           05                  REDEFINES  COMP-9-4.
               10  COMP-9-4-1  PIC     X.
               10  COMP-9-4-2  PIC     X.
           05  WS-BYTE         PIC     9(8)   COMP.
           05  WS-RMNDR        PIC     9(4)   COMP.
           05  WS-OFFSET       PIC     9(4)   COMP.
       LINKAGE SECTION.
       01  LS-BIT-ARRAY            PIC  X(1000000).
       01                          REDEFINES LS-BIT-ARRAY.
           05  LS-ARRAY            OCCURS 1000000
                                   PIC  X.
       01  LS-BIT-NUMBER           PIC  9(9).
       01  LS-RC                   PIC  99.
       PROCEDURE DIVISION   USING  LS-BIT-ARRAY
                                   LS-BIT-NUMBER
                                   LS-RC
                                   .
      **  DETERMINE WHICH BYTE AND OFFSET TO USE
           DIVIDE LS-BIT-NUMBER BY 8
               GIVING WS-BYTE
               REMAINDER WS-RMNDR
           IF WS-RMNDR > 0
              ADD 1 TO WS-BYTE
           END-IF
      **  CHECK IF ALREADY ON
           CALL  'TESTBIT' USING  LS-BIT-ARRAY  LS-BIT-NUMBER  LS-RC
           IF LS-RC = 0
      **  RETRIEVE BYTE TO COMPUTATIONAL AREA
               MOVE X'00'             TO COMP-9-4-1
               MOVE LS-ARRAY(WS-BYTE) TO COMP-9-4-2
      **  USING OFFSET, SET BIT VALUE
               IF WS-RMNDR = 0
                   MOVE 1 TO WS-OFFSET
               ELSE
                   COMPUTE WS-OFFSET = 2 ** (8 - WS-RMNDR)
               END-IF
               ADD WS-OFFSET TO COMP-9-4
               MOVE COMP-9-4-2 TO LS-ARRAY(WS-BYTE)
               MOVE 1 TO LS-RC
           END-IF
           EXIT PROGRAM.
       END PROGRAM SETON.

       IDENTIFICATION DIVISION.
       PROGRAM-ID.  SETOFF COMMON.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  WORK-FIELDS.
           05  COMP-9-4        PIC     9999   COMP.
           05                  REDEFINES  COMP-9-4.
               10  COMP-9-4-1  PIC     X.
               10  COMP-9-4-2  PIC     X.
           05  WS-BYTE         PIC     9(8)   COMP.
           05  WS-RMNDR        PIC     9(4)   COMP.
           05  WS-OFFSET       PIC     9(4)   COMP.
       LINKAGE SECTION.
       01  LS-BIT-ARRAY            PIC  X(1000000).
       01                          REDEFINES LS-BIT-ARRAY.
           05  LS-ARRAY            OCCURS 1000000
                                   PIC  X.
       01  LS-BIT-NUMBER           PIC  9(9).
       01  LS-RC                   PIC  99.
       PROCEDURE DIVISION   USING  LS-BIT-ARRAY
                                   LS-BIT-NUMBER
                                   LS-RC
                                   .
      **  DETERMINE WHICH BYTE AND OFFSET TO USE
           DIVIDE LS-BIT-NUMBER BY 8
               GIVING WS-BYTE
               REMAINDER WS-RMNDR
           IF WS-RMNDR > 0
              ADD 1 TO WS-BYTE
           END-IF
      **  CHECK IF ALREADY OFF
           CALL  'TESTBIT' USING  LS-BIT-ARRAY  LS-BIT-NUMBER  LS-RC
           IF LS-RC NOT = 0
      **  RETRIEVE BYTE TO COMPUTATIONAL AREA
               MOVE X'00'             TO COMP-9-4-1
               MOVE LS-ARRAY(WS-BYTE) TO COMP-9-4-2
      **  USING OFFSET, DROP BIT VALUE
               IF WS-RMNDR = 0
                   MOVE 1 TO WS-OFFSET
               ELSE
                   COMPUTE WS-OFFSET = 2 ** (8 - WS-RMNDR)
               END-IF
               SUBTRACT WS-OFFSET FROM COMP-9-4
               MOVE COMP-9-4-2 TO LS-ARRAY(WS-BYTE)
               MOVE 0 TO LS-RC
           END-IF
           EXIT PROGRAM.
       END PROGRAM SETOFF.

       IDENTIFICATION DIVISION.
       PROGRAM-ID.  FLIPBIT COMMON.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  WORK-FIELDS.
           05  COMP-9-4        PIC     9999   COMP.
           05                  REDEFINES  COMP-9-4.
               10  COMP-9-4-1  PIC     X.
               10  COMP-9-4-2  PIC     X.
           05  WS-BYTE         PIC     9(8)   COMP.
           05  WS-RMNDR        PIC     9(4)   COMP.
           05  WS-OFFSET       PIC     9(4)   COMP.
       LINKAGE SECTION.
       01  LS-BIT-ARRAY            PIC  X(1000000).
       01                          REDEFINES LS-BIT-ARRAY.
           05  LS-ARRAY            OCCURS 1000000
                                   PIC  X.
       01  LS-BIT-NUMBER           PIC  9(9).
       01  LS-RC                   PIC  99.
       PROCEDURE DIVISION   USING  LS-BIT-ARRAY
                                   LS-BIT-NUMBER
                                   LS-RC
                                   .
      **  DETERMINE WHICH BYTE AND OFFSET TO USE
           DIVIDE LS-BIT-NUMBER BY 8
               GIVING WS-BYTE
               REMAINDER WS-RMNDR
           IF WS-RMNDR > 0
              ADD 1 TO WS-BYTE
           END-IF
           MOVE X'00'             TO COMP-9-4-1
           MOVE LS-ARRAY(WS-BYTE) TO COMP-9-4-2
      **  COMPUTE OFFSET VALUE
           IF WS-RMNDR = 0
               MOVE 1 TO WS-OFFSET
           ELSE
               COMPUTE WS-OFFSET = 2 ** (8 - WS-RMNDR)
           END-IF
      **  CHECK FOR CURRENT VALUE
           CALL  'TESTBIT' USING  LS-BIT-ARRAY  LS-BIT-NUMBER  LS-RC
      **  USING OFFSET, FLIP BIT VALUE
           IF LS-RC = 0
               ADD WS-OFFSET TO COMP-9-4
               MOVE 1 TO LS-RC
           ELSE
               SUBTRACT WS-OFFSET FROM COMP-9-4
               MOVE 0 TO LS-RC
           END-IF
           MOVE COMP-9-4-2 TO LS-ARRAY(WS-BYTE)
           EXIT PROGRAM.
       END PROGRAM FLIPBIT.

       END PROGRAM TESTER.

//SYSPRINT     DD       SYSOUT=*
//SYSLIN       DD       DSN=&&LOADSET,DISP=(MOD,PASS),
//             UNIT=SYSDA,SPACE=(CYL,(3,3)),
//             DCB=(BLKSIZE=0,LRECL=80,RECFM=FB)
//SYSUT1       DD       UNIT=SYSDA,SPACE=(CYL,(05,02))
//SYSUT2       DD       UNIT=SYSDA,SPACE=(CYL,(05,02))
//SYSUT3       DD       UNIT=SYSDA,SPACE=(CYL,(05,02))
//SYSUT4       DD       UNIT=SYSDA,SPACE=(CYL,(05,02))
//SYSUT5       DD       UNIT=SYSDA,SPACE=(CYL,(05,02))
//SYSUT6       DD       UNIT=SYSDA,SPACE=(CYL,(05,02))
//SYSUT7       DD       UNIT=SYSDA,SPACE=(CYL,(05,02))
//***
//GO         EXEC     PGM=LOADER,
//             PARM='AMODE(31),RMODE(ANY),MAP,PRINT',
//             REGION=4M,COND=(5,LT)
//SYSLIB       DD       DISP=SHR,DSN=-YOUR-SCEELLED-
//SYSLIN       DD       DSN=&&LOADSET,DISP=(OLD,DELETE,DELETE)
//SYSLOUT      DD       SYSOUT=*
//SYSPRINT     DD       SYSOUT=*
//I            DD       *
TESTBIT   000000001 00
SETON     000000011 01
TESTBIT   000000011 01
FLIPBIT   000000011 00
TESTBIT   000000011 00
FLIPBIT   000000011 01
TESTBIT   000000011 01
SETON     000000024 01
TESTBIT   000000024 01
SETOFF    000000024 00
TESTBIT   000000024 00
SETON     000000025 01
SETON     000000026 01
SETON     000000027 01
SETON     000000028 01
SETON     000000029 01
SETON     000000030 01
SETON     000000031 01
SETON     000000032 01
SETON     000000025 01
SETON     000000640 01
TESTBIT   000000640 01
SETOFF    000000640 00
TESTBIT   000000640 00
//O            DD       SYSOUT=*
//SYSOUT       DD       SYSOUT=*
//***
