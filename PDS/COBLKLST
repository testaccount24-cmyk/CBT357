//-YOUR-USERID-C JOB  (-YOUR-ACCT-INFO-),'-YOUR-NAME-',
//             CLASS=2,MSGCLASS=X,NOTIFY=-YOUR-USERID-
//***
//***  COBOL LINKED LIST CODE
//***
//C          EXEC     PGM=IGYCRCTL,REGION=4M,
//             PARM=('LIB,MAP,NUMPROC(PFD),OFF,OPTIMIZE',
//            'APOST,NOSEQ,TRUNC(OPT),XREF')
//SYSIN        DD       *
      ****************************************************************
      **                                                             *
      **   This code illustrates the construction of a linked        *
      **   list using the LE storage management services, CEEGTST    *
      **   to obtain storage and CEEFRST to free it.                 *
      **                                                             *
      **    -  Storage for each list element is allocated from the   *
      **       user heap                                             *
      **                                                             *
      **    -  The list element is initialized and appended to the   *
      **       list                                                  *
      **                                                             *
      **    -  After three members are appended, the list traversed  *
      **       and the data saved in each element is displayed       *
      **                                                             *
      **    -  The link list storage is freed                        *
      **                                                             *
      ****************************************************************
       IDENTIFICATION DIVISION.
       PROGRAM-ID. CBLKLST.
       DATA DIVISION.
      *******************************************************
      ** Storage management parameters, including pointers **
      ** for the returned storage addresses.               **
      *******************************************************
       WORKING-STORAGE SECTION.
       01  LCOUNT                  PIC 9            VALUE 0.
       01  HEAPID                  PIC S9(9) BINARY VALUE 0.
       01  NBYTES                  PIC S9(9) BINARY.
       01  FC.
           05                      PIC X(8).
               88  CEE000       VALUE X'0000000000000000'.
           05                      PIC X(4).
       01  ADDRSS                  POINTER VALUE NULL.
       01  ANCHOR                  POINTER VALUE NULL.

      *******************************************************
      ** Define variables in linkage section in order to   **
      ** reference storage returned as addresses in        **
      ** pointer variables by Language Environment.        **
      *******************************************************
       LINKAGE SECTION.
       01  LIST-ITEM.
           05  CHARDATA            PIC X(80).
           05  NEXT-ITEM           POINTER.

       PROCEDURE DIVISION.

           DISPLAY '***************************************'.
           DISPLAY 'CBLKLST is now in motion.              '.
           DISPLAY '***************************************'.

      *******************************************************
      **  Call CEEGTST to get storage from user heap       **
      *******************************************************
      ** If successfully obtained, LE returns the address  **
      ** in ADDRSS. The address of variable LIST-ITEM in   **
      ** the linkage section can now be SET to address the **
      ** acquired storage.  The list origin is pointed to  **
      ** by ANCHOR and each item points to the next item.  **
      *******************************************************
           MOVE LENGTH OF LIST-ITEM TO NBYTES
           PERFORM 3 TIMES
               ADD 1 TO LCOUNT
               CALL  'CEEGTST'  USING  HEAPID, NBYTES, ADDRSS, FC
               IF CEE000
                   IF ANCHOR = NULL
                       SET ANCHOR TO ADDRSS
                   ELSE
                       SET NEXT-ITEM TO ADDRSS
                   END-IF
                   SET ADDRESS OF LIST-ITEM TO ADDRSS
                   SET NEXT-ITEM TO NULL
                   MOVE ' ' TO CHARDATA
                   STRING 'This is list item number ' LCOUNT
                       DELIMITED BY SIZE INTO CHARDATA
               ELSE
                   DISPLAY 'Error in obtaining storage from heap'
                   GOBACK
               END-IF
           END-PERFORM

      *********************************************************
      ** On completion of the above loop, we have the        **
      ** following layout:                                   **
      **                                                     **
      ** ANCHOR --> LIST-ITEM1 --> LIST-ITEM2 --> LIST-ITEM3 **
      *********************************************************
      ** Loop thru list items 1 thru 3 and print out the     **
      ** identifying text written in the CHARDATA fields,    **
      ** freeing the storage after printing.                 **
      *********************************************************
           MOVE 0 TO LCOUNT
           PERFORM WITH TEST AFTER UNTIL (ANCHOR = NULL)
               SET ADDRESS OF LIST-ITEM TO ANCHOR
               DISPLAY CHARDATA
               SET ADDRSS TO ANCHOR
               SET ANCHOR TO NEXT-ITEM
               PERFORM 1000-FREE-STORAGE
               ADD 1 TO LCOUNT
           END-PERFORM

      *********************************************************
      ** Test a counter variable to verify that three items  **
      ** were indeed in the linked list and terminate.       **
      *********************************************************
           IF (LCOUNT = 3)
               DISPLAY '**************************************'
               DISPLAY 'CBLKLST has completed!                '
               DISPLAY '**************************************'
           ELSE
               DISPLAY 'Error in List contruction :('
           END-IF

           GOBACK
           .

       1000-FREE-STORAGE.
      *********************************************************
      *     Call CEEFRST to free this storage from user heap **
      *********************************************************
           CALL  'CEEFRST'  USING ADDRSS, FC
           IF CEE000
               CONTINUE
           ELSE
               DISPLAY 'Error freeing storage from heap :('
           END-IF
           .
//SYSPRINT     DD       SYSOUT=*
//SYSLIN       DD       DSN=&&LOADSET,DISP=(MOD,PASS),
//             UNIT=SYSDA,SPACE=(TRK,(3,3)),
//             DCB=(BLKSIZE=0,LRECL=80,RECFM=FB)
//SYSUT1       DD       UNIT=SYSDA,SPACE=(CYL,(1,1))
//SYSUT2       DD       UNIT=SYSDA,SPACE=(CYL,(1,1))
//SYSUT3       DD       UNIT=SYSDA,SPACE=(CYL,(1,1))
//SYSUT4       DD       UNIT=SYSDA,SPACE=(CYL,(1,1))
//SYSUT5       DD       UNIT=SYSDA,SPACE=(CYL,(1,1))
//SYSUT6       DD       UNIT=SYSDA,SPACE=(CYL,(1,1))
//SYSUT7       DD       UNIT=SYSDA,SPACE=(CYL,(1,1))
//***
//GO         EXEC     PGM=LOADER,PARM='MAP,PRINT,AMODE(31),RMODE(ANY)',
//             REGION=4M,COND=(5,LT,C)
//SYSLIB       DD       DISP=SHR,DSN=-YOUR-SCEELLED-
//SYSLIN       DD       DSN=&&LOADSET,DISP=(OLD,DELETE,DELETE)
//SYSLOUT      DD       SYSOUT=*
//SYSPRINT     DD       SYSOUT=*
//SYSABOUT     DD       SYSOUT=*
//SYSUDUMP     DD       SYSOUT=*
//SYSOUT       DD       SYSOUT=*
//***
