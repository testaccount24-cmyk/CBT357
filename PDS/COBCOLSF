/**  REXX  -- GEN COBOL OFFSETS IN COLUMNS 73 THRU 80             **/

/**  COBCOLS USES A PROGRAM TO DETERMINE COBOL STRUCTURE OFFSETS  **/
/**  AND PLACE THEM IN COLUMNS 73 THRU 80.  IT WILL WORK WITHIN   **/
/**  A RANGE SPECIFIED BY C/CC/C## OR OVER THE ENTIRE FILE. THE   **/
/**  PROGRAM USED WILL IGNORE NON DATA ITEMS.                     **/

/**  THE OFFSETS ARE SHOWN AS ZZZ9ZZZ9 WHERE Z REPRESENTS A       **/
/**  BLANK OR A SIGNIFICANT DIGIT (I.E. NON ZERO).                **/

/*  SET UP ISPF ENVIRONMENT AND DETERMINE STARTING/ENDING LINES    */
   SAVEMSG=MSG()
   X=MSG("OFF")
   X=ADDRESS()
   SUBCOM ISPEXEC
   IF RC <> 0 THEN DO
         SAY "COBCOLS MUST BE RUN UNDER ISPF EDIT!"
         SIGNAL QUIT
       END
   SUBCOM ISREDIT
   UMODE = "ISREDIT"
   ADDRESS ISPEXEC "CONTROL ERRORS RETURN"
   ADDRESS ISREDIT
   "MACRO (HUH) NOPROCESS"
   IF HUH = "?" THEN SIGNAL DISPDOC
   "PROCESS RANGE C"
   IF RC > 0 THEN
      DO
         "(TOP) = LINENUM .ZFIRST"
         "(BOT) = LINENUM .ZLAST"
      END
   ELSE
      DO
         "(TOP) = LINENUM .ZFRANGE"
         "(BOT) = LINENUM .ZLRANGE"
      END

/*  DELETE OLD TEMP PDS FILE, IF ANY, AND ALLOCATE NEW ONE         */
   ADDRESS TSO
   "FREE DD(DDXX DD01)"
   "DELETE $$$TEMP.COPYBOOK.PDS"
   "ALLOCATE DD(DD01) DSN($$$TEMP.COPYBOOK.PDS) NEW",
      "CYL SPACE(01 01) RECFM(F B) LRECL(80) BLKSIZE(27920) DIR(12)"
   "ALLOCATE DD(DDXX) DSN($$$TEMP.COPYBOOK.PDS(DUMMYMEM)) SHR"

/*  WRITE LINES IN SPECIFIED RANGE TO TEMP PDS FILE AS MEMBER      */
   ADDRESS ISREDIT
   ADDRESS TSO "EXECIO 0 DISKW" DDXX "(OPEN"
   GOT_FIRST = 'NO'
   DO II = TOP TO BOT BY 1
      "ISREDIT (RECORD) = LINE &II"
      IF SUBSTR(RECORD,7,1) <> '*',
               & SUBSTR(RECORD,7,1) <> '/',
               & SUBSTR(RECORD,8,65) <> ' ' THEN DO
         IF GOT_FIRST = 'NO' THEN DO
            IF INDEX(SUBSTR(RECORD,8,4),'1') = 0 THEN DO
               DUMMY_REC = '       01  DUMMY-01-LEVEL.'
               PUSH DUMMY_REC
               ADDRESS TSO "EXECIO 1 DISKW" DDXX
            END
            GOT_FIRST = 'YES'
         END
         BB = INDEX(RECORD,'( ');
         DO WHILE ( BB <> 0 );
            RECORD = SUBSTR(RECORD,1,BB) || SUBSTR(RECORD,BB+2)
            BB = INDEX(RECORD,'( ');
         END
         PUSH RECORD
         ADDRESS TSO "EXECIO 1 DISKW" DDXX
      END
   END
   ADDRESS TSO "EXECIO 0 DISKW" DDXX "(FINIS"
   ADDRESS TSO
   "FREE DD(DDXX DD01)"

/*  FREE & ALLOCATE DD01, SYSIN, SYSLIST AND SYSPRINT FILES        */
/*  FOR INITIAL CALL TO FILEAID                                    */
   ADDRESS TSO
   "FREE DD(DD01 SYSIN SYSLIST SYSPRINT)"
   "ALLOCATE DD(DD01) DSN($$$TEMP.COPYBOOK.PDS) SHR"
   "DELETE $$$TEMP.SYSIN.FILE1"
   "ALLOC DD(SYSIN) DSN($$$TEMP.SYSIN.FILE1) NEW TRACKS SPACE(1)",
      "LRECL(80) BLKSIZE(800) RECFM(F B)"
   QUEUE "$$DD01 RLPRINT MEMBER=(DUMMYMEM)"
   "EXECIO" QUEUED() "DISKW SYSIN (FINIS"
   "DELETE $$$TEMP.SYSLIST.FILE"
   "ALLOCATE DD(SYSLIST) DSN($$$TEMP.SYSLIST.FILE) NEW",
      "CYL SPACE(01,01) RECFM(F,B) LRECL(80) BLKSIZE(27920)"
   "ALLOCATE DD(SYSPRINT) DUMMY",
      "RECFM(F,B) LRECL(133) BLKSIZE(6118)"
   "CALL *(FILEAID)"

/*  READ SYSLIST FILE AND STRIP OFF OFFSETS INTO LAST 8 BYTES OF   */
/*  APPROPRIATE RECORDS                                            */
   ADDRESS ISREDIT
   ADDRESS TSO "FREE DD(LAYOUT)"
   ADDRESS TSO "ALLOC DD(LAYOUT) DSN($$$TEMP.SYSLIST.FILE) SHR"
   ADDRESS TSO "EXECIO 0 DISKR" LAYOUT "(OPEN"

   CALL GET_LAYOUT
   DO II = TOP TO BOT BY 1
      "ISREDIT (RECORD) = LINE &II"
      IF INDEX(LAYLINE,' FILLER ') <> 0,
            & INDEX(RECORD, ' FILLER ') = 0 THEN DO
         SCANSTR = ' PIC '
      END
      IF SUBSTR(RECORD,7,1) <> "*",
            & SUBSTR(RECORD,7,1) <> "/",
            & INDEX(RECORD,SCANSTR) <> 0 THEN DO
         RECORD = SUBSTR(RECORD,1,72) || START_COL || END_COL
         "ISREDIT LINE &II = &STR(RECORD)"
         CALL GET_LAYOUT
      END
   END II

SHORT:
   ADDRESS TSO "EXECIO 0 DISKR" LAYOUT "(FINIS"
   ADDRESS TSO "FREE DD(LAYOUT)"
   ADDRESS TSO
   "DELETE $$$TEMP.COPYBOOK.PDS"
   "DELETE $$$TEMP.SYSIN.FILE1"
   "DELETE $$$TEMP.SYSLIST.FILE"
   ADDRESS ISPEXEC
   X=MSG(SAVEMSG)
   ADDRESS ISREDIT "LOCATE" TOP
   ADDRESS ISREDIT "RESET"
   EXIT(1)

GET_LAYOUT:
   CALL DO_DISKR
GOT_LAYOUT:
   IF SUBSTR(LAYLINE,1,1) = '8B'X THEN DO
      DO WHILE ( INDEX(LAYLINE,'FIELD LEVEL/NAME') = 0 )
         CALL DO_DISKR
      END
      CALL DO_DISKR
   END
   IF INDEX(LAYLINE,'DUMMY-01-LEVEL') <> 0 THEN SIGNAL GET_LAYOUT
   IF INDEX(LAYLINE,'END OF LAYOUT REPORT') <> 0 THEN SIGNAL SHORT
   IF INDEX(LAYLINE,' REDEFINES ') <> 0 THEN DO
      RR = INDEX(LAYLINE,' REDEFINES ')
      RR = RR + 10
      IF SUBSTR(LAYLINE,RR) = ' ' THEN CALL DO_DISKR
      SIGNAL GET_LAYOUT
   END
   IF SUBSTR(LAYLINE,2) = ' '           THEN SIGNAL GET_LAYOUT
   LAYLINE = ' ' || SUBSTR(LAYLINE,2)
   DO  MM = 1 TO 80  WHILE ( SUBSTR(LAYLINE,MM,1) = ' ' )
   END MM
   DO  NN = MM TO 80 WHILE ( SUBSTR(LAYLINE,NN,1) <> ' ' )
   END NN
   IF DATATYPE(SUBSTR(LAYLINE,MM,NN-MM)) = "NUM" THEN DO
      DO  MM = NN TO 80 WHILE ( SUBSTR(LAYLINE,MM,1) = ' ' )
      END MM
      DO  NN = MM TO 80 WHILE ( SUBSTR(LAYLINE,NN,1) <> ' ' )
      END NN
   END
   SCANSTR = SUBSTR(LAYLINE,MM-1,NN-MM+1)
   IF INDEX(LAYLINE,' OCCURS ') <> 0 THEN DO
      OO = INDEX(LAYLINE,' OCCURS ')
      DO  PP = OO+7 TO 80 WHILE (SUBSTR(LAYLINE,PP,1) =  ' ' )
      END PP
      DO  QQ = PP+1 TO 80 WHILE (SUBSTR(LAYLINE,QQ,1) <> ' ' )
      END QQ
      UBOUND = '(' || SUBSTR(LAYLINE,PP,QQ-PP) || ')'
      CALL GET_OCCURS
   END
   ELSE DO
      IF UBOUND <> 'UBOUND' THEN DO
         IF INDEX(SCANSTR,UBOUND) <> 0,
            THEN CALL CLEAR_OCCURS
            ELSE CALL GET_COLS
      END
      ELSE CALL GET_COLS
   END
   RETURN

CLEAR_OCCURS:
   DO WHILE(INDEX(LAYLINE,UBOUND) <> 0)
      IF SUBSTR(LAYLINE,78,1) = ' ' THEN DO
         CALL DO_DISKR
         IF SUBSTR(LAYLINE,1,1) = '8B'X THEN DO
            DO WHILE ( INDEX(LAYLINE,'FIELD LEVEL/NAME') = 0 )
               CALL DO_DISKR
            END
            CALL DO_DISKR
         END
         CALL DO_DISKR
      END
      ELSE DO
         CALL DO_DISKR
         IF SUBSTR(LAYLINE,1,1) = '8B'X THEN DO
            DO WHILE ( INDEX(LAYLINE,'FIELD LEVEL/NAME') = 0 )
               CALL DO_DISKR
            END
            CALL DO_DISKR
         END
      END
   END
   SIGNAL GOT_LAYOUT

DO_DISKR:
   ADDRESS TSO "EXECIO 1 DISKR" LAYOUT
   RETCODE = RC
   IF RETCODE <> 0 THEN SIGNAL SHORT
   PULL LAYLINE
   RETURN

FINISH_OCCURS:
   CALL DO_DISKR
   DO WHILE ( INDEX(LAYLINE,UBOUND) = 0 )
      CALL DO_DISKR
   END
   IF SUBSTR(LAYLINE,78,1) = ' ' THEN DO
      CALL DO_DISKR
      IF SUBSTR(LAYLINE,1,1) = '8B'X THEN DO
         DO WHILE ( INDEX(LAYLINE,'FIELD LEVEL/NAME') = 0 )
            CALL DO_DISKR
         END
         CALL DO_DISKR
      END
   END
   END_COL = SUBSTR(LAYLINE,67,04)
   RETURN

GET_COLS:
   IF SUBSTR(LAYLINE,78,1) = ' ' THEN DO
      CALL DO_DISKR
      IF SUBSTR(LAYLINE,1,1) = '8B'X THEN DO
         DO WHILE ( INDEX(LAYLINE,'FIELD LEVEL/NAME') = 0 )
            CALL DO_DISKR
         END
         CALL DO_DISKR
      END
   END
   START_COL = SUBSTR(LAYLINE,59,04)
   END_COL   = SUBSTR(LAYLINE,67,04)
   RETURN

GET_OCCURS:
   SCANSTR = SUBSTR(SCANSTR,1,LENGTH(SCANSTR)-3)
   IF SUBSTR(LAYLINE,78,1) = ' ' THEN DO
      CALL DO_DISKR
      IF SUBSTR(LAYLINE,1,1) = '8B'X THEN DO
         DO WHILE ( INDEX(LAYLINE,'FIELD LEVEL/NAME') = 0 )
            CALL DO_DISKR
         END
         CALL DO_DISKR
      END
   END
   START_COL = SUBSTR(LAYLINE,59,04)
   CALL FINISH_OCCURS
   RETURN

DISPDOC:
   ADDRESS TSO "CLEAR"
   SAY "COBCOLS - PLACE DATA OFFSETS IN COLUMN 73 THRU 80         "
   SAY
   SAY " FORMAT "
   SAY
   SAY "    COBCOLS  ( ? )                                        "
   SAY
   SAY "       INVOKES FILEAID AND OTHER PROGRAMS TO DETERMINE    "
   SAY "       COBOL DATA STRUCTURE OFFSETS AND PLACE THEM IN     "
   SAY "       COLUMNS 73 THROUGH 80 AS ZZZ9ZZZ9. THE RANGE IS    "
   SAY "       1 TO 9999.                                         "
   SAY
   SAY "       A QUESTION MARK WILL CAUSE THIS HELP TO BE SHOWN.  "
   SAY "       C/C#/CC PREFIX COMMANDS MAY BE USED TO LIMIT THE   "
   SAY "       LINES PROCESSED.                                   "
   SAY
   EXIT(1)

