/* REXX -- ZVW  -- View the dataset the cursor is on                */

/* This edit macro allows the user to VIEW the dataset located on   */
/* the line that the cursor is on.  If the dataset name contains &  */
/* tokens, i.e.  is within a PROC, ZVW will attempt to interpolate  */
/* the proper variables if they are defaulted on the PROC. It now   */
/* opens a new screen session for the View.                         */

  Address ISREDIT
  "MACRO (parms)"
  If parms = "?" then signal DispDoc
  Address ISPEXEC "CONTROL ERRORS RETURN"
  "(row,col) = CURSOR"
  "(data1)   = LINE  " row
  dsnstart = Pos("DSN=",data1)       /* look for DSN=              */
  If dsnstart = 0 then do
    dsnstart = Pos("DSNAME=",data1)  /* look for DSNAME=           */
    If dsnstart = 0 then do
      If col < 1 then dsnstart = 1   /* look for delimiters        */
      Else do
        Do ii = col to 1 by -1
          while substr(data1,ii,1) <> " " & substr(data1,ii,1) <> "'"
        End ii
        If ii <  1 then dsnstart = 1
                   else dsnstart = ii + 1
      End
    End
    Else dsnstart = dsnstart + 7     /* DSNAME= specified in JCL   */
  End
  Else dsnstart = dsnstart + 4       /* DSN = specified in JCL     */
  dsnend = Pos(",",data1,dsnstart)   /* look for end of dsn        */
  If dsnend = 0 then do
    dsnend = Pos(" ",data1,dsnstart)
    If dsnend = 0 then do
      dsnend = Pos("'",data1,dsnstart)
      If dsnend = 0 then do
        zedsmsg = "No end of DSN"
        zedlmsg = "The data set name is not terminated with a" ,
                  "space or comma."
        Address ISPEXEC "SETMSG MSG(ISRZ001)"    /* msg - with alarm */
        "CURSOR = " row col
        Exit 8
      End
    End
  End
  dsnend = dsnend - 1
  dsn = Substr(data1,dsnstart,dsnend-dsnstart+1) /* extract dsn     */
  If pos(dsn,'&') <> 0 then call Try_If_Proc
  Address ISPEXEC "SELECT PGM(ISPSTRT)",
     "PARM(CMD(ISREPDF '"dsn"' V))"
         /*** Address ISPEXEC "VIEW DATASET('"dsn"')" ***/
  If RC <> 0 then Address ISPEXEC "SETMSG MSG("ZERRMSG")"
  "CURSOR = " row col
  Exit 0

Try_If_Proc:
  "(proc1) = LINE" 1
  If pos(proc1," PROC ") <> 0 then do
    Do ii = 71 to 1 by -1 while substr(proc1,ii,1) = " "
    End
    If substr(proc1,ii,1) = "," | substr(proc1,ii-4,5) <> " PROC",
      then call Process_Proc
  End
  Return

Process_Proc:
  Call Get_Vary
  xx = pos(dsn,"&")
  Do while xx <> 0
    Do yy = xx+1 to length(dsn),
      while substr(dsn,yy,1) <> "."
    End
    sought  = substr(dsn,xx+1,yy-xx-1)
    substit = Vary.sought
    If yy < length(dsn) then dsn = substr(dsn,1,xx-1),
      || substit || substr(dsn,yy+1)
    Else dsn = substr(dsn,1,xx-1) || substit
    xx = pos(dsn,"&")
  End
  Return

Get_Vary:
  jj = pos(proc1,"=")
  ll = 1
  do while jj <> 0
    If substr(proc1,1,3) = "//*" then do
      ll = ll + 1
      "(proc1) = LINE" ll
      jj = pos(proc1,"=")
    End
    Else do
      do mm = jj-1 to 1 by -1,
        while substr(proc1,mm,1) <> " ",
          & substr(proc1,mm,1) <> ","
      end
      stemy = substr(proc1,mm+1,jj-mm-1)
      do nn = jj+1 to 71,
        while substr(proc1,nn,1) <> " " & substr(proc1,nn,1) <> ","
      end
      hashy = substr(proc1,jj+1,nn-jj-1)
      hashy = strip(hashy,B,"'")
      Vary.stemy = hashy
      proc1 = substr(proc1,1,mm),
        || copies(" ",nn-mm+1) || substr(proc1,nn)
      jj = pos(proc1,"=")
    End
    If jj = 0 then do
      Do ii = 71 to 1 by -1 while substr(proc1,ii,1) = " "
      End
      If substr(proc1,ii,1) = "," then do
        ll = ll + 1
        "(proc1) = LINE" ll
        jj = pos(proc1,"=")
      End
      Else jj = 0
    End
  End
  Return

DispDoc:
  ADDRESS TSO "CLEAR"
  Say "ZVW  --  View dataset under cursor                          "
  Say
  Say "   ZVW  ( ? )                                               "
  Say
  Say "       This macro will attempt to View the dataset on which "
  Say "       the cursor is positioned. If the dataset contains    "
  Say "       PROC substitutions such as &XX, the macro will try   "
  Say "       to fill in the variables from any PROC statement at  "
  Say "       the top of the file.                                 "
  Say
  Say "       A question mark (?) as the first parameter will      "
  Say "       cause this built in documentation to display.        "
  Say
  Exit(1)

