//-YOUR-USERID-D JOB  (-YOUR-ACCT-INFO-),'-YOUR-NAME-',
//             CLASS=2,MSGCLASS=X,NOTIFY=-YOUR-USERID-
//***
//***  BASIC COBOL TO READ AND WRITE A SEQUENTIAL FILE WITH
//***  THE OPTION OF DOING PROCESSING INBETWEEN, DYNAMICALLY
//***  ALLOCATING THE INPUT FILE BASED ON THE PARM PASSED
//***
//C          EXEC     PGM=IGYCRCTL,REGION=4M,
//             PARM=('LIB,MAP,NUMPROC(PFD),OFF,OPTIMIZE',
//            'APOST,NOSEQ,TRUNC(OPT),XREF')
//SYSIN        DD       *

      **************************
       IDENTIFICATION DIVISION.
      **************************
       PROGRAM-ID.  BASE INITIAL.


      ***********************
       ENVIRONMENT DIVISION.
      ***********************

       INPUT-OUTPUT SECTION.
      *---------------------*

       FILE-CONTROL.

           SELECT I
               ASSIGN TO I.

           SELECT O
               ASSIGN TO O.


      ****************
       DATA DIVISION.
      ****************

       FILE SECTION.
      *-------------*

       FD  I
           RECORDING MODE IS F
           BLOCK CONTAINS 0 RECORDS.
       01  INPUT-REC    PIC X(00080).

       FD  O
           RECORDING MODE IS F
           BLOCK CONTAINS 0 RECORDS.
       01  OUTPUT-REC   PIC X(00080).

       WORKING-STORAGE SECTION.
      *------------------------*

       01  WS-INPUT-REC                 PIC X(00080).
       01  WS-SAVE-REC                  PIC X(00080).
       01  WORK-AREAS.
           05  WS-DSNAME                PIC X(44)     VALUE ' '.
           05  WS-MEMBER                PIC X(8)      VALUE ' '.
           05  WS-DDNAME                PIC X(8)      VALUE 'I'.
           05  WS-DYNA-R15              PIC 9(4)      VALUE 0 COMP.
           05  WS-DYNA-RC               PIC 9(4)      VALUE 0 COMP.
           05  WS-DYNA-WHY              PIC 9(4)      VALUE 0 COMP.
           05  NUMBER-RECORDS-ADDED     PIC 9(9)      VALUE 0 COMP-3.
           05  NUMBER-RECORDS-DELETED   PIC 9(9)      VALUE 0 COMP-3.
           05  NUMBER-RECORDS-DUPS      PIC 9(9)      VALUE 0 COMP-3.
           05  NUMBER-RECORDS-READ      PIC 9(9)      VALUE 0 COMP-3.
           05  NUMBER-RECORDS-UPDATED   PIC 9(9)      VALUE 0 COMP-3.
           05  NUMBER-RECORDS-WRITTEN   PIC 9(9)      VALUE 0 COMP-3.
           05  FINAL-RETURN-CODE        PIC 9(4)      VALUE 0 COMP.
           05  END-OF-FILE-STATUS       PIC X         VALUE 'N'.
               88  AT-END-OF-FILE                     VALUE 'Y'.
           05  REWRITE-REC              PIC X         VALUE 'Y'.
           05  II                       PIC 9(4)              COMP.
           05  JJ                       PIC 9(4)              COMP.
           05  KK                       PIC 9(4)              COMP.
       01  WEEK-DAY-NUMBER              PIC 9.
       01  YYMMDD                       PIC 9(6).
       01  HHMM                         PIC 9(8).
       01  DAYS-OF-WEEK.
           05  MONDAY    PIC X(9)       VALUE 'MONDAY'.
           05  TUESDAY   PIC X(9)       VALUE 'TUESDAY'.
           05  WEDNESDAY PIC X(9)       VALUE 'WEDNESDAY'.
           05  THURSDAY  PIC X(9)       VALUE 'THURSDAY'.
           05  FRIDAY    PIC X(9)       VALUE 'FRIDAY'.
           05  SATURDAY  PIC X(9)       VALUE 'SATURDAY'.
           05  SUNDAY    PIC X(9)       VALUE 'SUNDAY'.
       01  WEEK-DAYS                    REDEFINES DAYS-OF-WEEK.
           05 WEEK-DAY   OCCURS 7 TIMES PIC X(9).

       LINKAGE SECTION.
      *----------------*
       01  PARM-DATA.
           05  PARM-LENGTH              PIC 9(4)              COMP.
           05  PARM-PASSED              PIC X(100).


      *************************************
       PROCEDURE DIVISION USING PARM-DATA.
      *************************************

       0000-MAIN.
      ************

           PERFORM 0100-INITIALIZATION

           IF WS-DYNA-R15 = 0

               PERFORM 0200-READ-WRITE-LOOP
                   UNTIL AT-END-OF-FILE

               PERFORM 0900-TERMINATION

           END-IF

           MOVE FINAL-RETURN-CODE TO RETURN-CODE

           GOBACK
           .

       0100-INITIALIZATION.
      **********************
           PERFORM VARYING KK FROM 1 BY 1
                   UNTIL KK > PARM-LENGTH
               IF PARM-PASSED(KK:1) = '('
                   MOVE KK TO II
                   MOVE 999 TO KK
               END-IF
           END-PERFORM
           IF KK < 999
               MOVE PARM-PASSED(1:PARM-LENGTH) TO WS-DSNAME
               MOVE ' ' TO WS-MEMBER
           ELSE
               PERFORM VARYING JJ FROM II BY 1
                   UNTIL PARM-PASSED(JJ:1) = ')'
               END-PERFORM
               MOVE PARM-PASSED(1:II - 1) TO WS-DSNAME
               MOVE PARM-PASSED(II + 1:JJ - II - 1) TO WS-MEMBER
           END-IF
           CALL 'DYNA' USING WS-DSNAME, WS-MEMBER, WS-DDNAME,
                             WS-DYNA-R15, WS-DYNA-RC, WS-DYNA-WHY
           IF WS-DYNA-R15 = 0
               OPEN  INPUT  I
                     OUTPUT O
               READ  I INTO WS-INPUT-REC
                   AT END SET AT-END-OF-FILE TO TRUE
                   NOT AT END ADD 1 TO NUMBER-RECORDS-READ
                   END-READ
           ELSE
               MOVE WS-DYNA-R15 TO FINAL-RETURN-CODE
               ACCEPT WEEK-DAY-NUMBER FROM DAY-OF-WEEK
               ACCEPT YYMMDD FROM DATE
               ACCEPT HHMM FROM TIME
               DISPLAY 'PROGRAM STATISTICS:  '
                   '                         '
                   WEEK-DAY(WEEK-DAY-NUMBER) ' '
                   YYMMDD '-' HHMM(1:2) ':' HHMM(3:2)
               DISPLAY '    PARM LENGTH               = '
                   PARM-LENGTH
               IF PARM-LENGTH NOT = 0
                   DISPLAY '    PARM PASSED TO PROGRAM    = '
                       PARM-PASSED(1:PARM-LENGTH)
                   END-IF
               DISPLAY ' '
               DISPLAY '    DSNAME                    = '
                   WS-DSNAME
               DISPLAY '    MEMBER                    = '
                   WS-MEMBER
               DISPLAY '    DDNAME                    = '
                   WS-DDNAME
               DISPLAY '    DYNALLOC R15 RETURN VALUE = '
                   WS-DYNA-R15
               DISPLAY '    DYNALLOC ERROR CODE       = '
                   WS-DYNA-RC
               DISPLAY '    DYNALLOC ERROR REASON     = '
                   WS-DYNA-WHY
           END-IF
           .

       0200-READ-WRITE-LOOP.
      ***********************
           MOVE 'Y' TO REWRITE-REC
           PERFORM 0200-PROCESS
           IF REWRITE-REC = 'Y'
               WRITE OUTPUT-REC FROM WS-INPUT-REC
               ADD 1 TO NUMBER-RECORDS-WRITTEN
           ELSE
               ADD 1 TO NUMBER-RECORDS-DELETED
           END-IF
           READ  I INTO WS-INPUT-REC
               AT END SET AT-END-OF-FILE TO TRUE
               NOT AT END ADD 1 TO NUMBER-RECORDS-READ
               END-READ
           .

       0200-PROCESS.
      ***************
           CONTINUE
           .

       0900-TERMINATION.
      *******************
           CLOSE I
                 O
           ACCEPT WEEK-DAY-NUMBER FROM DAY-OF-WEEK
           ACCEPT YYMMDD FROM DATE
           ACCEPT HHMM FROM TIME
           DISPLAY 'PROGRAM STATISTICS:  '
               '                         '
               WEEK-DAY(WEEK-DAY-NUMBER) ' '
               YYMMDD '-' HHMM(1:2) ':' HHMM(3:2)
           DISPLAY '    PARM LENGTH               = '
               PARM-LENGTH
           IF PARM-LENGTH NOT = 0
               DISPLAY '    PARM PASSED TO PROGRAM    = '
                   PARM-PASSED(1:PARM-LENGTH)
               END-IF
           DISPLAY ' '
           DISPLAY '    NUMBER OF RECORDS READ    = '
               NUMBER-RECORDS-READ
           DISPLAY '    NUMBER OF RECORDS WRITTEN = '
               NUMBER-RECORDS-WRITTEN
           DISPLAY '    NUMBER OF RECORDS UPDATED = '
               NUMBER-RECORDS-UPDATED
           DISPLAY '    NUMBER OF RECORDS DELETED = '
               NUMBER-RECORDS-DELETED
           DISPLAY '    NUMBER OF RECORDS ADDED   = '
               NUMBER-RECORDS-ADDED
           DISPLAY '    NUMBER OF DUPLICATE RECS  = '
               NUMBER-RECORDS-DUPS
           CALL 'DYNF' USING WS-DDNAME
           .

//SYSPRINT     DD       SYSOUT=*
//SYSLIN       DD       DSN=&&LOADSET,DISP=(MOD,PASS),
//             UNIT=SYSDA,SPACE=(CYL,(3,3)),
//             DCB=(BLKSIZE=0,LRECL=80,RECFM=FB)
//SYSUT1       DD       UNIT=SYSDA,SPACE=(CYL,(05,02))
//SYSUT2       DD       UNIT=SYSDA,SPACE=(CYL,(05,02))
//SYSUT3       DD       UNIT=SYSDA,SPACE=(CYL,(05,02))
//SYSUT4       DD       UNIT=SYSDA,SPACE=(CYL,(05,02))
//SYSUT5       DD       UNIT=SYSDA,SPACE=(CYL,(05,02))
//SYSUT6       DD       UNIT=SYSDA,SPACE=(CYL,(05,02))
//SYSUT7       DD       UNIT=SYSDA,SPACE=(CYL,(05,02))
//***
//GO         EXEC     PGM=LOADER,
//             PARM='MAP,PRINT/-YOUR-SYSLIB-(JOB)',             <***
//             REGION=4M,COND=(5,LT,C)
//SYSLIB       DD       DISP=SHR,DSN=-YOUR-SCEELLED-
//             DD       DISP=SHR,DSN=-YOUR-LOADLIB-
//SYSLIN       DD       DSN=&&LOADSET,DISP=(OLD,DELETE,DELETE)
//SYSLOUT      DD       SYSOUT=*
//SYSPRINT     DD       SYSOUT=*
//O            DD       SYSOUT=*
//SYSOUT       DD       SYSOUT=*
//***
